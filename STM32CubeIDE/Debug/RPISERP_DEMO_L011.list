
RPISERP_DEMO_L011.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b8  080027b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027c0  080027c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  080027d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000180  20000200  080027d4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127ed  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ba  00000000  00000000  00032821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001308a  00000000  00000000  00036be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d25  00000000  00000000  00049c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e200  00000000  00000000  0005f98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  000cdbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000c0be  00000000  00000000  000cfdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002734 	.word	0x08002734

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002734 	.word	0x08002734

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4647      	mov	r7, r8
 800043a:	b580      	push	{r7, lr}
 800043c:	0007      	movs	r7, r0
 800043e:	4699      	mov	r9, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	469c      	mov	ip, r3
 8000444:	0413      	lsls	r3, r2, #16
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	001d      	movs	r5, r3
 800044a:	000e      	movs	r6, r1
 800044c:	4661      	mov	r1, ip
 800044e:	0400      	lsls	r0, r0, #16
 8000450:	0c14      	lsrs	r4, r2, #16
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	4345      	muls	r5, r0
 8000456:	434b      	muls	r3, r1
 8000458:	4360      	muls	r0, r4
 800045a:	4361      	muls	r1, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	0c2c      	lsrs	r4, r5, #16
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4372      	muls	r2, r6
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	4463      	add	r3, ip
 800047a:	042d      	lsls	r5, r5, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	18c9      	adds	r1, r1, r3
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	1889      	adds	r1, r1, r2
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	469b      	mov	fp, r3
 80004c6:	d433      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c8:	465a      	mov	r2, fp
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83a      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e078      	b.n	80005d4 <__udivmoddi4+0x144>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e075      	b.n	80005da <__udivmoddi4+0x14a>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e028      	b.n	800055a <__udivmoddi4+0xca>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	4652      	mov	r2, sl
 8000538:	40da      	lsrs	r2, r3
 800053a:	4641      	mov	r1, r8
 800053c:	0013      	movs	r3, r2
 800053e:	464a      	mov	r2, r9
 8000540:	408a      	lsls	r2, r1
 8000542:	0017      	movs	r7, r2
 8000544:	4642      	mov	r2, r8
 8000546:	431f      	orrs	r7, r3
 8000548:	4653      	mov	r3, sl
 800054a:	4093      	lsls	r3, r2
 800054c:	001e      	movs	r6, r3
 800054e:	42af      	cmp	r7, r5
 8000550:	d9c4      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0d9      	beq.n	8000514 <__udivmoddi4+0x84>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	431a      	orrs	r2, r3
 8000566:	4646      	mov	r6, r8
 8000568:	087b      	lsrs	r3, r7, #1
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xfa>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xe4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xfe>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0x108>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xdc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xfa>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	465b      	mov	r3, fp
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db24      	blt.n	80005f0 <__udivmoddi4+0x160>
 80005a6:	002b      	movs	r3, r5
 80005a8:	465a      	mov	r2, fp
 80005aa:	4644      	mov	r4, r8
 80005ac:	40d3      	lsrs	r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	465b      	mov	r3, fp
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2a      	blt.n	8000612 <__udivmoddi4+0x182>
 80005bc:	0026      	movs	r6, r4
 80005be:	409e      	lsls	r6, r3
 80005c0:	0033      	movs	r3, r6
 80005c2:	0026      	movs	r6, r4
 80005c4:	4647      	mov	r7, r8
 80005c6:	40be      	lsls	r6, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	1a80      	subs	r0, r0, r2
 80005cc:	4199      	sbcs	r1, r3
 80005ce:	9000      	str	r0, [sp, #0]
 80005d0:	9101      	str	r1, [sp, #4]
 80005d2:	e79f      	b.n	8000514 <__udivmoddi4+0x84>
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d8bc      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80005d8:	e783      	b.n	80004e2 <__udivmoddi4+0x52>
 80005da:	4642      	mov	r2, r8
 80005dc:	2320      	movs	r3, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	e786      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	4646      	mov	r6, r8
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0023      	movs	r3, r4
 80005fe:	40f3      	lsrs	r3, r6
 8000600:	4644      	mov	r4, r8
 8000602:	4313      	orrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	dad4      	bge.n	80005bc <__udivmoddi4+0x12c>
 8000612:	4642      	mov	r2, r8
 8000614:	002f      	movs	r7, r5
 8000616:	2320      	movs	r3, #32
 8000618:	0026      	movs	r6, r4
 800061a:	4097      	lsls	r7, r2
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	40de      	lsrs	r6, r3
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7cd      	b.n	80005c2 <__udivmoddi4+0x132>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <AVC_Init>:
TIM_OC_InitTypeDef mPwmChannel = {0};
GPIO_InitTypeDef GPIO_InitStruct = {0};

void AVC_Init(void)
{
  mPwmChannel.OCMode = TIM_OCMODE_PWM1;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <AVC_Init+0x1c>)
 800067e:	2360      	movs	r3, #96	; 0x60
 8000680:	6013      	str	r3, [r2, #0]
  mPwmChannel.Pulse = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	6053      	str	r3, [r2, #4]
  mPwmChannel.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000686:	6093      	str	r3, [r2, #8]
  mPwmChannel.OCFastMode = TIM_OCFAST_DISABLE;
 8000688:	60d3      	str	r3, [r2, #12]

  GPIO_InitStruct.Pin = AV_PWM_Pin;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <AVC_Init+0x20>)
 800068c:	2101      	movs	r1, #1
 800068e:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	6051      	str	r1, [r2, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	6093      	str	r3, [r2, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	60d3      	str	r3, [r2, #12]
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);

  //HAL_GPIO_WritePin(AV_PWM_GPIO_Port, AV_PWM_Pin, GPIO_PIN_RESET);
}
 8000696:	4770      	bx	lr
 8000698:	2000003c 	.word	0x2000003c
 800069c:	20000028 	.word	0x20000028

080006a0 <AVC_RunOpen>:



void AVC_RunOpen(void)
{
 80006a0:	b510      	push	{r4, lr}

//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);

  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 80006a2:	4c1b      	ldr	r4, [pc, #108]	; (8000710 <AVC_RunOpen+0x70>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	0020      	movs	r0, r4
 80006a8:	f001 fc3c 	bl	8001f24 <HAL_TIM_PWM_Stop>
  mPwmChannel.Pulse = AVC_DEFAULT_DUTYCYCLE;
 80006ac:	4919      	ldr	r1, [pc, #100]	; (8000714 <AVC_RunOpen+0x74>)
 80006ae:	2332      	movs	r3, #50	; 0x32
 80006b0:	604b      	str	r3, [r1, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &mPwmChannel, TIM_CHANNEL_1) != HAL_OK)
 80006b2:	2200      	movs	r2, #0
 80006b4:	0020      	movs	r0, r4
 80006b6:	f001 fc5f 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d125      	bne.n	800070a <AVC_RunOpen+0x6a>
  {
    Error_Handler();
  }

  HAL_Delay(150);
 80006be:	2096      	movs	r0, #150	; 0x96
 80006c0:	f000 fc1a 	bl	8000ef8 <HAL_Delay>

  HAL_GPIO_WritePin(AV1_GPIO_Port, AV1_Pin, GPIO_PIN_RESET);
 80006c4:	24a0      	movs	r4, #160	; 0xa0
 80006c6:	05e4      	lsls	r4, r4, #23
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	0020      	movs	r0, r4
 80006ce:	f000 fd83 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV2_GPIO_Port, AV2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	0020      	movs	r0, r4
 80006d8:	f000 fd7e 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV3_GPIO_Port, AV3_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	0020      	movs	r0, r4
 80006e2:	f000 fd79 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV4_GPIO_Port, AV4_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	0020      	movs	r0, r4
 80006ec:	f000 fd74 	bl	80011d8 <HAL_GPIO_WritePin>

  HAL_Delay(150);
 80006f0:	2096      	movs	r0, #150	; 0x96
 80006f2:	f000 fc01 	bl	8000ef8 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80006f6:	4c06      	ldr	r4, [pc, #24]	; (8000710 <AVC_RunOpen+0x70>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	0020      	movs	r0, r4
 80006fc:	f001 fbb4 	bl	8001e68 <HAL_TIM_PWM_Start>

//  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	0020      	movs	r0, r4
 8000704:	f001 fbb0 	bl	8001e68 <HAL_TIM_PWM_Start>

}
 8000708:	bd10      	pop	{r4, pc}
    Error_Handler();
 800070a:	f000 f9b1 	bl	8000a70 <Error_Handler>
 800070e:	e7d6      	b.n	80006be <AVC_RunOpen+0x1e>
 8000710:	200000a8 	.word	0x200000a8
 8000714:	2000003c 	.word	0x2000003c

08000718 <AVC_RunClose>:

void AVC_RunClose(void)
{
 8000718:	b510      	push	{r4, lr}
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);
  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 800071a:	4c19      	ldr	r4, [pc, #100]	; (8000780 <AVC_RunClose+0x68>)
 800071c:	2100      	movs	r1, #0
 800071e:	0020      	movs	r0, r4
 8000720:	f001 fc00 	bl	8001f24 <HAL_TIM_PWM_Stop>
  mPwmChannel.Pulse = AVC_DEFAULT_DUTYCYCLE;
 8000724:	4917      	ldr	r1, [pc, #92]	; (8000784 <AVC_RunClose+0x6c>)
 8000726:	2332      	movs	r3, #50	; 0x32
 8000728:	604b      	str	r3, [r1, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &mPwmChannel, TIM_CHANNEL_1) != HAL_OK)
 800072a:	2200      	movs	r2, #0
 800072c:	0020      	movs	r0, r4
 800072e:	f001 fc23 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 8000732:	2800      	cmp	r0, #0
 8000734:	d120      	bne.n	8000778 <AVC_RunClose+0x60>
  {
    Error_Handler();
  }

  HAL_Delay(150);
 8000736:	2096      	movs	r0, #150	; 0x96
 8000738:	f000 fbde 	bl	8000ef8 <HAL_Delay>

  HAL_GPIO_WritePin(AV1_GPIO_Port, AV1_Pin, GPIO_PIN_SET);
 800073c:	24a0      	movs	r4, #160	; 0xa0
 800073e:	05e4      	lsls	r4, r4, #23
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	0020      	movs	r0, r4
 8000746:	f000 fd47 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV2_GPIO_Port, AV2_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	0020      	movs	r0, r4
 8000750:	f000 fd42 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV3_GPIO_Port, AV3_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	0020      	movs	r0, r4
 800075a:	f000 fd3d 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV4_GPIO_Port, AV4_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	0020      	movs	r0, r4
 8000764:	f000 fd38 	bl	80011d8 <HAL_GPIO_WritePin>

  HAL_Delay(150);
 8000768:	2096      	movs	r0, #150	; 0x96
 800076a:	f000 fbc5 	bl	8000ef8 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800076e:	2100      	movs	r1, #0
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <AVC_RunClose+0x68>)
 8000772:	f001 fb79 	bl	8001e68 <HAL_TIM_PWM_Start>
//  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);
}
 8000776:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000778:	f000 f97a 	bl	8000a70 <Error_Handler>
 800077c:	e7db      	b.n	8000736 <AVC_RunClose+0x1e>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	200000a8 	.word	0x200000a8
 8000784:	2000003c 	.word	0x2000003c

08000788 <AVC_Stop>:

void AVC_Stop(void)
{
 8000788:	b510      	push	{r4, lr}
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);

  HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <AVC_Stop+0x38>)
 800078e:	f001 fbc9 	bl	8001f24 <HAL_TIM_PWM_Stop>

  HAL_GPIO_WritePin(AV1_GPIO_Port, AV1_Pin, GPIO_PIN_RESET);
 8000792:	24a0      	movs	r4, #160	; 0xa0
 8000794:	05e4      	lsls	r4, r4, #23
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	0020      	movs	r0, r4
 800079c:	f000 fd1c 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV2_GPIO_Port, AV2_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	0020      	movs	r0, r4
 80007a6:	f000 fd17 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV3_GPIO_Port, AV3_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	0020      	movs	r0, r4
 80007b0:	f000 fd12 	bl	80011d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AV4_GPIO_Port, AV4_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	0020      	movs	r0, r4
 80007ba:	f000 fd0d 	bl	80011d8 <HAL_GPIO_WritePin>

}
 80007be:	bd10      	pop	{r4, pc}
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <StartReciever>:
}


void StartReciever(void)
{
  mRxDma->CNDTR = RSP_PACKET_SIZE;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <StartReciever+0x24>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	220e      	movs	r2, #14
 80007ca:	605a      	str	r2, [r3, #4]
  mRxDma->CCR |= DMA_CCR_EN;  // enable DMA channel
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	2101      	movs	r1, #1
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
  mRspUart->Instance->CR1 |= USART_CR1_IDLEIE | USART_CR1_RE | USART_CR1_UE;  // Idle interrupt enabled
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <StartReciever+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	2015      	movs	r0, #21
 80007de:	4303      	orrs	r3, r0
 80007e0:	6013      	str	r3, [r2, #0]
  mRxBusy = true;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <StartReciever+0x2c>)
 80007e4:	7019      	strb	r1, [r3, #0]
}
 80007e6:	4770      	bx	lr
 80007e8:	20000068 	.word	0x20000068
 80007ec:	20000050 	.word	0x20000050
 80007f0:	20000054 	.word	0x20000054

080007f4 <Checksum>:
  }
}


uint8_t Checksum(uint8_t* data, uint8_t length)
{
 80007f4:	b510      	push	{r4, lr}
 80007f6:	0004      	movs	r4, r0
  uint8_t i,chsum;
  chsum = 0;
 80007f8:	2000      	movs	r0, #0
  for(i = 0;i < length; i++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	e004      	b.n	8000808 <Checksum+0x14>
  {
    chsum += data[i];
 80007fe:	5ce2      	ldrb	r2, [r4, r3]
 8000800:	1810      	adds	r0, r2, r0
 8000802:	b2c0      	uxtb	r0, r0
  for(i = 0;i < length; i++)
 8000804:	3301      	adds	r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	428b      	cmp	r3, r1
 800080a:	d3f8      	bcc.n	80007fe <Checksum+0xa>
  }
  return chsum;
}
 800080c:	bd10      	pop	{r4, pc}
	...

08000810 <USART2_IRQHandler>:


/* Hard-coded IRQ handlers of DMA channels and UART*/

void USART2_IRQHandler(void)
{
 8000810:	b570      	push	{r4, r5, r6, lr}
  if (mRspUart->Instance->ISR & USART_ISR_IDLE)   // Rx Idle interrupt
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <USART2_IRQHandler+0x88>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	06db      	lsls	r3, r3, #27
 800081c:	d515      	bpl.n	800084a <USART2_IRQHandler+0x3a>
  {
    uint8_t rxSize = RSP_PACKET_SIZE - mRxDma->CNDTR;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <USART2_IRQHandler+0x8c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685c      	ldr	r4, [r3, #4]
 8000824:	b2e4      	uxtb	r4, r4
 8000826:	220e      	movs	r2, #14
 8000828:	1b12      	subs	r2, r2, r4
 800082a:	b2d1      	uxtb	r1, r2
    mRxDma->CCR &= ~DMA_CCR_EN; // disable the DMA channel even when it is not completed transfer
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	2001      	movs	r0, #1
 8000830:	4382      	bics	r2, r0
 8000832:	601a      	str	r2, [r3, #0]
    mRspUart->Instance->ICR = USART_ICR_IDLECF;  // clear the IDLE flag
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <USART2_IRQHandler+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2210      	movs	r2, #16
 800083c:	621a      	str	r2, [r3, #32]
    if(mRxData[0] == RSP_MSG_START_B1  && mRxData[1] == RSP_MSG_START_B2)
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <USART2_IRQHandler+0x90>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b7f      	cmp	r3, #127	; 0x7f
 8000844:	d00d      	beq.n	8000862 <USART2_IRQHandler+0x52>
        }
      }
    }

    // reenable the receiver for next packet reception
    StartReciever();
 8000846:	f7ff ffbd 	bl	80007c4 <StartReciever>
  }

  if (mRspUart->Instance->ISR & USART_ISR_TC)   // Transfer Complete
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <USART2_IRQHandler+0x88>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	69da      	ldr	r2, [r3, #28]
 8000852:	0652      	lsls	r2, r2, #25
 8000854:	d504      	bpl.n	8000860 <USART2_IRQHandler+0x50>
  {
    mRspUart->Instance->ICR = USART_ICR_TCCF; // clear the TC flag
 8000856:	2240      	movs	r2, #64	; 0x40
 8000858:	621a      	str	r2, [r3, #32]
    mTxBusy = false;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <USART2_IRQHandler+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  }
}
 8000860:	bd70      	pop	{r4, r5, r6, pc}
    if(mRxData[0] == RSP_MSG_START_B1  && mRxData[1] == RSP_MSG_START_B2)
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <USART2_IRQHandler+0x90>)
 8000864:	785b      	ldrb	r3, [r3, #1]
 8000866:	2baa      	cmp	r3, #170	; 0xaa
 8000868:	d1ed      	bne.n	8000846 <USART2_IRQHandler+0x36>
      if (rxSize == mRxData[2] + 4)   // if full packet was received
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <USART2_IRQHandler+0x90>)
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	3304      	adds	r3, #4
 8000870:	4299      	cmp	r1, r3
 8000872:	d1e8      	bne.n	8000846 <USART2_IRQHandler+0x36>
        if(mRxData[rxSize - 1] == Checksum(mRxData, rxSize-1))
 8000874:	3901      	subs	r1, #1
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <USART2_IRQHandler+0x90>)
 8000878:	5c45      	ldrb	r5, [r0, r1]
 800087a:	210d      	movs	r1, #13
 800087c:	1b09      	subs	r1, r1, r4
 800087e:	b2c9      	uxtb	r1, r1
 8000880:	f7ff ffb8 	bl	80007f4 <Checksum>
 8000884:	4285      	cmp	r5, r0
 8000886:	d1de      	bne.n	8000846 <USART2_IRQHandler+0x36>
          CB_Put(mReceiveFifo, &(mRxData[2]));
 8000888:	4905      	ldr	r1, [pc, #20]	; (80008a0 <USART2_IRQHandler+0x90>)
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <USART2_IRQHandler+0x98>)
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	3102      	adds	r1, #2
 8000890:	f000 f822 	bl	80008d8 <CB_Put>
 8000894:	e7d7      	b.n	8000846 <USART2_IRQHandler+0x36>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000050 	.word	0x20000050
 800089c:	20000068 	.word	0x20000068
 80008a0:	20000058 	.word	0x20000058
 80008a4:	2000006c 	.word	0x2000006c
 80008a8:	2000004c 	.word	0x2000004c

080008ac <DMA1_Channel4_5_IRQHandler>:

/* TX DMA*/
//void DMA1_Channel4_IRQHandler(void)
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
  mTxDma->CCR &= ~DMA_CCR_EN;  // disable the interrupt
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <DMA1_Channel4_5_IRQHandler+0x20>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	2101      	movs	r1, #1
 80008b4:	438b      	bics	r3, r1
 80008b6:	6013      	str	r3, [r2, #0]
  DMA1->IFCR |= DMA_IFCR_CGIF4;  // clear all DMA flags
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <DMA1_Channel4_5_IRQHandler+0x24>)
 80008ba:	6851      	ldr	r1, [r2, #4]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	015b      	lsls	r3, r3, #5
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6053      	str	r3, [r2, #4]
  mTxBusy = false;
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <DMA1_Channel4_5_IRQHandler+0x28>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
}
 80008ca:	4770      	bx	lr
 80008cc:	20000070 	.word	0x20000070
 80008d0:	40020000 	.word	0x40020000
 80008d4:	2000006c 	.word	0x2000006c

080008d8 <CB_Put>:

}


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 80008d8:	b510      	push	{r4, lr}
 80008da:	1e04      	subs	r4, r0, #0
	
	if (cb != NULL)
 80008dc:	d01e      	beq.n	800091c <CB_Put+0x44>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 80008de:	8900      	ldrh	r0, [r0, #8]
 80008e0:	7922      	ldrb	r2, [r4, #4]
 80008e2:	4350      	muls	r0, r2
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	469c      	mov	ip, r3
 80008e8:	4460      	add	r0, ip
 80008ea:	f001 ff11 	bl	8002710 <memcpy>
		if(cb->full)
 80008ee:	7b23      	ldrb	r3, [r4, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d005      	beq.n	8000900 <CB_Put+0x28>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 80008f4:	8960      	ldrh	r0, [r4, #10]
 80008f6:	3001      	adds	r0, #1
 80008f8:	88e1      	ldrh	r1, [r4, #6]
 80008fa:	f7ff fd75 	bl	80003e8 <__aeabi_idivmod>
 80008fe:	8161      	strh	r1, [r4, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8000900:	8920      	ldrh	r0, [r4, #8]
 8000902:	3001      	adds	r0, #1
 8000904:	88e1      	ldrh	r1, [r4, #6]
 8000906:	f7ff fd6f 	bl	80003e8 <__aeabi_idivmod>
 800090a:	b289      	uxth	r1, r1
 800090c:	8121      	strh	r1, [r4, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 800090e:	8963      	ldrh	r3, [r4, #10]
 8000910:	1ac9      	subs	r1, r1, r3
 8000912:	424b      	negs	r3, r1
 8000914:	4159      	adcs	r1, r3
 8000916:	7321      	strb	r1, [r4, #12]

		return 0;
 8000918:	2000      	movs	r0, #0
	}
	else
	{
		return 1;
	}
}
 800091a:	bd10      	pop	{r4, pc}
		return 1;
 800091c:	2001      	movs	r0, #1
 800091e:	e7fc      	b.n	800091a <CB_Put+0x42>

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000920:	b500      	push	{lr}
 8000922:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000924:	4a09      	ldr	r2, [pc, #36]	; (800094c <MX_DMA_Init+0x2c>)
 8000926:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000928:	2301      	movs	r3, #1
 800092a:	4319      	orrs	r1, r3
 800092c:	6311      	str	r1, [r2, #48]	; 0x30
 800092e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000930:	4013      	ands	r3, r2
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200b      	movs	r0, #11
 800093c:	f000 faee 	bl	8000f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000940:	200b      	movs	r0, #11
 8000942:	f000 fb1b 	bl	8000f7c <HAL_NVIC_EnableIRQ>

}
 8000946:	b003      	add	sp, #12
 8000948:	bd00      	pop	{pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2214      	movs	r2, #20
 8000956:	2100      	movs	r1, #0
 8000958:	a803      	add	r0, sp, #12
 800095a:	f001 fee2 	bl	8002722 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x84>)
 8000960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000962:	2204      	movs	r2, #4
 8000964:	4311      	orrs	r1, r2
 8000966:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800096a:	400a      	ands	r2, r1
 800096c:	9200      	str	r2, [sp, #0]
 800096e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000972:	2501      	movs	r5, #1
 8000974:	432a      	orrs	r2, r5
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
 8000978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097a:	402a      	ands	r2, r5
 800097c:	9201      	str	r2, [sp, #4]
 800097e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000982:	2202      	movs	r2, #2
 8000984:	4311      	orrs	r1, r2
 8000986:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	401a      	ands	r2, r3
 800098c:	9202      	str	r2, [sp, #8]
 800098e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AV1_Pin|AV2_Pin|AV3_Pin|AV4_Pin, GPIO_PIN_RESET);
 8000990:	27a0      	movs	r7, #160	; 0xa0
 8000992:	05ff      	lsls	r7, r7, #23
 8000994:	2200      	movs	r2, #0
 8000996:	2178      	movs	r1, #120	; 0x78
 8000998:	0038      	movs	r0, r7
 800099a:	f000 fc1d 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800099e:	4e0e      	ldr	r6, [pc, #56]	; (80009d8 <MX_GPIO_Init+0x88>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2108      	movs	r1, #8
 80009a4:	0030      	movs	r0, r6
 80009a6:	f000 fc17 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = AV1_Pin|AV2_Pin|AV3_Pin|AV4_Pin;
 80009aa:	2378      	movs	r3, #120	; 0x78
 80009ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2400      	movs	r4, #0
 80009b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	a903      	add	r1, sp, #12
 80009b8:	0038      	movs	r0, r7
 80009ba:	f000 fb53 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009be:	2308      	movs	r3, #8
 80009c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009c8:	a903      	add	r1, sp, #12
 80009ca:	0030      	movs	r0, r6
 80009cc:	f000 fb4a 	bl	8001064 <HAL_GPIO_Init>

}
 80009d0:	b009      	add	sp, #36	; 0x24
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	50000400 	.word	0x50000400

080009dc <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80009dc:	b510      	push	{r4, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_LPTIM1_Init+0x30>)
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_LPTIM1_Init+0x34>)
 80009e2:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80009e4:	2300      	movs	r3, #0
 80009e6:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80009e8:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80009ea:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80009ec:	6103      	str	r3, [r0, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <MX_LPTIM1_Init+0x38>)
 80009f0:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80009f2:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80009f4:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80009fc:	f000 fbf2 	bl	80011e4 <HAL_LPTIM_Init>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d100      	bne.n	8000a06 <MX_LPTIM1_Init+0x2a>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a04:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a06:	f000 f833 	bl	8000a70 <Error_Handler>
}
 8000a0a:	e7fb      	b.n	8000a04 <MX_LPTIM1_Init+0x28>
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	40007c00 	.word	0x40007c00
 8000a14:	0000ffff 	.word	0x0000ffff

08000a18 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	2214      	movs	r2, #20
 8000a20:	2100      	movs	r1, #0
 8000a22:	a801      	add	r0, sp, #4
 8000a24:	f001 fe7d 	bl	8002722 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_LPTIM_MspInit+0x4c>)
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d001      	beq.n	8000a34 <HAL_LPTIM_MspInit+0x1c>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000a30:	b006      	add	sp, #24
 8000a32:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_LPTIM_MspInit+0x50>)
 8000a36:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	0612      	lsls	r2, r2, #24
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a42:	2202      	movs	r2, #2
 8000a44:	4311      	orrs	r1, r2
 8000a46:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = AV_ENC1_Pin|AV_ENC2_Pin;
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 8000a56:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	a901      	add	r1, sp, #4
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HAL_LPTIM_MspInit+0x54>)
 8000a5c:	f000 fb02 	bl	8001064 <HAL_GPIO_Init>
}
 8000a60:	e7e6      	b.n	8000a30 <HAL_LPTIM_MspInit+0x18>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40007c00 	.word	0x40007c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	50000400 	.word	0x50000400

08000a70 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x2>

08000a74 <SystemClock_Config>:
{
 8000a74:	b500      	push	{lr}
 8000a76:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a78:	2234      	movs	r2, #52	; 0x34
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	a80b      	add	r0, sp, #44	; 0x2c
 8000a7e:	f001 fe50 	bl	8002722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a82:	2214      	movs	r2, #20
 8000a84:	2100      	movs	r1, #0
 8000a86:	a806      	add	r0, sp, #24
 8000a88:	f001 fe4b 	bl	8002722 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	2218      	movs	r2, #24
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4668      	mov	r0, sp
 8000a92:	f001 fe46 	bl	8002722 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a96:	491e      	ldr	r1, [pc, #120]	; (8000b10 <SystemClock_Config+0x9c>)
 8000a98:	680b      	ldr	r3, [r1, #0]
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <SystemClock_Config+0xa0>)
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	320f      	adds	r2, #15
 8000ab0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	02db      	lsls	r3, r3, #11
 8000abc:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	03db      	lsls	r3, r3, #15
 8000ac2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	a80b      	add	r0, sp, #44	; 0x2c
 8000ac6:	f000 fc39 	bl	800133c <HAL_RCC_OscConfig>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d119      	bne.n	8000b02 <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	3b0c      	subs	r3, #12
 8000ad4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ada:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	a806      	add	r0, sp, #24
 8000ae2:	f000 feb9 	bl	8001858 <HAL_RCC_ClockConfig>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d10d      	bne.n	8000b06 <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8000aea:	2382      	movs	r3, #130	; 0x82
 8000aec:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	9302      	str	r3, [sp, #8]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000af2:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	4668      	mov	r0, sp
 8000af6:	f000 ffc1 	bl	8001a7c <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d105      	bne.n	8000b0a <SystemClock_Config+0x96>
}
 8000afe:	b019      	add	sp, #100	; 0x64
 8000b00:	bd00      	pop	{pc}
    Error_Handler();
 8000b02:	f7ff ffb5 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000b06:	f7ff ffb3 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000b0a:	f7ff ffb1 	bl	8000a70 <Error_Handler>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40007000 	.word	0x40007000
 8000b14:	ffffe7ff 	.word	0xffffe7ff

08000b18 <main>:
{
 8000b18:	b510      	push	{r4, lr}
  HAL_Init();
 8000b1a:	f000 f9c7 	bl	8000eac <HAL_Init>
  SystemClock_Config();
 8000b1e:	f7ff ffa9 	bl	8000a74 <SystemClock_Config>
  MX_GPIO_Init();
 8000b22:	f7ff ff15 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b26:	f7ff fefb 	bl	8000920 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b2a:	f000 f8c7 	bl	8000cbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2e:	f000 f869 	bl	8000c04 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000b32:	f7ff ff53 	bl	80009dc <MX_LPTIM1_Init>
  AVC_Init();
 8000b36:	f7ff fda1 	bl	800067c <AVC_Init>
 8000b3a:	e004      	b.n	8000b46 <main+0x2e>
        AVC_RunClose();
 8000b3c:	f7ff fdec 	bl	8000718 <AVC_RunClose>
        mDbgCmd  = 0;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <main+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    switch(mDbgCmd)
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <main+0x58>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d0f6      	beq.n	8000b3c <main+0x24>
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d007      	beq.n	8000b62 <main+0x4a>
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d1f7      	bne.n	8000b46 <main+0x2e>
        AVC_RunOpen();
 8000b56:	f7ff fda3 	bl	80006a0 <AVC_RunOpen>
        mDbgCmd  = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <main+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
        break;
 8000b60:	e7f1      	b.n	8000b46 <main+0x2e>
        AVC_Stop();
 8000b62:	f7ff fe11 	bl	8000788 <AVC_Stop>
        mDbgCmd  = 0;
 8000b66:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <main+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
        break;
 8000b6c:	e7eb      	b.n	8000b46 <main+0x2e>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000a4 	.word	0x200000a4

08000b74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_MspInit+0x18>)
 8000b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b78:	2101      	movs	r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	0552      	lsls	r2, r2, #21
 8000b84:	430a      	orrs	r2, r1
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler>

08000b92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler>

08000b94 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9a:	f000 f99b 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bd10      	pop	{r4, pc}

08000ba0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000ba0:	6802      	ldr	r2, [r0, #0]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d000      	beq.n	8000bac <HAL_TIM_Base_MspInit+0xc>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000baa:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bac:	4a02      	ldr	r2, [pc, #8]	; (8000bb8 <HAL_TIM_Base_MspInit+0x18>)
 8000bae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000bb6:	e7f8      	b.n	8000baa <HAL_TIM_Base_MspInit+0xa>
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	2214      	movs	r2, #20
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	a801      	add	r0, sp, #4
 8000bc8:	f001 fdab 	bl	8002722 <memset>
  if(timHandle->Instance==TIM2)
 8000bcc:	6822      	ldr	r2, [r4, #0]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d001      	beq.n	8000bda <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bd6:	b006      	add	sp, #24
 8000bd8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <HAL_TIM_MspPostInit+0x44>)
 8000bdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000bde:	2301      	movs	r3, #1
 8000be0:	4319      	orrs	r1, r3
 8000be2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000be4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000be6:	401a      	ands	r2, r3
 8000be8:	9200      	str	r2, [sp, #0]
 8000bea:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = AV_PWM_Pin;
 8000bec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	3301      	adds	r3, #1
 8000bf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(AV_PWM_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	20a0      	movs	r0, #160	; 0xa0
 8000bf6:	a901      	add	r1, sp, #4
 8000bf8:	05c0      	lsls	r0, r0, #23
 8000bfa:	f000 fa33 	bl	8001064 <HAL_GPIO_Init>
}
 8000bfe:	e7ea      	b.n	8000bd6 <HAL_TIM_MspPostInit+0x1a>
 8000c00:	40021000 	.word	0x40021000

08000c04 <MX_TIM2_Init>:
{
 8000c04:	b500      	push	{lr}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c08:	2210      	movs	r2, #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	a806      	add	r0, sp, #24
 8000c0e:	f001 fd88 	bl	8002722 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c12:	2208      	movs	r2, #8
 8000c14:	2100      	movs	r1, #0
 8000c16:	a804      	add	r0, sp, #16
 8000c18:	f001 fd83 	bl	8002722 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4668      	mov	r0, sp
 8000c22:	f001 fd7e 	bl	8002722 <memset>
  htim2.Instance = TIM2;
 8000c26:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 3200;
 8000c2e:	23c8      	movs	r3, #200	; 0xc8
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	2300      	movs	r3, #0
 8000c36:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100;
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c40:	f001 f8c9 	bl	8001dd6 <HAL_TIM_Base_Init>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d128      	bne.n	8000c9a <MX_TIM2_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	a906      	add	r1, sp, #24
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c52:	f001 fa09 	bl	8002068 <HAL_TIM_ConfigClockSource>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d122      	bne.n	8000ca0 <MX_TIM2_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c5c:	f001 f8e0 	bl	8001e20 <HAL_TIM_PWM_Init>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d120      	bne.n	8000ca6 <MX_TIM2_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6a:	a904      	add	r1, sp, #16
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c6e:	f001 fa7f 	bl	8002170 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d11a      	bne.n	8000cac <MX_TIM2_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	; 0x60
 8000c78:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	2200      	movs	r2, #0
 8000c84:	4669      	mov	r1, sp
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c88:	f001 f976 	bl	8001f78 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d110      	bne.n	8000cb2 <MX_TIM2_Init+0xae>
  HAL_TIM_MspPostInit(&htim2);
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_TIM2_Init+0xb4>)
 8000c92:	f7ff ff93 	bl	8000bbc <HAL_TIM_MspPostInit>
}
 8000c96:	b00b      	add	sp, #44	; 0x2c
 8000c98:	bd00      	pop	{pc}
    Error_Handler();
 8000c9a:	f7ff fee9 	bl	8000a70 <Error_Handler>
 8000c9e:	e7d3      	b.n	8000c48 <MX_TIM2_Init+0x44>
    Error_Handler();
 8000ca0:	f7ff fee6 	bl	8000a70 <Error_Handler>
 8000ca4:	e7d9      	b.n	8000c5a <MX_TIM2_Init+0x56>
    Error_Handler();
 8000ca6:	f7ff fee3 	bl	8000a70 <Error_Handler>
 8000caa:	e7db      	b.n	8000c64 <MX_TIM2_Init+0x60>
    Error_Handler();
 8000cac:	f7ff fee0 	bl	8000a70 <Error_Handler>
 8000cb0:	e7e1      	b.n	8000c76 <MX_TIM2_Init+0x72>
    Error_Handler();
 8000cb2:	f7ff fedd 	bl	8000a70 <Error_Handler>
 8000cb6:	e7eb      	b.n	8000c90 <MX_TIM2_Init+0x8c>
 8000cb8:	200000a8 	.word	0x200000a8

08000cbc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cbc:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x34>)
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x38>)
 8000cc2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 57600;
 8000cc4:	23e1      	movs	r3, #225	; 0xe1
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	f001 fcbd 	bl	800265c <HAL_UART_Init>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d100      	bne.n	8000ce8 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ce8:	f7ff fec2 	bl	8000a70 <Error_Handler>
}
 8000cec:	e7fb      	b.n	8000ce6 <MX_USART2_UART_Init+0x2a>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000178 	.word	0x20000178
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b530      	push	{r4, r5, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	2214      	movs	r2, #20
 8000d00:	2100      	movs	r1, #0
 8000d02:	a801      	add	r0, sp, #4
 8000d04:	f001 fd0d 	bl	8002722 <memset>
  if(uartHandle->Instance==USART2)
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HAL_UART_MspInit+0xc4>)
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d10:	b007      	add	sp, #28
 8000d12:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	0292      	lsls	r2, r2, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d22:	2201      	movs	r2, #1
 8000d24:	4311      	orrs	r1, r2
 8000d26:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	9200      	str	r2, [sp, #0]
 8000d2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	3301      	adds	r3, #1
 8000d3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d3c:	2504      	movs	r5, #4
 8000d3e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	20a0      	movs	r0, #160	; 0xa0
 8000d42:	a901      	add	r1, sp, #4
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	f000 f98d 	bl	8001064 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000d4a:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <HAL_UART_MspInit+0xd0>)
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_UART_MspInit+0xd4>)
 8000d4e:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000d50:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d52:	2300      	movs	r3, #0
 8000d54:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d60:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d64:	f000 f932 	bl	8000fcc <HAL_DMA_Init>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d121      	bne.n	8000db0 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0xd0>)
 8000d6e:	6723      	str	r3, [r4, #112]	; 0x70
 8000d70:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0xd8>)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0xdc>)
 8000d76:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d88:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d8c:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d90:	f000 f91c 	bl	8000fcc <HAL_DMA_Init>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d10e      	bne.n	8000db6 <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_UART_MspInit+0xd8>)
 8000d9a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000d9c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	201c      	movs	r0, #28
 8000da4:	f000 f8ba 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da8:	201c      	movs	r0, #28
 8000daa:	f000 f8e7 	bl	8000f7c <HAL_NVIC_EnableIRQ>
}
 8000dae:	e7af      	b.n	8000d10 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8000db0:	f7ff fe5e 	bl	8000a70 <Error_Handler>
 8000db4:	e7da      	b.n	8000d6c <HAL_UART_MspInit+0x74>
      Error_Handler();
 8000db6:	f7ff fe5b 	bl	8000a70 <Error_Handler>
 8000dba:	e7ed      	b.n	8000d98 <HAL_UART_MspInit+0xa0>
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	00008004 	.word	0x00008004
 8000dc8:	200000e8 	.word	0x200000e8
 8000dcc:	40020058 	.word	0x40020058
 8000dd0:	20000130 	.word	0x20000130
 8000dd4:	40020044 	.word	0x40020044

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dd8:	4813      	ldr	r0, [pc, #76]	; (8000e28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <LoopForever+0x6>)
    LDR R1, [R0]
 8000dde:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000de0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <LoopForever+0xa>)
    CMP R1, R2
 8000de4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000de6:	d105      	bne.n	8000df4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000de8:	4812      	ldr	r0, [pc, #72]	; (8000e34 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000dea:	4913      	ldr	r1, [pc, #76]	; (8000e38 <LoopForever+0x12>)
    STR R1, [R0]
 8000dec:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000df0:	4913      	ldr	r1, [pc, #76]	; (8000e40 <LoopForever+0x1a>)
    STR R1, [R0]
 8000df2:	6001      	str	r1, [r0, #0]

08000df4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000df6:	4914      	ldr	r1, [pc, #80]	; (8000e48 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <LoopForever+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e0c:	4c11      	ldr	r4, [pc, #68]	; (8000e54 <LoopForever+0x2e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e1a:	f000 f81e 	bl	8000e5a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f001 fc53 	bl	80026c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fe79 	bl	8000b18 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
   ldr   r0, =_estack
 8000e28:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000e2c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e30:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000e34:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000e38:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e3c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e40:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	080027c8 	.word	0x080027c8
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e54:	20000200 	.word	0x20000200

08000e58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_COMP_IRQHandler>

08000e5a <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_InitTick+0x44>)
 8000e62:	7819      	ldrb	r1, [r3, #0]
 8000e64:	20fa      	movs	r0, #250	; 0xfa
 8000e66:	0080      	lsls	r0, r0, #2
 8000e68:	f7ff f94e 	bl	8000108 <__udivsi3>
 8000e6c:	0001      	movs	r1, r0
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_InitTick+0x48>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	f7ff f949 	bl	8000108 <__udivsi3>
 8000e76:	f000 f88d 	bl	8000f94 <HAL_SYSTICK_Config>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d10d      	bne.n	8000e9a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	2c03      	cmp	r4, #3
 8000e80:	d901      	bls.n	8000e86 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e00a      	b.n	8000e9c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e86:	3001      	adds	r0, #1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	4240      	negs	r0, r0
 8000e8e:	f000 f845 	bl	8000f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_InitTick+0x4c>)
 8000e94:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
}
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_Init>:
{
 8000eac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_Init+0x24>)
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff ffcf 	bl	8000e5c <HAL_InitTick>
 8000ebe:	1e04      	subs	r4, r0, #0
 8000ec0:	d002      	beq.n	8000ec8 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000ec2:	2401      	movs	r4, #1
}
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000ec8:	f7ff fe54 	bl	8000b74 <HAL_MspInit>
 8000ecc:	e7fa      	b.n	8000ec4 <HAL_Init+0x18>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x10>)
 8000ed6:	6811      	ldr	r1, [r2, #0]
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_IncTick+0x14>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	185b      	adds	r3, r3, r1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	4770      	bx	lr
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	200001fc 	.word	0x200001fc
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000eec:	4b01      	ldr	r3, [pc, #4]	; (8000ef4 <HAL_GetTick+0x8>)
 8000eee:	6818      	ldr	r0, [r3, #0]
}
 8000ef0:	4770      	bx	lr
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	200001fc 	.word	0x200001fc

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff6 	bl	8000eec <HAL_GetTick>
 8000f00:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	1c63      	adds	r3, r4, #1
 8000f04:	d002      	beq.n	8000f0c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_Delay+0x20>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	1b40      	subs	r0, r0, r5
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	d3fa      	bcc.n	8000f0c <HAL_Delay+0x14>
  {
  }
}
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	db11      	blt.n	8000f46 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f22:	0883      	lsrs	r3, r0, #2
 8000f24:	4e13      	ldr	r6, [pc, #76]	; (8000f74 <HAL_NVIC_SetPriority+0x58>)
 8000f26:	33c0      	adds	r3, #192	; 0xc0
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	599d      	ldr	r5, [r3, r6]
 8000f2c:	2403      	movs	r4, #3
 8000f2e:	4020      	ands	r0, r4
 8000f30:	00c0      	lsls	r0, r0, #3
 8000f32:	22ff      	movs	r2, #255	; 0xff
 8000f34:	0014      	movs	r4, r2
 8000f36:	4084      	lsls	r4, r0
 8000f38:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3a:	0189      	lsls	r1, r1, #6
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	432a      	orrs	r2, r5
 8000f42:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f46:	230f      	movs	r3, #15
 8000f48:	4003      	ands	r3, r0
 8000f4a:	3b08      	subs	r3, #8
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3306      	adds	r3, #6
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_NVIC_SetPriority+0x5c>)
 8000f54:	4694      	mov	ip, r2
 8000f56:	4463      	add	r3, ip
 8000f58:	685c      	ldr	r4, [r3, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	4010      	ands	r0, r2
 8000f5e:	00c0      	lsls	r0, r0, #3
 8000f60:	32fc      	adds	r2, #252	; 0xfc
 8000f62:	0015      	movs	r5, r2
 8000f64:	4085      	lsls	r5, r0
 8000f66:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f68:	0189      	lsls	r1, r1, #6
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6e:	4322      	orrs	r2, r4
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	e7e7      	b.n	8000f44 <HAL_NVIC_SetPriority+0x28>
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	db05      	blt.n	8000f8c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f80:	231f      	movs	r3, #31
 8000f82:	4018      	ands	r0, r3
 8000f84:	3b1e      	subs	r3, #30
 8000f86:	4083      	lsls	r3, r0
 8000f88:	4a01      	ldr	r2, [pc, #4]	; (8000f90 <HAL_NVIC_EnableIRQ+0x14>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f8c:	4770      	bx	lr
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	3801      	subs	r0, #1
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	045b      	lsls	r3, r3, #17
 8000f9a:	4298      	cmp	r0, r3
 8000f9c:	d20f      	bcs.n	8000fbe <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_SYSTICK_Config+0x30>)
 8000fa0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <HAL_SYSTICK_Config+0x34>)
 8000fa4:	6a03      	ldr	r3, [r0, #32]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	21c0      	movs	r1, #192	; 0xc0
 8000fac:	0609      	lsls	r1, r1, #24
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fba:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000fc0:	e7fc      	b.n	8000fbc <HAL_SYSTICK_Config+0x28>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fd0:	d03d      	beq.n	800104e <HAL_DMA_Init+0x82>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fd2:	6805      	ldr	r5, [r0, #0]
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_DMA_Init+0x88>)
 8000fd6:	18e8      	adds	r0, r5, r3
 8000fd8:	2114      	movs	r1, #20
 8000fda:	f7ff f895 	bl	8000108 <__udivsi3>
 8000fde:	0080      	lsls	r0, r0, #2
 8000fe0:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_DMA_Init+0x8c>)
 8000fe4:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe6:	2325      	movs	r3, #37	; 0x25
 8000fe8:	2202      	movs	r2, #2
 8000fea:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fec:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_DMA_Init+0x90>)
 8000ff0:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	68e1      	ldr	r1, [r4, #12]
 8000ff6:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff8:	6921      	ldr	r1, [r4, #16]
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	6961      	ldr	r1, [r4, #20]
 8000ffe:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	69a1      	ldr	r1, [r4, #24]
 8001002:	430b      	orrs	r3, r1
 8001004:	69e1      	ldr	r1, [r4, #28]
 8001006:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001008:	6a21      	ldr	r1, [r4, #32]
 800100a:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800100c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800100e:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	68a2      	ldr	r2, [r4, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	d010      	beq.n	800103c <HAL_DMA_Init+0x70>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_DMA_Init+0x94>)
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	221c      	movs	r2, #28
 8001020:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001022:	4015      	ands	r5, r2
 8001024:	200f      	movs	r0, #15
 8001026:	40a8      	lsls	r0, r5
 8001028:	4381      	bics	r1, r0
 800102a:	6019      	str	r1, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001030:	4002      	ands	r2, r0
 8001032:	6860      	ldr	r0, [r4, #4]
 8001034:	4090      	lsls	r0, r2
 8001036:	0002      	movs	r2, r0
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001040:	2225      	movs	r2, #37	; 0x25
 8001042:	2101      	movs	r1, #1
 8001044:	54a1      	strb	r1, [r4, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001046:	3a01      	subs	r2, #1
 8001048:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 800104a:	2000      	movs	r0, #0
}
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
 8001050:	e7fc      	b.n	800104c <HAL_DMA_Init+0x80>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	bffdfff8 	.word	0xbffdfff8
 8001058:	40020000 	.word	0x40020000
 800105c:	ffff800f 	.word	0xffff800f
 8001060:	400200a8 	.word	0x400200a8

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8001066:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001068:	e057      	b.n	800111a <HAL_GPIO_Init+0xb6>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800106c:	005f      	lsls	r7, r3, #1
 800106e:	2603      	movs	r6, #3
 8001070:	40be      	lsls	r6, r7
 8001072:	43b4      	bics	r4, r6
 8001074:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	68cc      	ldr	r4, [r1, #12]
 8001078:	40bc      	lsls	r4, r7
 800107a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800107c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001082:	684a      	ldr	r2, [r1, #4]
 8001084:	0916      	lsrs	r6, r2, #4
 8001086:	2201      	movs	r2, #1
 8001088:	4032      	ands	r2, r6
 800108a:	409a      	lsls	r2, r3
 800108c:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800108e:	6042      	str	r2, [r0, #4]
 8001090:	e053      	b.n	800113a <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001092:	08dc      	lsrs	r4, r3, #3
 8001094:	3408      	adds	r4, #8
 8001096:	00a4      	lsls	r4, r4, #2
 8001098:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800109a:	3205      	adds	r2, #5
 800109c:	401a      	ands	r2, r3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	270f      	movs	r7, #15
 80010a2:	4097      	lsls	r7, r2
 80010a4:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010a6:	690f      	ldr	r7, [r1, #16]
 80010a8:	4097      	lsls	r7, r2
 80010aa:	003a      	movs	r2, r7
 80010ac:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	5022      	str	r2, [r4, r0]
 80010b0:	e057      	b.n	8001162 <HAL_GPIO_Init+0xfe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010b2:	2602      	movs	r6, #2
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x54>
 80010b6:	2600      	movs	r6, #0
 80010b8:	40a6      	lsls	r6, r4
 80010ba:	0034      	movs	r4, r6
 80010bc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010be:	3202      	adds	r2, #2
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4e40      	ldr	r6, [pc, #256]	; (80011c4 <HAL_GPIO_Init+0x160>)
 80010c4:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_GPIO_Init+0x164>)
 80010c8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	43ea      	mvns	r2, r5
 80010cc:	0026      	movs	r6, r4
 80010ce:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d0:	684f      	ldr	r7, [r1, #4]
 80010d2:	03ff      	lsls	r7, r7, #15
 80010d4:	d501      	bpl.n	80010da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80010d6:	432c      	orrs	r4, r5
 80010d8:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 80010da:	4c3b      	ldr	r4, [pc, #236]	; (80011c8 <HAL_GPIO_Init+0x164>)
 80010dc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80010de:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	0026      	movs	r6, r4
 80010e2:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e4:	684f      	ldr	r7, [r1, #4]
 80010e6:	03bf      	lsls	r7, r7, #14
 80010e8:	d501      	bpl.n	80010ee <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80010ea:	432c      	orrs	r4, r5
 80010ec:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 80010ee:	4c36      	ldr	r4, [pc, #216]	; (80011c8 <HAL_GPIO_Init+0x164>)
 80010f0:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	0026      	movs	r6, r4
 80010f6:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f8:	684f      	ldr	r7, [r1, #4]
 80010fa:	02ff      	lsls	r7, r7, #11
 80010fc:	d501      	bpl.n	8001102 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80010fe:	432c      	orrs	r4, r5
 8001100:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8001102:	4c31      	ldr	r4, [pc, #196]	; (80011c8 <HAL_GPIO_Init+0x164>)
 8001104:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001106:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001108:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110a:	684e      	ldr	r6, [r1, #4]
 800110c:	02b6      	lsls	r6, r6, #10
 800110e:	d501      	bpl.n	8001114 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8001110:	002a      	movs	r2, r5
 8001112:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8001114:	4c2c      	ldr	r4, [pc, #176]	; (80011c8 <HAL_GPIO_Init+0x164>)
 8001116:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 8001118:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800111a:	680c      	ldr	r4, [r1, #0]
 800111c:	0022      	movs	r2, r4
 800111e:	40da      	lsrs	r2, r3
 8001120:	d04e      	beq.n	80011c0 <HAL_GPIO_Init+0x15c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001122:	2201      	movs	r2, #1
 8001124:	409a      	lsls	r2, r3
 8001126:	0025      	movs	r5, r4
 8001128:	4015      	ands	r5, r2
    if (iocurrent)
 800112a:	4214      	tst	r4, r2
 800112c:	d0f4      	beq.n	8001118 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800112e:	2403      	movs	r4, #3
 8001130:	684e      	ldr	r6, [r1, #4]
 8001132:	4034      	ands	r4, r6
 8001134:	3c01      	subs	r4, #1
 8001136:	2c01      	cmp	r4, #1
 8001138:	d997      	bls.n	800106a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	2203      	movs	r2, #3
 800113c:	684c      	ldr	r4, [r1, #4]
 800113e:	4022      	ands	r2, r4
 8001140:	2a03      	cmp	r2, #3
 8001142:	d009      	beq.n	8001158 <HAL_GPIO_Init+0xf4>
        temp = GPIOx->PUPDR;
 8001144:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001146:	005e      	lsls	r6, r3, #1
 8001148:	2403      	movs	r4, #3
 800114a:	40b4      	lsls	r4, r6
 800114c:	43a2      	bics	r2, r4
 800114e:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	688a      	ldr	r2, [r1, #8]
 8001152:	40b2      	lsls	r2, r6
 8001154:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001156:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	2203      	movs	r2, #3
 800115a:	684c      	ldr	r4, [r1, #4]
 800115c:	4022      	ands	r2, r4
 800115e:	2a02      	cmp	r2, #2
 8001160:	d097      	beq.n	8001092 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8001162:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001164:	005e      	lsls	r6, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	0017      	movs	r7, r2
 800116a:	40b7      	lsls	r7, r6
 800116c:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116e:	684f      	ldr	r7, [r1, #4]
 8001170:	403a      	ands	r2, r7
 8001172:	40b2      	lsls	r2, r6
 8001174:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001176:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001178:	22c0      	movs	r2, #192	; 0xc0
 800117a:	0292      	lsls	r2, r2, #10
 800117c:	684c      	ldr	r4, [r1, #4]
 800117e:	4214      	tst	r4, r2
 8001180:	d0ca      	beq.n	8001118 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4c12      	ldr	r4, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x168>)
 8001184:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001186:	2601      	movs	r6, #1
 8001188:	4332      	orrs	r2, r6
 800118a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800118c:	089a      	lsrs	r2, r3, #2
 800118e:	1c94      	adds	r4, r2, #2
 8001190:	00a4      	lsls	r4, r4, #2
 8001192:	4e0c      	ldr	r6, [pc, #48]	; (80011c4 <HAL_GPIO_Init+0x160>)
 8001194:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001196:	2403      	movs	r4, #3
 8001198:	401c      	ands	r4, r3
 800119a:	00a4      	lsls	r4, r4, #2
 800119c:	260f      	movs	r6, #15
 800119e:	40a6      	lsls	r6, r4
 80011a0:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011a2:	26a0      	movs	r6, #160	; 0xa0
 80011a4:	05f6      	lsls	r6, r6, #23
 80011a6:	42b0      	cmp	r0, r6
 80011a8:	d085      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
 80011aa:	4e09      	ldr	r6, [pc, #36]	; (80011d0 <HAL_GPIO_Init+0x16c>)
 80011ac:	42b0      	cmp	r0, r6
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x158>
 80011b0:	4e08      	ldr	r6, [pc, #32]	; (80011d4 <HAL_GPIO_Init+0x170>)
 80011b2:	42b0      	cmp	r0, r6
 80011b4:	d100      	bne.n	80011b8 <HAL_GPIO_Init+0x154>
 80011b6:	e77c      	b.n	80010b2 <HAL_GPIO_Init+0x4e>
 80011b8:	2606      	movs	r6, #6
 80011ba:	e77d      	b.n	80010b8 <HAL_GPIO_Init+0x54>
 80011bc:	2601      	movs	r6, #1
 80011be:	e77b      	b.n	80010b8 <HAL_GPIO_Init+0x54>
  }
}
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40010400 	.word	0x40010400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	50000400 	.word	0x50000400
 80011d4:	50000800 	.word	0x50000800

080011d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d001      	beq.n	80011e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011dc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011de:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80011e0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80011e2:	e7fc      	b.n	80011de <HAL_GPIO_WritePin+0x6>

080011e4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	1e04      	subs	r4, r0, #0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80011e8:	d047      	beq.n	800127a <HAL_LPTIM_Init+0x96>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80011ea:	232e      	movs	r3, #46	; 0x2e
 80011ec:	5cc3      	ldrb	r3, [r0, r3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03d      	beq.n	800126e <HAL_LPTIM_Init+0x8a>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80011f2:	232e      	movs	r3, #46	; 0x2e
 80011f4:	2202      	movs	r2, #2
 80011f6:	54e2      	strb	r2, [r4, r3]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80011f8:	6825      	ldr	r5, [r4, #0]
 80011fa:	68eb      	ldr	r3, [r5, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80011fc:	6860      	ldr	r0, [r4, #4]
 80011fe:	2801      	cmp	r0, #1
 8001200:	d004      	beq.n	800120c <HAL_LPTIM_Init+0x28>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	0412      	lsls	r2, r2, #16
 8001206:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001208:	4291      	cmp	r1, r2
 800120a:	d101      	bne.n	8001210 <HAL_LPTIM_Init+0x2c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800120c:	221e      	movs	r2, #30
 800120e:	4393      	bics	r3, r2
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001210:	6961      	ldr	r1, [r4, #20]
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_LPTIM_Init+0x9c>)
 8001214:	4291      	cmp	r1, r2
 8001216:	d001      	beq.n	800121c <HAL_LPTIM_Init+0x38>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_LPTIM_Init+0xa0>)
 800121a:	4013      	ands	r3, r2
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_LPTIM_Init+0xa4>)
 800121e:	401a      	ands	r2, r3
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001220:	68a3      	ldr	r3, [r4, #8]
 8001222:	4303      	orrs	r3, r0
              hlptim->Init.Clock.Prescaler |
 8001224:	6a26      	ldr	r6, [r4, #32]
 8001226:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8001228:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800122a:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
              hlptim->Init.CounterSource);
 800122c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800122e:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001230:	4313      	orrs	r3, r2

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001232:	2800      	cmp	r0, #0
 8001234:	d103      	bne.n	800123e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001236:	69e2      	ldr	r2, [r4, #28]
 8001238:	6927      	ldr	r7, [r4, #16]
 800123a:	433a      	orrs	r2, r7
 800123c:	4313      	orrs	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800123e:	2801      	cmp	r0, #1
 8001240:	d003      	beq.n	800124a <HAL_LPTIM_Init+0x66>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0412      	lsls	r2, r2, #16
 8001246:	4296      	cmp	r6, r2
 8001248:	d103      	bne.n	8001252 <HAL_LPTIM_Init+0x6e>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800124a:	68e2      	ldr	r2, [r4, #12]
 800124c:	6920      	ldr	r0, [r4, #16]
 800124e:	4302      	orrs	r2, r0
 8001250:	4313      	orrs	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_LPTIM_Init+0x9c>)
 8001254:	4291      	cmp	r1, r2
 8001256:	d004      	beq.n	8001262 <HAL_LPTIM_Init+0x7e>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001258:	69a2      	ldr	r2, [r4, #24]
 800125a:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 800125c:	69e2      	ldr	r2, [r4, #28]
 800125e:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001260:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001262:	60eb      	str	r3, [r5, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001264:	232e      	movs	r3, #46	; 0x2e
 8001266:	2201      	movs	r2, #1
 8001268:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
}
 800126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800126e:	332d      	adds	r3, #45	; 0x2d
 8001270:	2200      	movs	r2, #0
 8001272:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 8001274:	f7ff fbd0 	bl	8000a18 <HAL_LPTIM_MspInit>
 8001278:	e7bb      	b.n	80011f2 <HAL_LPTIM_Init+0xe>
    return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
 800127c:	e7f6      	b.n	800126c <HAL_LPTIM_Init+0x88>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	0000ffff 	.word	0x0000ffff
 8001284:	ffff1f3f 	.word	0xffff1f3f
 8001288:	ff19f1fe 	.word	0xff19f1fe

0800128c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001290:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001292:	230c      	movs	r3, #12
 8001294:	4013      	ands	r3, r2
 8001296:	2b08      	cmp	r3, #8
 8001298:	d042      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x94>
 800129a:	2b0c      	cmp	r3, #12
 800129c:	d011      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x36>
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	0b52      	lsrs	r2, r2, #13
 80012a8:	2307      	movs	r3, #7
 80012aa:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80012ac:	3301      	adds	r3, #1
 80012ae:	2080      	movs	r0, #128	; 0x80
 80012b0:	0200      	lsls	r0, r0, #8
 80012b2:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80012b4:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	06db      	lsls	r3, r3, #27
 80012bc:	d532      	bpl.n	8001324 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 80012be:	481b      	ldr	r0, [pc, #108]	; (800132c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c0:	e7f8      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80012c2:	0c91      	lsrs	r1, r2, #18
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	4919      	ldr	r1, [pc, #100]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012ca:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80012cc:	0d92      	lsrs	r2, r2, #22
 80012ce:	2303      	movs	r3, #3
 80012d0:	401a      	ands	r2, r3
 80012d2:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	03db      	lsls	r3, r3, #15
 80012da:	d509      	bpl.n	80012f0 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80012dc:	4a15      	ldr	r2, [pc, #84]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa8>)
 80012de:	2300      	movs	r3, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	f7ff f8a7 	bl	8000434 <__aeabi_lmul>
 80012e6:	0022      	movs	r2, r4
 80012e8:	2300      	movs	r3, #0
 80012ea:	f7ff f883 	bl	80003f4 <__aeabi_uldivmod>
 80012ee:	e7e1      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	06db      	lsls	r3, r3, #27
 80012f6:	d509      	bpl.n	800130c <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012fa:	2300      	movs	r3, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	f7ff f899 	bl	8000434 <__aeabi_lmul>
 8001302:	0022      	movs	r2, r4
 8001304:	2300      	movs	r3, #0
 8001306:	f7ff f875 	bl	80003f4 <__aeabi_uldivmod>
 800130a:	e7d3      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_RCC_GetSysClockFreq+0xac>)
 800130e:	2300      	movs	r3, #0
 8001310:	2100      	movs	r1, #0
 8001312:	f7ff f88f 	bl	8000434 <__aeabi_lmul>
 8001316:	0022      	movs	r2, r4
 8001318:	2300      	movs	r3, #0
 800131a:	f7ff f86b 	bl	80003f4 <__aeabi_uldivmod>
 800131e:	e7c9      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001322:	e7c7      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8001326:	e7c5      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x28>
 8001328:	40021000 	.word	0x40021000
 800132c:	003d0900 	.word	0x003d0900
 8001330:	08002764 	.word	0x08002764
 8001334:	007a1200 	.word	0x007a1200
 8001338:	00f42400 	.word	0x00f42400

0800133c <HAL_RCC_OscConfig>:
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0xa>
 8001344:	e265      	b.n	8001812 <HAL_RCC_OscConfig+0x4d6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001346:	4bc5      	ldr	r3, [pc, #788]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	250c      	movs	r5, #12
 800134c:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134e:	68de      	ldr	r6, [r3, #12]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	6803      	ldr	r3, [r0, #0]
 8001358:	07db      	lsls	r3, r3, #31
 800135a:	d536      	bpl.n	80013ca <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800135c:	2d08      	cmp	r5, #8
 800135e:	d02c      	beq.n	80013ba <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001360:	2d0c      	cmp	r5, #12
 8001362:	d028      	beq.n	80013b6 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	0252      	lsls	r2, r2, #9
 800136a:	4293      	cmp	r3, r2
 800136c:	d055      	beq.n	800141a <HAL_RCC_OscConfig+0xde>
 800136e:	22a0      	movs	r2, #160	; 0xa0
 8001370:	02d2      	lsls	r2, r2, #11
 8001372:	4293      	cmp	r3, r2
 8001374:	d058      	beq.n	8001428 <HAL_RCC_OscConfig+0xec>
 8001376:	4bb9      	ldr	r3, [pc, #740]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	49b9      	ldr	r1, [pc, #740]	; (8001660 <HAL_RCC_OscConfig+0x324>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0249      	lsls	r1, r1, #9
 8001386:	400a      	ands	r2, r1
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	9a01      	ldr	r2, [sp, #4]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	49b5      	ldr	r1, [pc, #724]	; (8001664 <HAL_RCC_OscConfig+0x328>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	6863      	ldr	r3, [r4, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d052      	beq.n	8001440 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800139a:	f7ff fda7 	bl	8000eec <HAL_GetTick>
 800139e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a0:	4bae      	ldr	r3, [pc, #696]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	039b      	lsls	r3, r3, #14
 80013a6:	d410      	bmi.n	80013ca <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fda0 	bl	8000eec <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	2864      	cmp	r0, #100	; 0x64
 80013b0:	d9f6      	bls.n	80013a0 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 80013b2:	2003      	movs	r0, #3
 80013b4:	e22e      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	d0d4      	beq.n	8001364 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4ba8      	ldr	r3, [pc, #672]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	039b      	lsls	r3, r3, #14
 80013c0:	d503      	bpl.n	80013ca <HAL_RCC_OscConfig+0x8e>
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x8e>
 80013c8:	e226      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	079b      	lsls	r3, r3, #30
 80013ce:	d56d      	bpl.n	80014ac <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 80013d0:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013d2:	069a      	lsls	r2, r3, #26
 80013d4:	d505      	bpl.n	80013e2 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013d6:	48a1      	ldr	r0, [pc, #644]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	2120      	movs	r1, #32
 80013dc:	430a      	orrs	r2, r1
 80013de:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013e0:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e2:	2d04      	cmp	r5, #4
 80013e4:	d03c      	beq.n	8001460 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e6:	2d0c      	cmp	r5, #12
 80013e8:	d038      	beq.n	800145c <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0xb4>
 80013ee:	e0b0      	b.n	8001552 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013f0:	499a      	ldr	r1, [pc, #616]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80013f2:	680a      	ldr	r2, [r1, #0]
 80013f4:	2009      	movs	r0, #9
 80013f6:	4382      	bics	r2, r0
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80013fc:	f7ff fd76 	bl	8000eec <HAL_GetTick>
 8001400:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001402:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	075b      	lsls	r3, r3, #29
 8001408:	d500      	bpl.n	800140c <HAL_RCC_OscConfig+0xd0>
 800140a:	e099      	b.n	8001540 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fd6e 	bl	8000eec <HAL_GetTick>
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	2802      	cmp	r0, #2
 8001414:	d9f5      	bls.n	8001402 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e1fc      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	4a90      	ldr	r2, [pc, #576]	; (800165c <HAL_RCC_OscConfig+0x320>)
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	430b      	orrs	r3, r1
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e7b5      	b.n	8001394 <HAL_RCC_OscConfig+0x58>
 8001428:	4b8c      	ldr	r3, [pc, #560]	; (800165c <HAL_RCC_OscConfig+0x320>)
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	02d2      	lsls	r2, r2, #11
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0252      	lsls	r2, r2, #9
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e7a9      	b.n	8001394 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001440:	f7ff fd54 	bl	8000eec <HAL_GetTick>
 8001444:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	039b      	lsls	r3, r3, #14
 800144c:	d5bd      	bpl.n	80013ca <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144e:	f7ff fd4d 	bl	8000eec <HAL_GetTick>
 8001452:	1bc0      	subs	r0, r0, r7
 8001454:	2864      	cmp	r0, #100	; 0x64
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001458:	2003      	movs	r0, #3
 800145a:	e1db      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145c:	2e00      	cmp	r6, #0
 800145e:	d1c4      	bne.n	80013ea <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001460:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	0752      	lsls	r2, r2, #29
 8001466:	d502      	bpl.n	800146e <HAL_RCC_OscConfig+0x132>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x132>
 800146c:	e1d6      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4e7b      	ldr	r6, [pc, #492]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001470:	6872      	ldr	r2, [r6, #4]
 8001472:	497d      	ldr	r1, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001474:	400a      	ands	r2, r1
 8001476:	6921      	ldr	r1, [r4, #16]
 8001478:	0209      	lsls	r1, r1, #8
 800147a:	430a      	orrs	r2, r1
 800147c:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800147e:	6832      	ldr	r2, [r6, #0]
 8001480:	2109      	movs	r1, #9
 8001482:	438a      	bics	r2, r1
 8001484:	4313      	orrs	r3, r2
 8001486:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001488:	f7ff ff00 	bl	800128c <HAL_RCC_GetSysClockFreq>
 800148c:	68f2      	ldr	r2, [r6, #12]
 800148e:	0912      	lsrs	r2, r2, #4
 8001490:	230f      	movs	r3, #15
 8001492:	4013      	ands	r3, r2
 8001494:	4a75      	ldr	r2, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x330>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	40d8      	lsrs	r0, r3
 800149a:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x334>)
 800149c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800149e:	4b75      	ldr	r3, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f7ff fcdb 	bl	8000e5c <HAL_InitTick>
      if(status != HAL_OK)
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d000      	beq.n	80014ac <HAL_RCC_OscConfig+0x170>
 80014aa:	e1b3      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	06db      	lsls	r3, r3, #27
 80014b0:	d52d      	bpl.n	800150e <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d160      	bne.n	8001578 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b6:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	059b      	lsls	r3, r3, #22
 80014bc:	d503      	bpl.n	80014c6 <HAL_RCC_OscConfig+0x18a>
 80014be:	69a3      	ldr	r3, [r4, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x18a>
 80014c4:	e1ac      	b.n	8001820 <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c6:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80014c8:	6853      	ldr	r3, [r2, #4]
 80014ca:	496b      	ldr	r1, [pc, #428]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 80014cc:	400b      	ands	r3, r1
 80014ce:	6a21      	ldr	r1, [r4, #32]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	6853      	ldr	r3, [r2, #4]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	69e1      	ldr	r1, [r4, #28]
 80014dc:	0609      	lsls	r1, r1, #24
 80014de:	430b      	orrs	r3, r1
 80014e0:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e2:	6a23      	ldr	r3, [r4, #32]
 80014e4:	0b59      	lsrs	r1, r3, #13
 80014e6:	3101      	adds	r1, #1
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ee:	68d1      	ldr	r1, [r2, #12]
 80014f0:	0909      	lsrs	r1, r1, #4
 80014f2:	220f      	movs	r2, #15
 80014f4:	400a      	ands	r2, r1
 80014f6:	495d      	ldr	r1, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x330>)
 80014f8:	5c8a      	ldrb	r2, [r1, r2]
 80014fa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014fc:	4a5c      	ldr	r2, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x334>)
 80014fe:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001500:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x338>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f7ff fcaa 	bl	8000e5c <HAL_InitTick>
        if(status != HAL_OK)
 8001508:	2800      	cmp	r0, #0
 800150a:	d000      	beq.n	800150e <HAL_RCC_OscConfig+0x1d2>
 800150c:	e182      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	071b      	lsls	r3, r3, #28
 8001512:	d57d      	bpl.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001514:	6963      	ldr	r3, [r4, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d067      	beq.n	80015ea <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 800151a:	4a50      	ldr	r2, [pc, #320]	; (800165c <HAL_RCC_OscConfig+0x320>)
 800151c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800151e:	2101      	movs	r1, #1
 8001520:	430b      	orrs	r3, r1
 8001522:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001524:	f7ff fce2 	bl	8000eec <HAL_GetTick>
 8001528:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x320>)
 800152c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152e:	079b      	lsls	r3, r3, #30
 8001530:	d46e      	bmi.n	8001610 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fcdb 	bl	8000eec <HAL_GetTick>
 8001536:	1b80      	subs	r0, r0, r6
 8001538:	2802      	cmp	r0, #2
 800153a:	d9f6      	bls.n	800152a <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 800153c:	2003      	movs	r0, #3
 800153e:	e169      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4946      	ldr	r1, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001542:	684b      	ldr	r3, [r1, #4]
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x32c>)
 8001546:	4013      	ands	r3, r2
 8001548:	6922      	ldr	r2, [r4, #16]
 800154a:	0212      	lsls	r2, r2, #8
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e7ac      	b.n	80014ac <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	438b      	bics	r3, r1
 800155a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800155c:	f7ff fcc6 	bl	8000eec <HAL_GetTick>
 8001560:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001562:	4b3e      	ldr	r3, [pc, #248]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	075b      	lsls	r3, r3, #29
 8001568:	d5a0      	bpl.n	80014ac <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fcbf 	bl	8000eec <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2802      	cmp	r0, #2
 8001572:	d9f6      	bls.n	8001562 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8001574:	2003      	movs	r0, #3
 8001576:	e14d      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001578:	69a3      	ldr	r3, [r4, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d022      	beq.n	80015c4 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 800157e:	4a37      	ldr	r2, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	430b      	orrs	r3, r1
 8001588:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800158a:	f7ff fcaf 	bl	8000eec <HAL_GetTick>
 800158e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	059b      	lsls	r3, r3, #22
 8001596:	d406      	bmi.n	80015a6 <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001598:	f7ff fca8 	bl	8000eec <HAL_GetTick>
 800159c:	1b80      	subs	r0, r0, r6
 800159e:	2802      	cmp	r0, #2
 80015a0:	d9f6      	bls.n	8001590 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
 80015a4:	e136      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80015a8:	6853      	ldr	r3, [r2, #4]
 80015aa:	4933      	ldr	r1, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 80015ac:	400b      	ands	r3, r1
 80015ae:	6a21      	ldr	r1, [r4, #32]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b4:	6853      	ldr	r3, [r2, #4]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	69e1      	ldr	r1, [r4, #28]
 80015bc:	0609      	lsls	r1, r1, #24
 80015be:	430b      	orrs	r3, r1
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	e7a4      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 80015c4:	4a25      	ldr	r2, [pc, #148]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	492c      	ldr	r1, [pc, #176]	; (800167c <HAL_RCC_OscConfig+0x340>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc8d 	bl	8000eec <HAL_GetTick>
 80015d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	059b      	lsls	r3, r3, #22
 80015da:	d598      	bpl.n	800150e <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc86 	bl	8000eec <HAL_GetTick>
 80015e0:	1b80      	subs	r0, r0, r6
 80015e2:	2802      	cmp	r0, #2
 80015e4:	d9f6      	bls.n	80015d4 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 80015e6:	2003      	movs	r0, #3
 80015e8:	e114      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_LSI_DISABLE();
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80015ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80015ee:	2101      	movs	r1, #1
 80015f0:	438b      	bics	r3, r1
 80015f2:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80015f4:	f7ff fc7a 	bl	8000eec <HAL_GetTick>
 80015f8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_OscConfig+0x320>)
 80015fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fe:	079b      	lsls	r3, r3, #30
 8001600:	d506      	bpl.n	8001610 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001602:	f7ff fc73 	bl	8000eec <HAL_GetTick>
 8001606:	1b80      	subs	r0, r0, r6
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f6      	bls.n	80015fa <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800160c:	2003      	movs	r0, #3
 800160e:	e101      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	075b      	lsls	r3, r3, #29
 8001614:	d400      	bmi.n	8001618 <HAL_RCC_OscConfig+0x2dc>
 8001616:	e08e      	b.n	8001736 <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_RCC_OscConfig+0x320>)
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	d41b      	bmi.n	8001658 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001622:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	430b      	orrs	r3, r1
 800162a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 800162c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCC_OscConfig+0x344>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	d528      	bpl.n	8001688 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	68a3      	ldr	r3, [r4, #8]
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0052      	lsls	r2, r2, #1
 800163c:	4293      	cmp	r3, r2
 800163e:	d037      	beq.n	80016b0 <HAL_RCC_OscConfig+0x374>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d14d      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3a4>
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_OscConfig+0x320>)
 8001646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <HAL_RCC_OscConfig+0x340>)
 800164a:	400a      	ands	r2, r1
 800164c:	651a      	str	r2, [r3, #80]	; 0x50
 800164e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x348>)
 8001652:	400a      	ands	r2, r1
 8001654:	651a      	str	r2, [r3, #80]	; 0x50
 8001656:	e031      	b.n	80016bc <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2600      	movs	r6, #0
 800165a:	e7e8      	b.n	800162e <HAL_RCC_OscConfig+0x2f2>
 800165c:	40021000 	.word	0x40021000
 8001660:	fffeffff 	.word	0xfffeffff
 8001664:	fffbffff 	.word	0xfffbffff
 8001668:	ffffe0ff 	.word	0xffffe0ff
 800166c:	0800274c 	.word	0x0800274c
 8001670:	20000000 	.word	0x20000000
 8001674:	20000008 	.word	0x20000008
 8001678:	ffff1fff 	.word	0xffff1fff
 800167c:	fffffeff 	.word	0xfffffeff
 8001680:	40007000 	.word	0x40007000
 8001684:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001688:	4a6b      	ldr	r2, [pc, #428]	; (8001838 <HAL_RCC_OscConfig+0x4fc>)
 800168a:	6811      	ldr	r1, [r2, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	430b      	orrs	r3, r1
 8001692:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001694:	f7ff fc2a 	bl	8000eec <HAL_GetTick>
 8001698:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b67      	ldr	r3, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x4fc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	d4c9      	bmi.n	8001636 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fc23 	bl	8000eec <HAL_GetTick>
 80016a6:	1bc0      	subs	r0, r0, r7
 80016a8:	2864      	cmp	r0, #100	; 0x64
 80016aa:	d9f6      	bls.n	800169a <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
 80016ae:	e0b1      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	4a62      	ldr	r2, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80016b2:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	68a3      	ldr	r3, [r4, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 80016c2:	f7ff fc13 	bl	8000eec <HAL_GetTick>
 80016c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c8:	4b5c      	ldr	r3, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80016ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016cc:	059b      	lsls	r3, r3, #22
 80016ce:	d430      	bmi.n	8001732 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fc0c 	bl	8000eec <HAL_GetTick>
 80016d4:	1bc0      	subs	r0, r0, r7
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x504>)
 80016d8:	4298      	cmp	r0, r3
 80016da:	d9f5      	bls.n	80016c8 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80016dc:	2003      	movs	r0, #3
 80016de:	e099      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	22a0      	movs	r2, #160	; 0xa0
 80016e2:	00d2      	lsls	r2, r2, #3
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d009      	beq.n	80016fc <HAL_RCC_OscConfig+0x3c0>
 80016e8:	4b54      	ldr	r3, [pc, #336]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80016ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ec:	4955      	ldr	r1, [pc, #340]	; (8001844 <HAL_RCC_OscConfig+0x508>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
 80016f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f4:	4954      	ldr	r1, [pc, #336]	; (8001848 <HAL_RCC_OscConfig+0x50c>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	651a      	str	r2, [r3, #80]	; 0x50
 80016fa:	e7df      	b.n	80016bc <HAL_RCC_OscConfig+0x380>
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80016fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001700:	3a01      	subs	r2, #1
 8001702:	3aff      	subs	r2, #255	; 0xff
 8001704:	430a      	orrs	r2, r1
 8001706:	651a      	str	r2, [r3, #80]	; 0x50
 8001708:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	0052      	lsls	r2, r2, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	651a      	str	r2, [r3, #80]	; 0x50
 8001712:	e7d3      	b.n	80016bc <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8001714:	f7ff fbea 	bl	8000eec <HAL_GetTick>
 8001718:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_RCC_OscConfig+0x500>)
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	059b      	lsls	r3, r3, #22
 8001720:	d507      	bpl.n	8001732 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fbe3 	bl	8000eec <HAL_GetTick>
 8001726:	1bc0      	subs	r0, r0, r7
 8001728:	4b45      	ldr	r3, [pc, #276]	; (8001840 <HAL_RCC_OscConfig+0x504>)
 800172a:	4298      	cmp	r0, r3
 800172c:	d9f5      	bls.n	800171a <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	e070      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    if(pwrclkchanged == SET)
 8001732:	2e01      	cmp	r6, #1
 8001734:	d01a      	beq.n	800176c <HAL_RCC_OscConfig+0x430>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <HAL_RCC_OscConfig+0x402>
 800173c:	e072      	b.n	8001824 <HAL_RCC_OscConfig+0x4e8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173e:	2d0c      	cmp	r5, #12
 8001740:	d04f      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	2b02      	cmp	r3, #2
 8001744:	d018      	beq.n	8001778 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
 8001746:	4a3d      	ldr	r2, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x500>)
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	4940      	ldr	r1, [pc, #256]	; (800184c <HAL_RCC_OscConfig+0x510>)
 800174c:	400b      	ands	r3, r1
 800174e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001750:	f7ff fbcc 	bl	8000eec <HAL_GetTick>
 8001754:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x500>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	019b      	lsls	r3, r3, #6
 800175c:	d53f      	bpl.n	80017de <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fbc5 	bl	8000eec <HAL_GetTick>
 8001762:	1b00      	subs	r0, r0, r4
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f6      	bls.n	8001756 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8001768:	2003      	movs	r0, #3
 800176a:	e053      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x500>)
 800176e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001770:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x514>)
 8001772:	400b      	ands	r3, r1
 8001774:	6393      	str	r3, [r2, #56]	; 0x38
 8001776:	e7de      	b.n	8001736 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_DISABLE();
 8001778:	4a30      	ldr	r2, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x500>)
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	4933      	ldr	r1, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x510>)
 800177e:	400b      	ands	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001782:	f7ff fbb3 	bl	8000eec <HAL_GetTick>
 8001786:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_RCC_OscConfig+0x500>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	d506      	bpl.n	800179e <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fbac 	bl	8000eec <HAL_GetTick>
 8001794:	1b40      	subs	r0, r0, r5
 8001796:	2802      	cmp	r0, #2
 8001798:	d9f6      	bls.n	8001788 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e03a      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179e:	4927      	ldr	r1, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80017a0:	68cb      	ldr	r3, [r1, #12]
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_RCC_OscConfig+0x518>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80017aa:	4302      	orrs	r2, r0
 80017ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80017ae:	4302      	orrs	r2, r0
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 80017b4:	680a      	ldr	r2, [r1, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	045b      	lsls	r3, r3, #17
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80017be:	f7ff fb95 	bl	8000eec <HAL_GetTick>
 80017c2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	d406      	bmi.n	80017da <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fb8e 	bl	8000eec <HAL_GetTick>
 80017d0:	1b00      	subs	r0, r0, r4
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f6      	bls.n	80017c4 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e01a      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 80017de:	2000      	movs	r0, #0
 80017e0:	e018      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d020      	beq.n	8001828 <HAL_RCC_OscConfig+0x4ec>
        pll_config = RCC->CFGR;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x500>)
 80017e8:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	4013      	ands	r3, r2
 80017f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80017f2:	428b      	cmp	r3, r1
 80017f4:	d11a      	bne.n	800182c <HAL_RCC_OscConfig+0x4f0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017f6:	23f0      	movs	r3, #240	; 0xf0
 80017f8:	039b      	lsls	r3, r3, #14
 80017fa:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017fe:	428b      	cmp	r3, r1
 8001800:	d116      	bne.n	8001830 <HAL_RCC_OscConfig+0x4f4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	401a      	ands	r2, r3
 8001808:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x4f8>
  return HAL_OK;
 800180e:	2000      	movs	r0, #0
 8001810:	e000      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
}
 8001814:	b003      	add	sp, #12
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7fb      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
 800181e:	e7f9      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e7f7      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8001824:	2000      	movs	r0, #0
 8001826:	e7f5      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
 800182a:	e7f3      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
          return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
 800182e:	e7f1      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 8001830:	2001      	movs	r0, #1
 8001832:	e7ef      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 8001834:	2001      	movs	r0, #1
 8001836:	e7ed      	b.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 8001838:	40007000 	.word	0x40007000
 800183c:	40021000 	.word	0x40021000
 8001840:	00001388 	.word	0x00001388
 8001844:	fffffeff 	.word	0xfffffeff
 8001848:	fffffbff 	.word	0xfffffbff
 800184c:	feffffff 	.word	0xfeffffff
 8001850:	efffffff 	.word	0xefffffff
 8001854:	ff02ffff 	.word	0xff02ffff

08001858 <HAL_RCC_ClockConfig>:
{
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	0005      	movs	r5, r0
 800185c:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 800185e:	2800      	cmp	r0, #0
 8001860:	d100      	bne.n	8001864 <HAL_RCC_ClockConfig+0xc>
 8001862:	e0d1      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	4013      	ands	r3, r2
 800186c:	428b      	cmp	r3, r1
 800186e:	d319      	bcc.n	80018a4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	079b      	lsls	r3, r3, #30
 8001874:	d506      	bpl.n	8001884 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001876:	4a67      	ldr	r2, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	68d3      	ldr	r3, [r2, #12]
 800187a:	21f0      	movs	r1, #240	; 0xf0
 800187c:	438b      	bics	r3, r1
 800187e:	68a9      	ldr	r1, [r5, #8]
 8001880:	430b      	orrs	r3, r1
 8001882:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d57b      	bpl.n	8001982 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	686b      	ldr	r3, [r5, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001890:	2b03      	cmp	r3, #3
 8001892:	d040      	beq.n	8001916 <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001894:	2b01      	cmp	r3, #1
 8001896:	d044      	beq.n	8001922 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001898:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	0592      	lsls	r2, r2, #22
 800189e:	d41d      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
 80018a2:	e099      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a4:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	438b      	bics	r3, r1
 80018ac:	4323      	orrs	r3, r4
 80018ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018b0:	f7ff fb1c 	bl	8000eec <HAL_GetTick>
 80018b4:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	42a3      	cmp	r3, r4
 80018c0:	d0d6      	beq.n	8001870 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c2:	f7ff fb13 	bl	8000eec <HAL_GetTick>
 80018c6:	1b80      	subs	r0, r0, r6
 80018c8:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	4290      	cmp	r0, r2
 80018cc:	d9f3      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e082      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d2:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	0392      	lsls	r2, r2, #14
 80018d8:	d400      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x84>
 80018da:	e097      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	68ca      	ldr	r2, [r1, #12]
 80018e0:	2003      	movs	r0, #3
 80018e2:	4382      	bics	r2, r0
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80018e8:	f7ff fb00 	bl	8000eec <HAL_GetTick>
 80018ec:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	686b      	ldr	r3, [r5, #4]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d01c      	beq.n	800192e <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d028      	beq.n	800194a <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d034      	beq.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018fc:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	220c      	movs	r2, #12
 8001902:	421a      	tst	r2, r3
 8001904:	d03d      	beq.n	8001982 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7ff faf1 	bl	8000eec <HAL_GetTick>
 800190a:	1b80      	subs	r0, r0, r6
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	4298      	cmp	r0, r3
 8001910:	d9f4      	bls.n	80018fc <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8001912:	2003      	movs	r0, #3
 8001914:	e060      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	0192      	lsls	r2, r2, #6
 800191c:	d4de      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e05a      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	0752      	lsls	r2, r2, #29
 8001928:	d4d8      	bmi.n	80018dc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
 800192c:	e054      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	230c      	movs	r3, #12
 8001934:	4013      	ands	r3, r2
 8001936:	2b08      	cmp	r3, #8
 8001938:	d023      	beq.n	8001982 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7ff fad7 	bl	8000eec <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	4290      	cmp	r0, r2
 8001944:	d9f3      	bls.n	800192e <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
 8001948:	e046      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	230c      	movs	r3, #12
 8001950:	4013      	ands	r3, r2
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d015      	beq.n	8001982 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7ff fac9 	bl	8000eec <HAL_GetTick>
 800195a:	1b80      	subs	r0, r0, r6
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800195e:	4298      	cmp	r0, r3
 8001960:	d9f3      	bls.n	800194a <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
 8001964:	e038      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	230c      	movs	r3, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b04      	cmp	r3, #4
 8001970:	d007      	beq.n	8001982 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001972:	f7ff fabb 	bl	8000eec <HAL_GetTick>
 8001976:	1b80      	subs	r0, r0, r6
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	4298      	cmp	r0, r3
 800197c:	d9f3      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e02a      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	4013      	ands	r3, r2
 800198a:	42a3      	cmp	r3, r4
 800198c:	d825      	bhi.n	80019da <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198e:	682b      	ldr	r3, [r5, #0]
 8001990:	075b      	lsls	r3, r3, #29
 8001992:	d506      	bpl.n	80019a2 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	68d3      	ldr	r3, [r2, #12]
 8001998:	4920      	ldr	r1, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	400b      	ands	r3, r1
 800199c:	68e9      	ldr	r1, [r5, #12]
 800199e:	430b      	orrs	r3, r1
 80019a0:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	071b      	lsls	r3, r3, #28
 80019a6:	d507      	bpl.n	80019b8 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a8:	491a      	ldr	r1, [pc, #104]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	68cb      	ldr	r3, [r1, #12]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	692a      	ldr	r2, [r5, #16]
 80019b2:	00d2      	lsls	r2, r2, #3
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b8:	f7ff fc68 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	0912      	lsrs	r2, r2, #4
 80019c2:	230f      	movs	r3, #15
 80019c4:	4013      	ands	r3, r2
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_RCC_ClockConfig+0x1cc>)
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	40d8      	lsrs	r0, r3
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1d0>)
 80019ce:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1d4>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f7ff fa42 	bl	8000e5c <HAL_InitTick>
}
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	438b      	bics	r3, r1
 80019e2:	4323      	orrs	r3, r4
 80019e4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019e6:	f7ff fa81 	bl	8000eec <HAL_GetTick>
 80019ea:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	42a3      	cmp	r3, r4
 80019f6:	d0ca      	beq.n	800198e <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff fa78 	bl	8000eec <HAL_GetTick>
 80019fc:	1b80      	subs	r0, r0, r6
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	4298      	cmp	r0, r3
 8001a02:	d9f3      	bls.n	80019ec <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8001a04:	2003      	movs	r0, #3
 8001a06:	e7e7      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e7e5      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e7e3      	b.n	80019d8 <HAL_RCC_ClockConfig+0x180>
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	fffff8ff 	.word	0xfffff8ff
 8001a20:	ffffc7ff 	.word	0xffffc7ff
 8001a24:	0800274c 	.word	0x0800274c
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008

08001a30 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a32:	6818      	ldr	r0, [r3, #0]
}
 8001a34:	4770      	bx	lr
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a3c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a3e:	f7ff fff7 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	0a12      	lsrs	r2, r2, #8
 8001a48:	2307      	movs	r3, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	4a02      	ldr	r2, [pc, #8]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	40d8      	lsrs	r0, r3
}
 8001a52:	bd10      	pop	{r4, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	0800275c 	.word	0x0800275c

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a5e:	f7ff ffe7 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	0ad2      	lsrs	r2, r2, #11
 8001a68:	2307      	movs	r3, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d8      	lsrs	r0, r3
}
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	0800275c 	.word	0x0800275c

08001a7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	069b      	lsls	r3, r3, #26
 8001a84:	d54e      	bpl.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	d500      	bpl.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001a8e:	e073      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4a59      	ldr	r2, [pc, #356]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001a92:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8001a9c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	d56a      	bpl.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	039b      	lsls	r3, r3, #14
 8001aae:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ab0:	6862      	ldr	r2, [r4, #4]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	d006      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ab8:	23c0      	movs	r3, #192	; 0xc0
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	0011      	movs	r1, r2
 8001abe:	4019      	ands	r1, r3
 8001ac0:	4299      	cmp	r1, r3
 8001ac2:	d100      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001ac8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001aca:	23c0      	movs	r3, #192	; 0xc0
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	0008      	movs	r0, r1
 8001ad0:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ad2:	4219      	tst	r1, r3
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	4282      	cmp	r2, r0
 8001ada:	d012      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	069b      	lsls	r3, r3, #26
 8001ae0:	d50f      	bpl.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ae2:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001ae4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001ae6:	4a46      	ldr	r2, [pc, #280]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aea:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0309      	lsls	r1, r1, #12
 8001af0:	4331      	orrs	r1, r6
 8001af2:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001af6:	4e43      	ldr	r6, [pc, #268]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001af8:	4031      	ands	r1, r6
 8001afa:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001afc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001afe:	05c3      	lsls	r3, r0, #23
 8001b00:	d458      	bmi.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b02:	6863      	ldr	r3, [r4, #4]
 8001b04:	22c0      	movs	r2, #192	; 0xc0
 8001b06:	0292      	lsls	r2, r2, #10
 8001b08:	0019      	movs	r1, r3
 8001b0a:	4011      	ands	r1, r2
 8001b0c:	4291      	cmp	r1, r2
 8001b0e:	d060      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001b12:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001b14:	22c0      	movs	r2, #192	; 0xc0
 8001b16:	0292      	lsls	r2, r2, #10
 8001b18:	6860      	ldr	r0, [r4, #4]
 8001b1a:	4002      	ands	r2, r0
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b20:	2d01      	cmp	r5, #1
 8001b22:	d060      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	079b      	lsls	r3, r3, #30
 8001b28:	d506      	bpl.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b2a:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001b2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b2e:	210c      	movs	r1, #12
 8001b30:	438b      	bics	r3, r1
 8001b32:	68a1      	ldr	r1, [r4, #8]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	075b      	lsls	r3, r3, #29
 8001b3c:	d506      	bpl.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001b40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b42:	4931      	ldr	r1, [pc, #196]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b44:	400b      	ands	r3, r1
 8001b46:	68e1      	ldr	r1, [r4, #12]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	071b      	lsls	r3, r3, #28
 8001b50:	d506      	bpl.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b52:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001b54:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b56:	492d      	ldr	r1, [pc, #180]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b58:	400b      	ands	r3, r1
 8001b5a:	6921      	ldr	r1, [r4, #16]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	061b      	lsls	r3, r3, #24
 8001b64:	d545      	bpl.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001b68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b6a:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	6961      	ldr	r1, [r4, #20]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8001b74:	2000      	movs	r0, #0
}
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
  FlagStatus       pwrclkchanged = RESET;
 8001b78:	2500      	movs	r5, #0
 8001b7a:	e790      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001b7e:	6811      	ldr	r1, [r2, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b88:	f7ff f9b0 	bl	8000eec <HAL_GetTick>
 8001b8c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	05db      	lsls	r3, r3, #23
 8001b94:	d500      	bpl.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001b96:	e786      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b98:	f7ff f9a8 	bl	8000eec <HAL_GetTick>
 8001b9c:	1b80      	subs	r0, r0, r6
 8001b9e:	2864      	cmp	r0, #100	; 0x64
 8001ba0:	d9f5      	bls.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	e7e7      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	039b      	lsls	r3, r3, #14
 8001bac:	d400      	bmi.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001bae:	e78a      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	e7e0      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f99a 	bl	8000eec <HAL_GetTick>
 8001bb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	059b      	lsls	r3, r3, #22
 8001bc0:	d49f      	bmi.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x86>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff f993 	bl	8000eec <HAL_GetTick>
 8001bc6:	1b80      	subs	r0, r0, r6
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d9f5      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	e7d1      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001bd4:	680a      	ldr	r2, [r1, #0]
 8001bd6:	4810      	ldr	r0, [pc, #64]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001bd8:	4002      	ands	r2, r0
 8001bda:	20c0      	movs	r0, #192	; 0xc0
 8001bdc:	0380      	lsls	r0, r0, #14
 8001bde:	4003      	ands	r3, r0
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e794      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	000a      	movs	r2, r1
 8001be8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001bea:	490c      	ldr	r1, [pc, #48]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bec:	400b      	ands	r3, r1
 8001bee:	6393      	str	r3, [r2, #56]	; 0x38
 8001bf0:	e798      	b.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e7bf      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	fffcffff 	.word	0xfffcffff
 8001c04:	fff7ffff 	.word	0xfff7ffff
 8001c08:	fffff3ff 	.word	0xfffff3ff
 8001c0c:	ffffcfff 	.word	0xffffcfff
 8001c10:	fff3ffff 	.word	0xfff3ffff
 8001c14:	00001388 	.word	0x00001388
 8001c18:	ffcfffff 	.word	0xffcfffff
 8001c1c:	efffffff 	.word	0xefffffff

08001c20 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c20:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	05d2      	lsls	r2, r2, #23
 8001c26:	4290      	cmp	r0, r2
 8001c28:	d002      	beq.n	8001c30 <TIM_Base_SetConfig+0x10>
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <TIM_Base_SetConfig+0x48>)
 8001c2c:	4290      	cmp	r0, r2
 8001c2e:	d103      	bne.n	8001c38 <TIM_Base_SetConfig+0x18>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c30:	2270      	movs	r2, #112	; 0x70
 8001c32:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	05d2      	lsls	r2, r2, #23
 8001c3c:	4290      	cmp	r0, r2
 8001c3e:	d002      	beq.n	8001c46 <TIM_Base_SetConfig+0x26>
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <TIM_Base_SetConfig+0x48>)
 8001c42:	4290      	cmp	r0, r2
 8001c44:	d103      	bne.n	8001c4e <TIM_Base_SetConfig+0x2e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <TIM_Base_SetConfig+0x4c>)
 8001c48:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c4a:	68ca      	ldr	r2, [r1, #12]
 8001c4c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	4393      	bics	r3, r2
 8001c52:	690a      	ldr	r2, [r1, #16]
 8001c54:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001c56:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c58:	688b      	ldr	r3, [r1, #8]
 8001c5a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5c:	680b      	ldr	r3, [r1, #0]
 8001c5e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c60:	2301      	movs	r3, #1
 8001c62:	6143      	str	r3, [r0, #20]
}
 8001c64:	4770      	bx	lr
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	fffffcff 	.word	0xfffffcff

08001c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c70:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c72:	6a03      	ldr	r3, [r0, #32]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4393      	bics	r3, r2
 8001c78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c7e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c80:	2573      	movs	r5, #115	; 0x73
 8001c82:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c84:	680d      	ldr	r5, [r1, #0]
 8001c86:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c88:	2502      	movs	r5, #2
 8001c8a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c8c:	688d      	ldr	r5, [r1, #8]
 8001c8e:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c92:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c94:	684a      	ldr	r2, [r1, #4]
 8001c96:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c98:	6203      	str	r3, [r0, #32]
}
 8001c9a:	bd30      	pop	{r4, r5, pc}

08001c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c9c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c9e:	6a03      	ldr	r3, [r0, #32]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ca8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001caa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cac:	4c08      	ldr	r4, [pc, #32]	; (8001cd0 <TIM_OC2_SetConfig+0x34>)
 8001cae:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cb0:	680a      	ldr	r2, [r1, #0]
 8001cb2:	0212      	lsls	r2, r2, #8
 8001cb4:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001cb6:	2420      	movs	r4, #32
 8001cb8:	43a3      	bics	r3, r4
 8001cba:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001cbc:	688b      	ldr	r3, [r1, #8]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cc2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cc4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001cc6:	684a      	ldr	r2, [r1, #4]
 8001cc8:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cca:	6203      	str	r3, [r0, #32]
}
 8001ccc:	bd30      	pop	{r4, r5, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	ffff8cff 	.word	0xffff8cff

08001cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cd4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cd6:	6a03      	ldr	r3, [r0, #32]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <TIM_OC3_SetConfig+0x30>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ce2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ce4:	2473      	movs	r4, #115	; 0x73
 8001ce6:	43a2      	bics	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ce8:	680c      	ldr	r4, [r1, #0]
 8001cea:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001cec:	4c06      	ldr	r4, [pc, #24]	; (8001d08 <TIM_OC3_SetConfig+0x34>)
 8001cee:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cf0:	688b      	ldr	r3, [r1, #8]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cf6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cf8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cfa:	684a      	ldr	r2, [r1, #4]
 8001cfc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cfe:	6203      	str	r3, [r0, #32]
}
 8001d00:	bd30      	pop	{r4, r5, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	fffffeff 	.word	0xfffffeff
 8001d08:	fffffdff 	.word	0xfffffdff

08001d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d0c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d0e:	6a03      	ldr	r3, [r0, #32]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <TIM_OC4_SetConfig+0x30>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d16:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d18:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d1c:	4c08      	ldr	r4, [pc, #32]	; (8001d40 <TIM_OC4_SetConfig+0x34>)
 8001d1e:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d20:	680a      	ldr	r2, [r1, #0]
 8001d22:	0212      	lsls	r2, r2, #8
 8001d24:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d26:	4c07      	ldr	r4, [pc, #28]	; (8001d44 <TIM_OC4_SetConfig+0x38>)
 8001d28:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d2a:	688b      	ldr	r3, [r1, #8]
 8001d2c:	031b      	lsls	r3, r3, #12
 8001d2e:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d30:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d32:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d34:	684a      	ldr	r2, [r1, #4]
 8001d36:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d38:	6203      	str	r3, [r0, #32]
}
 8001d3a:	bd30      	pop	{r4, r5, pc}
 8001d3c:	ffffefff 	.word	0xffffefff
 8001d40:	ffff8cff 	.word	0xffff8cff
 8001d44:	ffffdfff 	.word	0xffffdfff

08001d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d48:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d4a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d4c:	6a04      	ldr	r4, [r0, #32]
 8001d4e:	2501      	movs	r5, #1
 8001d50:	43ac      	bics	r4, r5
 8001d52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d54:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d56:	35ef      	adds	r5, #239	; 0xef
 8001d58:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	240a      	movs	r4, #10
 8001d60:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8001d62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d66:	6203      	str	r3, [r0, #32]
}
 8001d68:	bd30      	pop	{r4, r5, pc}
	...

08001d6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d6c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d6e:	6a03      	ldr	r3, [r0, #32]
 8001d70:	2410      	movs	r4, #16
 8001d72:	43a3      	bics	r3, r4
 8001d74:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d76:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d78:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d7a:	4d05      	ldr	r5, [pc, #20]	; (8001d90 <TIM_TI2_ConfigInputStage+0x24>)
 8001d7c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d7e:	0312      	lsls	r2, r2, #12
 8001d80:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d82:	24a0      	movs	r4, #160	; 0xa0
 8001d84:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d86:	0109      	lsls	r1, r1, #4
 8001d88:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d8a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d8c:	6201      	str	r1, [r0, #32]
}
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	ffff0fff 	.word	0xffff0fff

08001d94 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d94:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d96:	2270      	movs	r2, #112	; 0x70
 8001d98:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	2107      	movs	r1, #7
 8001d9e:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001da0:	6083      	str	r3, [r0, #8]
}
 8001da2:	4770      	bx	lr

08001da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001da4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001da6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da8:	4d03      	ldr	r5, [pc, #12]	; (8001db8 <TIM_ETR_SetConfig+0x14>)
 8001daa:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	4313      	orrs	r3, r2
 8001db0:	430b      	orrs	r3, r1
 8001db2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001db4:	6083      	str	r3, [r0, #8]
}
 8001db6:	bd30      	pop	{r4, r5, pc}
 8001db8:	ffff00ff 	.word	0xffff00ff

08001dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001dbc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	4019      	ands	r1, r3
 8001dc2:	2401      	movs	r4, #1
 8001dc4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dc6:	6a03      	ldr	r3, [r0, #32]
 8001dc8:	43a3      	bics	r3, r4
 8001dca:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dcc:	6a03      	ldr	r3, [r0, #32]
 8001dce:	408a      	lsls	r2, r1
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	6203      	str	r3, [r0, #32]
}
 8001dd4:	bd10      	pop	{r4, pc}

08001dd6 <HAL_TIM_Base_Init>:
{
 8001dd6:	b570      	push	{r4, r5, r6, lr}
 8001dd8:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001dda:	d01e      	beq.n	8001e1a <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ddc:	2339      	movs	r3, #57	; 0x39
 8001dde:	5cc3      	ldrb	r3, [r0, r3]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	2539      	movs	r5, #57	; 0x39
 8001de6:	2302      	movs	r3, #2
 8001de8:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dea:	0021      	movs	r1, r4
 8001dec:	c901      	ldmia	r1!, {r0}
 8001dee:	f7ff ff17 	bl	8001c20 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df2:	2301      	movs	r3, #1
 8001df4:	223e      	movs	r2, #62	; 0x3e
 8001df6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	3a04      	subs	r2, #4
 8001dfa:	54a3      	strb	r3, [r4, r2]
 8001dfc:	3201      	adds	r2, #1
 8001dfe:	54a3      	strb	r3, [r4, r2]
 8001e00:	3201      	adds	r2, #1
 8001e02:	54a3      	strb	r3, [r4, r2]
 8001e04:	3201      	adds	r2, #1
 8001e06:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001e08:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001e0a:	2000      	movs	r0, #0
}
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	3338      	adds	r3, #56	; 0x38
 8001e10:	2200      	movs	r2, #0
 8001e12:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001e14:	f7fe fec4 	bl	8000ba0 <HAL_TIM_Base_MspInit>
 8001e18:	e7e4      	b.n	8001de4 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	e7f6      	b.n	8001e0c <HAL_TIM_Base_Init+0x36>

08001e1e <HAL_TIM_PWM_MspInit>:
}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_PWM_Init>:
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001e24:	d01e      	beq.n	8001e64 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	2339      	movs	r3, #57	; 0x39
 8001e28:	5cc3      	ldrb	r3, [r0, r3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d014      	beq.n	8001e58 <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2e:	2539      	movs	r5, #57	; 0x39
 8001e30:	2302      	movs	r3, #2
 8001e32:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	0021      	movs	r1, r4
 8001e36:	c901      	ldmia	r1!, {r0}
 8001e38:	f7ff fef2 	bl	8001c20 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	223e      	movs	r2, #62	; 0x3e
 8001e40:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e42:	3a04      	subs	r2, #4
 8001e44:	54a3      	strb	r3, [r4, r2]
 8001e46:	3201      	adds	r2, #1
 8001e48:	54a3      	strb	r3, [r4, r2]
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	54a3      	strb	r3, [r4, r2]
 8001e4e:	3201      	adds	r2, #1
 8001e50:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
}
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8001e5e:	f7ff ffde 	bl	8001e1e <HAL_TIM_PWM_MspInit>
 8001e62:	e7e4      	b.n	8001e2e <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e7f6      	b.n	8001e56 <HAL_TIM_PWM_Init+0x36>

08001e68 <HAL_TIM_PWM_Start>:
{
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e6c:	2900      	cmp	r1, #0
 8001e6e:	d11e      	bne.n	8001eae <HAL_TIM_PWM_Start+0x46>
 8001e70:	233a      	movs	r3, #58	; 0x3a
 8001e72:	5cc3      	ldrb	r3, [r0, r3]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	4193      	sbcs	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d14a      	bne.n	8001f16 <HAL_TIM_PWM_Start+0xae>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e80:	2900      	cmp	r1, #0
 8001e82:	d12d      	bne.n	8001ee0 <HAL_TIM_PWM_Start+0x78>
 8001e84:	333a      	adds	r3, #58	; 0x3a
 8001e86:	2202      	movs	r2, #2
 8001e88:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f7ff ff95 	bl	8001dbc <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	05d2      	lsls	r2, r2, #23
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d031      	beq.n	8001f00 <HAL_TIM_PWM_Start+0x98>
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_TIM_PWM_Start+0xb8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02e      	beq.n	8001f00 <HAL_TIM_PWM_Start+0x98>
    __HAL_TIM_ENABLE(htim);
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001eaa:	2000      	movs	r0, #0
 8001eac:	e034      	b.n	8001f18 <HAL_TIM_PWM_Start+0xb0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eae:	2904      	cmp	r1, #4
 8001eb0:	d008      	beq.n	8001ec4 <HAL_TIM_PWM_Start+0x5c>
 8001eb2:	2908      	cmp	r1, #8
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_TIM_PWM_Start+0x6a>
 8001eb6:	233d      	movs	r3, #61	; 0x3d
 8001eb8:	5cc3      	ldrb	r3, [r0, r3]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	4193      	sbcs	r3, r2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e7db      	b.n	8001e7c <HAL_TIM_PWM_Start+0x14>
 8001ec4:	233b      	movs	r3, #59	; 0x3b
 8001ec6:	5cc3      	ldrb	r3, [r0, r3]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	4193      	sbcs	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	e7d4      	b.n	8001e7c <HAL_TIM_PWM_Start+0x14>
 8001ed2:	233c      	movs	r3, #60	; 0x3c
 8001ed4:	5cc3      	ldrb	r3, [r0, r3]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	4193      	sbcs	r3, r2
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e7cd      	b.n	8001e7c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee0:	2904      	cmp	r1, #4
 8001ee2:	d005      	beq.n	8001ef0 <HAL_TIM_PWM_Start+0x88>
 8001ee4:	2908      	cmp	r1, #8
 8001ee6:	d007      	beq.n	8001ef8 <HAL_TIM_PWM_Start+0x90>
 8001ee8:	233d      	movs	r3, #61	; 0x3d
 8001eea:	2202      	movs	r2, #2
 8001eec:	54e2      	strb	r2, [r4, r3]
 8001eee:	e7cc      	b.n	8001e8a <HAL_TIM_PWM_Start+0x22>
 8001ef0:	233b      	movs	r3, #59	; 0x3b
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	54e2      	strb	r2, [r4, r3]
 8001ef6:	e7c8      	b.n	8001e8a <HAL_TIM_PWM_Start+0x22>
 8001ef8:	233c      	movs	r3, #60	; 0x3c
 8001efa:	2202      	movs	r2, #2
 8001efc:	54e2      	strb	r2, [r4, r3]
 8001efe:	e7c4      	b.n	8001e8a <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	2207      	movs	r2, #7
 8001f04:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f06:	2a06      	cmp	r2, #6
 8001f08:	d007      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001f12:	2000      	movs	r0, #0
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_PWM_Start+0xb0>
    return HAL_ERROR;
 8001f16:	2001      	movs	r0, #1
}
 8001f18:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e7fc      	b.n	8001f18 <HAL_TIM_PWM_Start+0xb0>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40010800 	.word	0x40010800

08001f24 <HAL_TIM_PWM_Stop>:
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	0004      	movs	r4, r0
 8001f28:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6800      	ldr	r0, [r0, #0]
 8001f2e:	f7ff ff45 	bl	8001dbc <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	6a19      	ldr	r1, [r3, #32]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_TIM_PWM_Stop+0x50>)
 8001f38:	4211      	tst	r1, r2
 8001f3a:	d103      	bne.n	8001f44 <HAL_TIM_PWM_Stop+0x20>
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2101      	movs	r1, #1
 8001f40:	438a      	bics	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Stop+0x2e>
 8001f48:	233a      	movs	r3, #58	; 0x3a
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	54e2      	strb	r2, [r4, r3]
}
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f52:	2d04      	cmp	r5, #4
 8001f54:	d005      	beq.n	8001f62 <HAL_TIM_PWM_Stop+0x3e>
 8001f56:	2d08      	cmp	r5, #8
 8001f58:	d007      	beq.n	8001f6a <HAL_TIM_PWM_Stop+0x46>
 8001f5a:	233d      	movs	r3, #61	; 0x3d
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	54e2      	strb	r2, [r4, r3]
 8001f60:	e7f5      	b.n	8001f4e <HAL_TIM_PWM_Stop+0x2a>
 8001f62:	233b      	movs	r3, #59	; 0x3b
 8001f64:	2201      	movs	r2, #1
 8001f66:	54e2      	strb	r2, [r4, r3]
 8001f68:	e7f1      	b.n	8001f4e <HAL_TIM_PWM_Stop+0x2a>
 8001f6a:	233c      	movs	r3, #60	; 0x3c
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	54e2      	strb	r2, [r4, r3]
 8001f70:	e7ed      	b.n	8001f4e <HAL_TIM_PWM_Stop+0x2a>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	00001111 	.word	0x00001111

08001f78 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	0004      	movs	r4, r0
 8001f7c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001f7e:	2338      	movs	r3, #56	; 0x38
 8001f80:	5cc3      	ldrb	r3, [r0, r3]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d100      	bne.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x10>
 8001f86:	e06a      	b.n	800205e <HAL_TIM_PWM_ConfigChannel+0xe6>
 8001f88:	2338      	movs	r3, #56	; 0x38
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8001f8e:	2a08      	cmp	r2, #8
 8001f90:	d050      	beq.n	8002034 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8001f92:	d81c      	bhi.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x56>
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d038      	beq.n	800200a <HAL_TIM_PWM_ConfigChannel+0x92>
 8001f98:	2a04      	cmp	r2, #4
 8001f9a:	d116      	bne.n	8001fca <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f9c:	0029      	movs	r1, r5
 8001f9e:	6800      	ldr	r0, [r0, #0]
 8001fa0:	f7ff fe7c 	bl	8001c9c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	6991      	ldr	r1, [r2, #24]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	6993      	ldr	r3, [r2, #24]
 8001fb4:	492b      	ldr	r1, [pc, #172]	; (8002064 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fba:	6821      	ldr	r1, [r4, #0]
 8001fbc:	698b      	ldr	r3, [r1, #24]
 8001fbe:	68ea      	ldr	r2, [r5, #12]
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2000      	movs	r0, #0
      break;
 8001fc8:	e01b      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8001fca:	0008      	movs	r0, r1
 8001fcc:	e019      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8001fce:	2a0c      	cmp	r2, #12
 8001fd0:	d116      	bne.n	8002000 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fd2:	0029      	movs	r1, r5
 8001fd4:	6800      	ldr	r0, [r0, #0]
 8001fd6:	f7ff fe99 	bl	8001d0c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	69d1      	ldr	r1, [r2, #28]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	69d3      	ldr	r3, [r2, #28]
 8001fea:	491e      	ldr	r1, [pc, #120]	; (8002064 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8001fec:	400b      	ands	r3, r1
 8001fee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ff0:	6821      	ldr	r1, [r4, #0]
 8001ff2:	69cb      	ldr	r3, [r1, #28]
 8001ff4:	68ea      	ldr	r2, [r5, #12]
 8001ff6:	0212      	lsls	r2, r2, #8
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2000      	movs	r0, #0
      break;
 8001ffe:	e000      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8002000:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002002:	2338      	movs	r3, #56	; 0x38
 8002004:	2200      	movs	r2, #0
 8002006:	54e2      	strb	r2, [r4, r3]
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800200a:	0029      	movs	r1, r5
 800200c:	6800      	ldr	r0, [r0, #0]
 800200e:	f7ff fe2f 	bl	8001c70 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	6993      	ldr	r3, [r2, #24]
 8002016:	2108      	movs	r1, #8
 8002018:	430b      	orrs	r3, r1
 800201a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	6993      	ldr	r3, [r2, #24]
 8002020:	3904      	subs	r1, #4
 8002022:	438b      	bics	r3, r1
 8002024:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	6993      	ldr	r3, [r2, #24]
 800202a:	68e9      	ldr	r1, [r5, #12]
 800202c:	430b      	orrs	r3, r1
 800202e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2000      	movs	r0, #0
      break;
 8002032:	e7e6      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002034:	0029      	movs	r1, r5
 8002036:	6800      	ldr	r0, [r0, #0]
 8002038:	f7ff fe4c 	bl	8001cd4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	69d3      	ldr	r3, [r2, #28]
 8002040:	2108      	movs	r1, #8
 8002042:	430b      	orrs	r3, r1
 8002044:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	69d3      	ldr	r3, [r2, #28]
 800204a:	3904      	subs	r1, #4
 800204c:	438b      	bics	r3, r1
 800204e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	69d3      	ldr	r3, [r2, #28]
 8002054:	68e9      	ldr	r1, [r5, #12]
 8002056:	430b      	orrs	r3, r1
 8002058:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2000      	movs	r0, #0
      break;
 800205c:	e7d1      	b.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x8a>
  __HAL_LOCK(htim);
 800205e:	2002      	movs	r0, #2
 8002060:	e7d2      	b.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	fffffbff 	.word	0xfffffbff

08002068 <HAL_TIM_ConfigClockSource>:
{
 8002068:	b510      	push	{r4, lr}
 800206a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800206c:	2338      	movs	r3, #56	; 0x38
 800206e:	5cc3      	ldrb	r3, [r0, r3]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d100      	bne.n	8002076 <HAL_TIM_ConfigClockSource+0xe>
 8002074:	e078      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x100>
 8002076:	2338      	movs	r3, #56	; 0x38
 8002078:	2201      	movs	r2, #1
 800207a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	3301      	adds	r3, #1
 800207e:	3201      	adds	r2, #1
 8002080:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002086:	4839      	ldr	r0, [pc, #228]	; (800216c <HAL_TIM_ConfigClockSource+0x104>)
 8002088:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800208a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800208c:	680b      	ldr	r3, [r1, #0]
 800208e:	2b60      	cmp	r3, #96	; 0x60
 8002090:	d050      	beq.n	8002134 <HAL_TIM_ConfigClockSource+0xcc>
 8002092:	d82a      	bhi.n	80020ea <HAL_TIM_ConfigClockSource+0x82>
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d058      	beq.n	800214a <HAL_TIM_ConfigClockSource+0xe2>
 8002098:	d90c      	bls.n	80020b4 <HAL_TIM_ConfigClockSource+0x4c>
 800209a:	2b50      	cmp	r3, #80	; 0x50
 800209c:	d123      	bne.n	80020e6 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209e:	68ca      	ldr	r2, [r1, #12]
 80020a0:	6849      	ldr	r1, [r1, #4]
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f7ff fe50 	bl	8001d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020a8:	2150      	movs	r1, #80	; 0x50
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	f7ff fe72 	bl	8001d94 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2000      	movs	r0, #0
      break;
 80020b2:	e005      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0x6e>
 80020b8:	d909      	bls.n	80020ce <HAL_TIM_ConfigClockSource+0x66>
 80020ba:	2b30      	cmp	r3, #48	; 0x30
 80020bc:	d00b      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80020be:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	2339      	movs	r3, #57	; 0x39
 80020c2:	2201      	movs	r2, #1
 80020c4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80020c6:	3b01      	subs	r3, #1
 80020c8:	2200      	movs	r2, #0
 80020ca:	54e2      	strb	r2, [r4, r3]
}
 80020cc:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0x6e>
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d105      	bne.n	80020e2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020d6:	0019      	movs	r1, r3
 80020d8:	6820      	ldr	r0, [r4, #0]
 80020da:	f7ff fe5b 	bl	8001d94 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2000      	movs	r0, #0
      break;
 80020e0:	e7ee      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	e7ec      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
 80020e6:	2001      	movs	r0, #1
 80020e8:	e7ea      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	0152      	lsls	r2, r2, #5
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0xf8>
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	0192      	lsls	r2, r2, #6
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10d      	bne.n	8002116 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 80020fa:	68cb      	ldr	r3, [r1, #12]
 80020fc:	684a      	ldr	r2, [r1, #4]
 80020fe:	6889      	ldr	r1, [r1, #8]
 8002100:	6820      	ldr	r0, [r4, #0]
 8002102:	f7ff fe4f 	bl	8001da4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	6891      	ldr	r1, [r2, #8]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	01db      	lsls	r3, r3, #7
 800210e:	430b      	orrs	r3, r1
 8002110:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2000      	movs	r0, #0
      break;
 8002114:	e7d4      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002116:	2b70      	cmp	r3, #112	; 0x70
 8002118:	d124      	bne.n	8002164 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800211a:	68cb      	ldr	r3, [r1, #12]
 800211c:	684a      	ldr	r2, [r1, #4]
 800211e:	6889      	ldr	r1, [r1, #8]
 8002120:	6820      	ldr	r0, [r4, #0]
 8002122:	f7ff fe3f 	bl	8001da4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800212a:	2177      	movs	r1, #119	; 0x77
 800212c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800212e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2000      	movs	r0, #0
      break;
 8002132:	e7c5      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002134:	68ca      	ldr	r2, [r1, #12]
 8002136:	6849      	ldr	r1, [r1, #4]
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	f7ff fe17 	bl	8001d6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800213e:	2160      	movs	r1, #96	; 0x60
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	f7ff fe27 	bl	8001d94 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002146:	2000      	movs	r0, #0
      break;
 8002148:	e7ba      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800214a:	68ca      	ldr	r2, [r1, #12]
 800214c:	6849      	ldr	r1, [r1, #4]
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	f7ff fdfa 	bl	8001d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	6820      	ldr	r0, [r4, #0]
 8002158:	f7ff fe1c 	bl	8001d94 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2000      	movs	r0, #0
      break;
 800215e:	e7af      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002160:	2000      	movs	r0, #0
 8002162:	e7ad      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e7ab      	b.n	80020c0 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8002168:	2002      	movs	r0, #2
 800216a:	e7af      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x64>
 800216c:	ffff0088 	.word	0xffff0088

08002170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002170:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002172:	2338      	movs	r3, #56	; 0x38
 8002174:	5cc3      	ldrb	r3, [r0, r3]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d022      	beq.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800217a:	2338      	movs	r3, #56	; 0x38
 800217c:	2201      	movs	r2, #1
 800217e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	3301      	adds	r3, #1
 8002182:	3201      	adds	r2, #1
 8002184:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800218a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800218c:	2570      	movs	r5, #112	; 0x70
 800218e:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002190:	680d      	ldr	r5, [r1, #0]
 8002192:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	05d2      	lsls	r2, r2, #23
 800219c:	4293      	cmp	r3, r2
 800219e:	d002      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d104      	bne.n	80021b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021aa:	684a      	ldr	r2, [r1, #4]
 80021ac:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021ae:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	2339      	movs	r3, #57	; 0x39
 80021b2:	2201      	movs	r2, #1
 80021b4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80021b6:	3b01      	subs	r3, #1
 80021b8:	2200      	movs	r2, #0
 80021ba:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80021bc:	2000      	movs	r0, #0
}
 80021be:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021c0:	2002      	movs	r0, #2
 80021c2:	e7fc      	b.n	80021be <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80021c4:	40010800 	.word	0x40010800

080021c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c8:	b5d0      	push	{r4, r6, r7, lr}
 80021ca:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80021cc:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ce:	6883      	ldr	r3, [r0, #8]
 80021d0:	6902      	ldr	r2, [r0, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	6942      	ldr	r2, [r0, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	69c2      	ldr	r2, [r0, #28]
 80021da:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021dc:	680a      	ldr	r2, [r1, #0]
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <UART_SetConfig+0x234>)
 80021e0:	4002      	ands	r2, r0
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6853      	ldr	r3, [r2, #4]
 80021ea:	4985      	ldr	r1, [pc, #532]	; (8002400 <UART_SetConfig+0x238>)
 80021ec:	400b      	ands	r3, r1
 80021ee:	68e1      	ldr	r1, [r4, #12]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021f4:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	4b82      	ldr	r3, [pc, #520]	; (8002404 <UART_SetConfig+0x23c>)
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021fe:	6a23      	ldr	r3, [r4, #32]
 8002200:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002202:	6893      	ldr	r3, [r2, #8]
 8002204:	4880      	ldr	r0, [pc, #512]	; (8002408 <UART_SetConfig+0x240>)
 8002206:	4003      	ands	r3, r0
 8002208:	430b      	orrs	r3, r1
 800220a:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	4b7f      	ldr	r3, [pc, #508]	; (800240c <UART_SetConfig+0x244>)
 8002210:	429a      	cmp	r2, r3
 8002212:	d012      	beq.n	800223a <UART_SetConfig+0x72>
 8002214:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <UART_SetConfig+0x23c>)
 8002216:	429a      	cmp	r2, r3
 8002218:	d020      	beq.n	800225c <UART_SetConfig+0x94>
 800221a:	2310      	movs	r3, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800221c:	4979      	ldr	r1, [pc, #484]	; (8002404 <UART_SetConfig+0x23c>)
 800221e:	428a      	cmp	r2, r1
 8002220:	d042      	beq.n	80022a8 <UART_SetConfig+0xe0>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002222:	69e0      	ldr	r0, [r4, #28]
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	0212      	lsls	r2, r2, #8
 8002228:	4290      	cmp	r0, r2
 800222a:	d07a      	beq.n	8002322 <UART_SetConfig+0x15a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800222c:	2b08      	cmp	r3, #8
 800222e:	d900      	bls.n	8002232 <UART_SetConfig+0x6a>
 8002230:	e0de      	b.n	80023f0 <UART_SetConfig+0x228>
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4a76      	ldr	r2, [pc, #472]	; (8002410 <UART_SetConfig+0x248>)
 8002236:	58d3      	ldr	r3, [r2, r3]
 8002238:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <UART_SetConfig+0x24c>)
 800223c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800223e:	230c      	movs	r3, #12
 8002240:	400b      	ands	r3, r1
 8002242:	2b08      	cmp	r3, #8
 8002244:	d022      	beq.n	800228c <UART_SetConfig+0xc4>
 8002246:	d805      	bhi.n	8002254 <UART_SetConfig+0x8c>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d021      	beq.n	8002290 <UART_SetConfig+0xc8>
 800224c:	2b04      	cmp	r3, #4
 800224e:	d0e5      	beq.n	800221c <UART_SetConfig+0x54>
 8002250:	2310      	movs	r3, #16
 8002252:	e7e3      	b.n	800221c <UART_SetConfig+0x54>
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d11d      	bne.n	8002294 <UART_SetConfig+0xcc>
 8002258:	3b04      	subs	r3, #4
 800225a:	e7df      	b.n	800221c <UART_SetConfig+0x54>
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <UART_SetConfig+0x24c>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	21c0      	movs	r1, #192	; 0xc0
 8002262:	0109      	lsls	r1, r1, #4
 8002264:	400b      	ands	r3, r1
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0109      	lsls	r1, r1, #4
 800226a:	428b      	cmp	r3, r1
 800226c:	d014      	beq.n	8002298 <UART_SetConfig+0xd0>
 800226e:	d807      	bhi.n	8002280 <UART_SetConfig+0xb8>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <UART_SetConfig+0xd4>
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	00c9      	lsls	r1, r1, #3
 8002278:	428b      	cmp	r3, r1
 800227a:	d111      	bne.n	80022a0 <UART_SetConfig+0xd8>
 800227c:	2304      	movs	r3, #4
 800227e:	e7cd      	b.n	800221c <UART_SetConfig+0x54>
 8002280:	21c0      	movs	r1, #192	; 0xc0
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	428b      	cmp	r3, r1
 8002286:	d10d      	bne.n	80022a4 <UART_SetConfig+0xdc>
 8002288:	2308      	movs	r3, #8
 800228a:	e7c7      	b.n	800221c <UART_SetConfig+0x54>
 800228c:	2302      	movs	r3, #2
 800228e:	e7c5      	b.n	800221c <UART_SetConfig+0x54>
 8002290:	2300      	movs	r3, #0
 8002292:	e7c3      	b.n	800221c <UART_SetConfig+0x54>
 8002294:	2310      	movs	r3, #16
 8002296:	e7c1      	b.n	800221c <UART_SetConfig+0x54>
 8002298:	2302      	movs	r3, #2
 800229a:	e7bf      	b.n	800221c <UART_SetConfig+0x54>
 800229c:	2300      	movs	r3, #0
 800229e:	e7bd      	b.n	800221c <UART_SetConfig+0x54>
 80022a0:	2310      	movs	r3, #16
 80022a2:	e7bb      	b.n	800221c <UART_SetConfig+0x54>
 80022a4:	2310      	movs	r3, #16
 80022a6:	e7b9      	b.n	800221c <UART_SetConfig+0x54>
    switch (clocksource)
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d035      	beq.n	8002318 <UART_SetConfig+0x150>
 80022ac:	d80b      	bhi.n	80022c6 <UART_SetConfig+0xfe>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d02c      	beq.n	800230c <UART_SetConfig+0x144>
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d105      	bne.n	80022c2 <UART_SetConfig+0xfa>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <UART_SetConfig+0x24c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	06db      	lsls	r3, r3, #27
 80022bc:	d42f      	bmi.n	800231e <UART_SetConfig+0x156>
          pclk = (uint32_t) HSI_VALUE;
 80022be:	4856      	ldr	r0, [pc, #344]	; (8002418 <UART_SetConfig+0x250>)
 80022c0:	e005      	b.n	80022ce <UART_SetConfig+0x106>
    switch (clocksource)
 80022c2:	2001      	movs	r0, #1
 80022c4:	e073      	b.n	80023ae <UART_SetConfig+0x1e6>
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11e      	bne.n	8002308 <UART_SetConfig+0x140>
 80022ca:	2080      	movs	r0, #128	; 0x80
 80022cc:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	0053      	lsls	r3, r2, #1
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	4283      	cmp	r3, r0
 80022d6:	d900      	bls.n	80022da <UART_SetConfig+0x112>
 80022d8:	e07e      	b.n	80023d8 <UART_SetConfig+0x210>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022da:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022dc:	4283      	cmp	r3, r0
 80022de:	d200      	bcs.n	80022e2 <UART_SetConfig+0x11a>
 80022e0:	e07c      	b.n	80023dc <UART_SetConfig+0x214>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022e2:	0e07      	lsrs	r7, r0, #24
 80022e4:	0206      	lsls	r6, r0, #8
 80022e6:	0850      	lsrs	r0, r2, #1
 80022e8:	2100      	movs	r1, #0
 80022ea:	1980      	adds	r0, r0, r6
 80022ec:	4179      	adcs	r1, r7
 80022ee:	2300      	movs	r3, #0
 80022f0:	f7fe f880 	bl	80003f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022f4:	4b49      	ldr	r3, [pc, #292]	; (800241c <UART_SetConfig+0x254>)
 80022f6:	18c2      	adds	r2, r0, r3
 80022f8:	4b49      	ldr	r3, [pc, #292]	; (8002420 <UART_SetConfig+0x258>)
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d900      	bls.n	8002300 <UART_SetConfig+0x138>
 80022fe:	e06f      	b.n	80023e0 <UART_SetConfig+0x218>
          huart->Instance->BRR = usartdiv;
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	60d8      	str	r0, [r3, #12]
 8002304:	2000      	movs	r0, #0
 8002306:	e052      	b.n	80023ae <UART_SetConfig+0x1e6>
    switch (clocksource)
 8002308:	2001      	movs	r0, #1
 800230a:	e050      	b.n	80023ae <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800230c:	f7ff fb96 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002310:	2800      	cmp	r0, #0
 8002312:	d1dc      	bne.n	80022ce <UART_SetConfig+0x106>
 8002314:	2000      	movs	r0, #0
 8002316:	e04a      	b.n	80023ae <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002318:	f7fe ffb8 	bl	800128c <HAL_RCC_GetSysClockFreq>
        break;
 800231c:	e7f8      	b.n	8002310 <UART_SetConfig+0x148>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800231e:	4841      	ldr	r0, [pc, #260]	; (8002424 <UART_SetConfig+0x25c>)
 8002320:	e7d5      	b.n	80022ce <UART_SetConfig+0x106>
    switch (clocksource)
 8002322:	2b08      	cmp	r3, #8
 8002324:	d85e      	bhi.n	80023e4 <UART_SetConfig+0x21c>
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <UART_SetConfig+0x260>)
 800232a:	58d3      	ldr	r3, [r2, r3]
 800232c:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 800232e:	f7ff fb85 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002332:	2800      	cmp	r0, #0
 8002334:	d058      	beq.n	80023e8 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002336:	0040      	lsls	r0, r0, #1
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	18c0      	adds	r0, r0, r3
 800233e:	6861      	ldr	r1, [r4, #4]
 8002340:	f7fd fee2 	bl	8000108 <__udivsi3>
 8002344:	b283      	uxth	r3, r0
 8002346:	0400      	lsls	r0, r0, #16
 8002348:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800234a:	0001      	movs	r1, r0
 800234c:	3910      	subs	r1, #16
 800234e:	4a37      	ldr	r2, [pc, #220]	; (800242c <UART_SetConfig+0x264>)
 8002350:	4291      	cmp	r1, r2
 8002352:	d84b      	bhi.n	80023ec <UART_SetConfig+0x224>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002354:	220f      	movs	r2, #15
 8002356:	4393      	bics	r3, r2
 8002358:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800235a:	0840      	lsrs	r0, r0, #1
 800235c:	2307      	movs	r3, #7
 800235e:	4018      	ands	r0, r3
 8002360:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	60d8      	str	r0, [r3, #12]
 8002366:	2000      	movs	r0, #0
 8002368:	e021      	b.n	80023ae <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetPCLK2Freq();
 800236a:	f7ff fb77 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
        break;
 800236e:	e7e0      	b.n	8002332 <UART_SetConfig+0x16a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <UART_SetConfig+0x24c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	06db      	lsls	r3, r3, #27
 8002376:	d404      	bmi.n	8002382 <UART_SetConfig+0x1ba>
          pclk = (uint32_t) HSI_VALUE;
 8002378:	4827      	ldr	r0, [pc, #156]	; (8002418 <UART_SetConfig+0x250>)
 800237a:	e7dc      	b.n	8002336 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 800237c:	f7fe ff86 	bl	800128c <HAL_RCC_GetSysClockFreq>
        break;
 8002380:	e7d7      	b.n	8002332 <UART_SetConfig+0x16a>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002382:	4828      	ldr	r0, [pc, #160]	; (8002424 <UART_SetConfig+0x25c>)
 8002384:	e7d7      	b.n	8002336 <UART_SetConfig+0x16e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002386:	f7ff fb59 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 800238a:	2800      	cmp	r0, #0
 800238c:	d032      	beq.n	80023f4 <UART_SetConfig+0x22c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800238e:	6863      	ldr	r3, [r4, #4]
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	1818      	adds	r0, r3, r0
 8002394:	6861      	ldr	r1, [r4, #4]
 8002396:	f7fd feb7 	bl	8000108 <__udivsi3>
 800239a:	0400      	lsls	r0, r0, #16
 800239c:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800239e:	0002      	movs	r2, r0
 80023a0:	3a10      	subs	r2, #16
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <UART_SetConfig+0x264>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d827      	bhi.n	80023f8 <UART_SetConfig+0x230>
      {
        huart->Instance->BRR = usartdiv;
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	60d8      	str	r0, [r3, #12]
 80023ac:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80023b2:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80023b4:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80023b6:	f7ff fb51 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
        break;
 80023ba:	e7e6      	b.n	800238a <UART_SetConfig+0x1c2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <UART_SetConfig+0x24c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	06db      	lsls	r3, r3, #27
 80023c2:	d407      	bmi.n	80023d4 <UART_SetConfig+0x20c>
          pclk = (uint32_t) HSI_VALUE;
 80023c4:	4814      	ldr	r0, [pc, #80]	; (8002418 <UART_SetConfig+0x250>)
 80023c6:	e7e2      	b.n	800238e <UART_SetConfig+0x1c6>
        pclk = HAL_RCC_GetSysClockFreq();
 80023c8:	f7fe ff60 	bl	800128c <HAL_RCC_GetSysClockFreq>
        break;
 80023cc:	e7dd      	b.n	800238a <UART_SetConfig+0x1c2>
    switch (clocksource)
 80023ce:	2080      	movs	r0, #128	; 0x80
 80023d0:	0200      	lsls	r0, r0, #8
 80023d2:	e7dc      	b.n	800238e <UART_SetConfig+0x1c6>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <UART_SetConfig+0x25c>)
 80023d6:	e7da      	b.n	800238e <UART_SetConfig+0x1c6>
        ret = HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
 80023da:	e7e8      	b.n	80023ae <UART_SetConfig+0x1e6>
 80023dc:	2001      	movs	r0, #1
 80023de:	e7e6      	b.n	80023ae <UART_SetConfig+0x1e6>
          ret = HAL_ERROR;
 80023e0:	2001      	movs	r0, #1
 80023e2:	e7e4      	b.n	80023ae <UART_SetConfig+0x1e6>
    switch (clocksource)
 80023e4:	2001      	movs	r0, #1
 80023e6:	e7e2      	b.n	80023ae <UART_SetConfig+0x1e6>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e0      	b.n	80023ae <UART_SetConfig+0x1e6>
        ret = HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e7de      	b.n	80023ae <UART_SetConfig+0x1e6>
    switch (clocksource)
 80023f0:	2001      	movs	r0, #1
 80023f2:	e7dc      	b.n	80023ae <UART_SetConfig+0x1e6>
 80023f4:	2000      	movs	r0, #0
 80023f6:	e7da      	b.n	80023ae <UART_SetConfig+0x1e6>
        ret = HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7d8      	b.n	80023ae <UART_SetConfig+0x1e6>
 80023fc:	efff69f3 	.word	0xefff69f3
 8002400:	ffffcfff 	.word	0xffffcfff
 8002404:	40004800 	.word	0x40004800
 8002408:	fffff4ff 	.word	0xfffff4ff
 800240c:	40004400 	.word	0x40004400
 8002410:	08002770 	.word	0x08002770
 8002414:	40021000 	.word	0x40021000
 8002418:	00f42400 	.word	0x00f42400
 800241c:	fffffd00 	.word	0xfffffd00
 8002420:	000ffcff 	.word	0x000ffcff
 8002424:	003d0900 	.word	0x003d0900
 8002428:	08002794 	.word	0x08002794
 800242c:	0000ffef 	.word	0x0000ffef

08002430 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002430:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002432:	07db      	lsls	r3, r3, #31
 8002434:	d506      	bpl.n	8002444 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002436:	6802      	ldr	r2, [r0, #0]
 8002438:	6853      	ldr	r3, [r2, #4]
 800243a:	492c      	ldr	r1, [pc, #176]	; (80024ec <UART_AdvFeatureConfig+0xbc>)
 800243c:	400b      	ands	r3, r1
 800243e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002440:	430b      	orrs	r3, r1
 8002442:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002444:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002446:	079b      	lsls	r3, r3, #30
 8002448:	d506      	bpl.n	8002458 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800244a:	6802      	ldr	r2, [r0, #0]
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	4928      	ldr	r1, [pc, #160]	; (80024f0 <UART_AdvFeatureConfig+0xc0>)
 8002450:	400b      	ands	r3, r1
 8002452:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002454:	430b      	orrs	r3, r1
 8002456:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800245a:	075b      	lsls	r3, r3, #29
 800245c:	d506      	bpl.n	800246c <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800245e:	6802      	ldr	r2, [r0, #0]
 8002460:	6853      	ldr	r3, [r2, #4]
 8002462:	4924      	ldr	r1, [pc, #144]	; (80024f4 <UART_AdvFeatureConfig+0xc4>)
 8002464:	400b      	ands	r3, r1
 8002466:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002468:	430b      	orrs	r3, r1
 800246a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800246c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	d506      	bpl.n	8002480 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	6853      	ldr	r3, [r2, #4]
 8002476:	4920      	ldr	r1, [pc, #128]	; (80024f8 <UART_AdvFeatureConfig+0xc8>)
 8002478:	400b      	ands	r3, r1
 800247a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800247c:	430b      	orrs	r3, r1
 800247e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002482:	06db      	lsls	r3, r3, #27
 8002484:	d506      	bpl.n	8002494 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002486:	6802      	ldr	r2, [r0, #0]
 8002488:	6893      	ldr	r3, [r2, #8]
 800248a:	491c      	ldr	r1, [pc, #112]	; (80024fc <UART_AdvFeatureConfig+0xcc>)
 800248c:	400b      	ands	r3, r1
 800248e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002494:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002496:	069b      	lsls	r3, r3, #26
 8002498:	d506      	bpl.n	80024a8 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800249a:	6802      	ldr	r2, [r0, #0]
 800249c:	6893      	ldr	r3, [r2, #8]
 800249e:	4918      	ldr	r1, [pc, #96]	; (8002500 <UART_AdvFeatureConfig+0xd0>)
 80024a0:	400b      	ands	r3, r1
 80024a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024aa:	065b      	lsls	r3, r3, #25
 80024ac:	d50b      	bpl.n	80024c6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024ae:	6802      	ldr	r2, [r0, #0]
 80024b0:	6853      	ldr	r3, [r2, #4]
 80024b2:	4914      	ldr	r1, [pc, #80]	; (8002504 <UART_AdvFeatureConfig+0xd4>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	035b      	lsls	r3, r3, #13
 80024c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d00a      	beq.n	80024dc <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	d506      	bpl.n	80024da <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	6853      	ldr	r3, [r2, #4]
 80024d0:	490d      	ldr	r1, [pc, #52]	; (8002508 <UART_AdvFeatureConfig+0xd8>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024d6:	430b      	orrs	r3, r1
 80024d8:	6053      	str	r3, [r2, #4]
  }
}
 80024da:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024dc:	6802      	ldr	r2, [r0, #0]
 80024de:	6853      	ldr	r3, [r2, #4]
 80024e0:	490a      	ldr	r1, [pc, #40]	; (800250c <UART_AdvFeatureConfig+0xdc>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024e6:	430b      	orrs	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]
 80024ea:	e7ec      	b.n	80024c6 <UART_AdvFeatureConfig+0x96>
 80024ec:	fffdffff 	.word	0xfffdffff
 80024f0:	fffeffff 	.word	0xfffeffff
 80024f4:	fffbffff 	.word	0xfffbffff
 80024f8:	ffff7fff 	.word	0xffff7fff
 80024fc:	ffffefff 	.word	0xffffefff
 8002500:	ffffdfff 	.word	0xffffdfff
 8002504:	ffefffff 	.word	0xffefffff
 8002508:	fff7ffff 	.word	0xfff7ffff
 800250c:	ff9fffff 	.word	0xff9fffff

08002510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	46ce      	mov	lr, r9
 8002514:	4647      	mov	r7, r8
 8002516:	b580      	push	{r7, lr}
 8002518:	0006      	movs	r6, r0
 800251a:	000d      	movs	r5, r1
 800251c:	0017      	movs	r7, r2
 800251e:	4699      	mov	r9, r3
 8002520:	9b08      	ldr	r3, [sp, #32]
 8002522:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002524:	6833      	ldr	r3, [r6, #0]
 8002526:	69dc      	ldr	r4, [r3, #28]
 8002528:	402c      	ands	r4, r5
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	4263      	negs	r3, r4
 800252e:	415c      	adcs	r4, r3
 8002530:	42bc      	cmp	r4, r7
 8002532:	d153      	bne.n	80025dc <UART_WaitOnFlagUntilTimeout+0xcc>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002534:	4643      	mov	r3, r8
 8002536:	3301      	adds	r3, #1
 8002538:	d0f4      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x14>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7fe fcd7 	bl	8000eec <HAL_GetTick>
 800253e:	464b      	mov	r3, r9
 8002540:	1ac0      	subs	r0, r0, r3
 8002542:	4540      	cmp	r0, r8
 8002544:	d82c      	bhi.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x90>
 8002546:	4643      	mov	r3, r8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d029      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x90>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	0752      	lsls	r2, r2, #29
 8002552:	d5e7      	bpl.n	8002524 <UART_WaitOnFlagUntilTimeout+0x14>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	0512      	lsls	r2, r2, #20
 8002558:	d5e4      	bpl.n	8002524 <UART_WaitOnFlagUntilTimeout+0x14>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002560:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002564:	2201      	movs	r2, #1
 8002566:	f382 8810 	msr	PRIMASK, r2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800256a:	6831      	ldr	r1, [r6, #0]
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	4c1e      	ldr	r4, [pc, #120]	; (80025e8 <UART_WaitOnFlagUntilTimeout+0xd8>)
 8002570:	4023      	ands	r3, r4
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002578:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002580:	6831      	ldr	r1, [r6, #0]
 8002582:	688b      	ldr	r3, [r1, #8]
 8002584:	4393      	bics	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
 8002588:	f380 8810 	msr	PRIMASK, r0

          huart->gState = HAL_UART_STATE_READY;
 800258c:	2320      	movs	r3, #32
 800258e:	67b3      	str	r3, [r6, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002590:	67f3      	str	r3, [r6, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002592:	327f      	adds	r2, #127	; 0x7f
 8002594:	50b3      	str	r3, [r6, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002596:	3354      	adds	r3, #84	; 0x54
 8002598:	2200      	movs	r2, #0
 800259a:	54f2      	strb	r2, [r6, r3]

          return HAL_TIMEOUT;
 800259c:	2003      	movs	r0, #3
 800259e:	e01e      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a4:	2201      	movs	r2, #1
 80025a6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025aa:	6831      	ldr	r1, [r6, #0]
 80025ac:	680b      	ldr	r3, [r1, #0]
 80025ae:	4c0e      	ldr	r4, [pc, #56]	; (80025e8 <UART_WaitOnFlagUntilTimeout+0xd8>)
 80025b0:	4023      	ands	r3, r4
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025bc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c0:	6831      	ldr	r1, [r6, #0]
 80025c2:	688b      	ldr	r3, [r1, #8]
 80025c4:	4393      	bics	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
 80025c8:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80025cc:	2320      	movs	r3, #32
 80025ce:	67b3      	str	r3, [r6, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80025d0:	67f3      	str	r3, [r6, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80025d2:	3354      	adds	r3, #84	; 0x54
 80025d4:	2200      	movs	r2, #0
 80025d6:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80025d8:	2003      	movs	r0, #3
 80025da:	e000      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xce>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
}
 80025de:	bcc0      	pop	{r6, r7}
 80025e0:	46b9      	mov	r9, r7
 80025e2:	46b0      	mov	r8, r6
 80025e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	fffffe5f 	.word	0xfffffe5f

080025ec <UART_CheckIdleState>:
{
 80025ec:	b530      	push	{r4, r5, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	2200      	movs	r2, #0
 80025f6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80025f8:	f7fe fc78 	bl	8000eec <HAL_GetTick>
 80025fc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025fe:	6822      	ldr	r2, [r4, #0]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	0713      	lsls	r3, r2, #28
 8002604:	d40d      	bmi.n	8002622 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	075b      	lsls	r3, r3, #29
 800260c:	d416      	bmi.n	800263c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800260e:	2320      	movs	r3, #32
 8002610:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002612:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002614:	2300      	movs	r3, #0
 8002616:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002618:	2274      	movs	r2, #116	; 0x74
 800261a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800261c:	2000      	movs	r0, #0
}
 800261e:	b003      	add	sp, #12
 8002620:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <UART_CheckIdleState+0x6c>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	0003      	movs	r3, r0
 800262a:	2200      	movs	r2, #0
 800262c:	0389      	lsls	r1, r1, #14
 800262e:	0020      	movs	r0, r4
 8002630:	f7ff ff6e 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8002634:	2800      	cmp	r0, #0
 8002636:	d0e6      	beq.n	8002606 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e7f0      	b.n	800261e <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <UART_CheckIdleState+0x6c>)
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	002b      	movs	r3, r5
 8002644:	2200      	movs	r2, #0
 8002646:	03c9      	lsls	r1, r1, #15
 8002648:	0020      	movs	r0, r4
 800264a:	f7ff ff61 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 800264e:	2800      	cmp	r0, #0
 8002650:	d0dd      	beq.n	800260e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8002652:	2003      	movs	r0, #3
 8002654:	e7e3      	b.n	800261e <UART_CheckIdleState+0x32>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	01ffffff 	.word	0x01ffffff

0800265c <HAL_UART_Init>:
{
 800265c:	b510      	push	{r4, lr}
 800265e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002660:	d02e      	beq.n	80026c0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002664:	2b00      	cmp	r3, #0
 8002666:	d021      	beq.n	80026ac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	2324      	movs	r3, #36	; 0x24
 800266a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	438b      	bics	r3, r1
 8002674:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002676:	0020      	movs	r0, r4
 8002678:	f7ff fda6 	bl	80021c8 <UART_SetConfig>
 800267c:	2801      	cmp	r0, #1
 800267e:	d014      	beq.n	80026aa <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6853      	ldr	r3, [r2, #4]
 800268a:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_UART_Init+0x68>)
 800268c:	400b      	ands	r3, r1
 800268e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6893      	ldr	r3, [r2, #8]
 8002694:	212a      	movs	r1, #42	; 0x2a
 8002696:	438b      	bics	r3, r1
 8002698:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	3929      	subs	r1, #41	; 0x29
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80026a4:	0020      	movs	r0, r4
 80026a6:	f7ff ffa1 	bl	80025ec <UART_CheckIdleState>
}
 80026aa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80026ac:	3374      	adds	r3, #116	; 0x74
 80026ae:	2200      	movs	r2, #0
 80026b0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80026b2:	f7fe fb21 	bl	8000cf8 <HAL_UART_MspInit>
 80026b6:	e7d7      	b.n	8002668 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80026b8:	0020      	movs	r0, r4
 80026ba:	f7ff feb9 	bl	8002430 <UART_AdvFeatureConfig>
 80026be:	e7e2      	b.n	8002686 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
 80026c2:	e7f2      	b.n	80026aa <HAL_UART_Init+0x4e>
 80026c4:	ffffb7ff 	.word	0xffffb7ff

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	2600      	movs	r6, #0
 80026cc:	4d0c      	ldr	r5, [pc, #48]	; (8002700 <__libc_init_array+0x38>)
 80026ce:	4c0d      	ldr	r4, [pc, #52]	; (8002704 <__libc_init_array+0x3c>)
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	2600      	movs	r6, #0
 80026da:	f000 f82b 	bl	8002734 <_init>
 80026de:	4d0a      	ldr	r5, [pc, #40]	; (8002708 <__libc_init_array+0x40>)
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <__libc_init_array+0x44>)
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	10a4      	asrs	r4, r4, #2
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	00b3      	lsls	r3, r6, #2
 80026ee:	58eb      	ldr	r3, [r5, r3]
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	00b3      	lsls	r3, r6, #2
 80026f8:	58eb      	ldr	r3, [r5, r3]
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	080027c0 	.word	0x080027c0
 8002704:	080027c0 	.word	0x080027c0
 8002708:	080027c0 	.word	0x080027c0
 800270c:	080027c4 	.word	0x080027c4

08002710 <memcpy>:
 8002710:	2300      	movs	r3, #0
 8002712:	b510      	push	{r4, lr}
 8002714:	429a      	cmp	r2, r3
 8002716:	d100      	bne.n	800271a <memcpy+0xa>
 8002718:	bd10      	pop	{r4, pc}
 800271a:	5ccc      	ldrb	r4, [r1, r3]
 800271c:	54c4      	strb	r4, [r0, r3]
 800271e:	3301      	adds	r3, #1
 8002720:	e7f8      	b.n	8002714 <memcpy+0x4>

08002722 <memset>:
 8002722:	0003      	movs	r3, r0
 8002724:	1882      	adds	r2, r0, r2
 8002726:	4293      	cmp	r3, r2
 8002728:	d100      	bne.n	800272c <memset+0xa>
 800272a:	4770      	bx	lr
 800272c:	7019      	strb	r1, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	e7f9      	b.n	8002726 <memset+0x4>
	...

08002734 <_init>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr

08002740 <_fini>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr
