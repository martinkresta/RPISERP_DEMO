
RPISERP_DEMO_L011.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d4  080031d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031dc  080031dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08003254  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08003254  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009968  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c68  00000000  00000000  00029a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bbf  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfd5  00000000  00000000  0003e0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065237  00000000  00000000  0004a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af2db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bbc  00000000  00000000  000af32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003144 	.word	0x08003144

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003144 	.word	0x08003144

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4647      	mov	r7, r8
 800043a:	b580      	push	{r7, lr}
 800043c:	0007      	movs	r7, r0
 800043e:	4699      	mov	r9, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	469c      	mov	ip, r3
 8000444:	0413      	lsls	r3, r2, #16
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	001d      	movs	r5, r3
 800044a:	000e      	movs	r6, r1
 800044c:	4661      	mov	r1, ip
 800044e:	0400      	lsls	r0, r0, #16
 8000450:	0c14      	lsrs	r4, r2, #16
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	4345      	muls	r5, r0
 8000456:	434b      	muls	r3, r1
 8000458:	4360      	muls	r0, r4
 800045a:	4361      	muls	r1, r4
 800045c:	18c0      	adds	r0, r0, r3
 800045e:	0c2c      	lsrs	r4, r5, #16
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4372      	muls	r2, r6
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	4463      	add	r3, ip
 800047a:	042d      	lsls	r5, r5, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	18c9      	adds	r1, r1, r3
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	1889      	adds	r1, r1, r2
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	469b      	mov	fp, r3
 80004c6:	d433      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c8:	465a      	mov	r2, fp
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83a      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e078      	b.n	80005d4 <__udivmoddi4+0x144>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e075      	b.n	80005da <__udivmoddi4+0x14a>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e028      	b.n	800055a <__udivmoddi4+0xca>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	4652      	mov	r2, sl
 8000538:	40da      	lsrs	r2, r3
 800053a:	4641      	mov	r1, r8
 800053c:	0013      	movs	r3, r2
 800053e:	464a      	mov	r2, r9
 8000540:	408a      	lsls	r2, r1
 8000542:	0017      	movs	r7, r2
 8000544:	4642      	mov	r2, r8
 8000546:	431f      	orrs	r7, r3
 8000548:	4653      	mov	r3, sl
 800054a:	4093      	lsls	r3, r2
 800054c:	001e      	movs	r6, r3
 800054e:	42af      	cmp	r7, r5
 8000550:	d9c4      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0d9      	beq.n	8000514 <__udivmoddi4+0x84>
 8000560:	07fb      	lsls	r3, r7, #31
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	431a      	orrs	r2, r3
 8000566:	4646      	mov	r6, r8
 8000568:	087b      	lsrs	r3, r7, #1
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xfa>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xe4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xfe>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0x108>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xdc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xfa>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	465b      	mov	r3, fp
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db24      	blt.n	80005f0 <__udivmoddi4+0x160>
 80005a6:	002b      	movs	r3, r5
 80005a8:	465a      	mov	r2, fp
 80005aa:	4644      	mov	r4, r8
 80005ac:	40d3      	lsrs	r3, r2
 80005ae:	002a      	movs	r2, r5
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	465b      	mov	r3, fp
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2a      	blt.n	8000612 <__udivmoddi4+0x182>
 80005bc:	0026      	movs	r6, r4
 80005be:	409e      	lsls	r6, r3
 80005c0:	0033      	movs	r3, r6
 80005c2:	0026      	movs	r6, r4
 80005c4:	4647      	mov	r7, r8
 80005c6:	40be      	lsls	r6, r7
 80005c8:	0032      	movs	r2, r6
 80005ca:	1a80      	subs	r0, r0, r2
 80005cc:	4199      	sbcs	r1, r3
 80005ce:	9000      	str	r0, [sp, #0]
 80005d0:	9101      	str	r1, [sp, #4]
 80005d2:	e79f      	b.n	8000514 <__udivmoddi4+0x84>
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d8bc      	bhi.n	8000552 <__udivmoddi4+0xc2>
 80005d8:	e783      	b.n	80004e2 <__udivmoddi4+0x52>
 80005da:	4642      	mov	r2, r8
 80005dc:	2320      	movs	r3, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	9100      	str	r1, [sp, #0]
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	e786      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	4646      	mov	r6, r8
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0023      	movs	r3, r4
 80005fe:	40f3      	lsrs	r3, r6
 8000600:	4644      	mov	r4, r8
 8000602:	4313      	orrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	dad4      	bge.n	80005bc <__udivmoddi4+0x12c>
 8000612:	4642      	mov	r2, r8
 8000614:	002f      	movs	r7, r5
 8000616:	2320      	movs	r3, #32
 8000618:	0026      	movs	r6, r4
 800061a:	4097      	lsls	r7, r2
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	40de      	lsrs	r6, r3
 8000620:	003b      	movs	r3, r7
 8000622:	4333      	orrs	r3, r6
 8000624:	e7cd      	b.n	80005c2 <__udivmoddi4+0x132>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <RSP_Init>:


// initialization of UART interface
// It is assumed that the linkage of DMA channel with UART is already done by CubeMX generated code !
void RSP_Init(UART_HandleTypeDef* Uart, DMA_Channel_TypeDef* TxDma, DMA_Channel_TypeDef* RxDma)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]

  mRspUart = Uart;
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <RSP_Init+0xc8>)
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	601a      	str	r2, [r3, #0]
  mTxDma = TxDma;
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <RSP_Init+0xcc>)
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	601a      	str	r2, [r3, #0]
  mRxDma = RxDma;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <RSP_Init+0xd0>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]


  mTransmitFifo = CB_Create(RSP_PACKET_SIZE, 10);
 800069a:	210a      	movs	r1, #10
 800069c:	200e      	movs	r0, #14
 800069e:	f000 fa1f 	bl	8000ae0 <CB_Create>
 80006a2:	0002      	movs	r2, r0
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <RSP_Init+0xd4>)
 80006a6:	601a      	str	r2, [r3, #0]
  if (mTransmitFifo == NULL)
  {
     // TBD error
  }
  mReceiveFifo = CB_Create(RSP_PACKET_SIZE, 10);
 80006a8:	210a      	movs	r1, #10
 80006aa:	200e      	movs	r0, #14
 80006ac:	f000 fa18 	bl	8000ae0 <CB_Create>
 80006b0:	0002      	movs	r2, r0
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <RSP_Init+0xd8>)
 80006b4:	601a      	str	r2, [r3, #0]
  if (mReceiveFifo == NULL)
  {
      // TBD error
  }

  InitUartPeripheral();
 80006b6:	f000 f8d9 	bl	800086c <InitUartPeripheral>

  mTxBusy = false;
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <RSP_Init+0xdc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  mRxBusy = false;
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <RSP_Init+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]

  // enable receiver

  //configure RX DMA
  mRxDma->CCR = DMA_CCR_MINC;  // memory auto increment, no rx DMA interupts are enabled
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <RSP_Init+0xd0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	601a      	str	r2, [r3, #0]
  mRxDma->CPAR = (uint32_t)(&(Uart->Instance->RDR));
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3324      	adds	r3, #36	; 0x24
 80006d4:	001a      	movs	r2, r3
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <RSP_Init+0xd0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	609a      	str	r2, [r3, #8]
  mRxDma->CMAR = (uint32_t)(mRxData);
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <RSP_Init+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <RSP_Init+0xe4>)
 80006e2:	60da      	str	r2, [r3, #12]
  StartReciever();
 80006e4:	f000 f8f8 	bl	80008d8 <StartReciever>

  // configure TX DMA
  mTxDma->CCR = DMA_CCR_MINC | DMA_CCR_TCIE | DMA_CCR_DIR;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <RSP_Init+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2292      	movs	r2, #146	; 0x92
 80006ee:	601a      	str	r2, [r3, #0]
  mTxDma->CMAR = (uint32_t)(mTxData);
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <RSP_Init+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <RSP_Init+0xe8>)
 80006f6:	60da      	str	r2, [r3, #12]
  mTxDma->CPAR = (uint32_t)(&(Uart->Instance->TDR));
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3328      	adds	r3, #40	; 0x28
 80006fe:	001a      	movs	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <RSP_Init+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	609a      	str	r2, [r3, #8]


  mRspUart->Instance->CR1 &= ~USART_CR1_UE;  // disable uart
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <RSP_Init+0xc8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <RSP_Init+0xc8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2101      	movs	r1, #1
 8000716:	438a      	bics	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
  mRspUart->Instance->CR2 = 0x00;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <RSP_Init+0xc8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  mRspUart->Instance->CR3 = USART_CR3_OVRDIS| USART_CR3_DMAR | USART_CR3_DMAT;  // enable DMAs
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <RSP_Init+0xc8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2286      	movs	r2, #134	; 0x86
 800072c:	0152      	lsls	r2, r2, #5
 800072e:	609a      	str	r2, [r3, #8]
  mRspUart->Instance->CR1 = USART_CR1_IDLEIE | USART_CR1_RE | USART_CR1_UE;  // Idle interrupt enabled
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <RSP_Init+0xc8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2215      	movs	r2, #21
 8000738:	601a      	str	r2, [r3, #0]

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b004      	add	sp, #16
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000094 	.word	0x20000094
 8000748:	20000098 	.word	0x20000098
 800074c:	2000009c 	.word	0x2000009c
 8000750:	2000008c 	.word	0x2000008c
 8000754:	20000090 	.word	0x20000090
 8000758:	200000a0 	.word	0x200000a0
 800075c:	200000a1 	.word	0x200000a1
 8000760:	200000a4 	.word	0x200000a4
 8000764:	200000b4 	.word	0x200000b4

08000768 <RSP_Send>:


void RSP_Send(uint8_t* data, uint8_t length)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	000a      	movs	r2, r1
 8000772:	1cfb      	adds	r3, r7, #3
 8000774:	701a      	strb	r2, [r3, #0]
  uint8_t txPacket[RSP_PACKET_SIZE];
  if (length <= RSP_PACKET_SIZE - 4)
 8000776:	1cfb      	adds	r3, r7, #3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0a      	cmp	r3, #10
 800077c:	d829      	bhi.n	80007d2 <RSP_Send+0x6a>
  {
    txPacket[0] = RSP_MSG_START_B1;
 800077e:	2508      	movs	r5, #8
 8000780:	197b      	adds	r3, r7, r5
 8000782:	227f      	movs	r2, #127	; 0x7f
 8000784:	701a      	strb	r2, [r3, #0]
    txPacket[1] = RSP_MSG_START_B2;
 8000786:	197b      	adds	r3, r7, r5
 8000788:	22aa      	movs	r2, #170	; 0xaa
 800078a:	705a      	strb	r2, [r3, #1]
    txPacket[2] = length;
 800078c:	197b      	adds	r3, r7, r5
 800078e:	1cfa      	adds	r2, r7, #3
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	709a      	strb	r2, [r3, #2]
    memcpy(&(txPacket[3]), data, length);
 8000794:	1cfb      	adds	r3, r7, #3
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	197b      	adds	r3, r7, r5
 800079c:	3303      	adds	r3, #3
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fc02 	bl	8002fa8 <memcpy>
    txPacket[length + 3] = Checksum(txPacket, length +3 );
 80007a4:	1cfb      	adds	r3, r7, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3303      	adds	r3, #3
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	1cfb      	adds	r3, r7, #3
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	1cdc      	adds	r4, r3, #3
 80007b2:	197b      	adds	r3, r7, r5
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f8ee 	bl	8000998 <Checksum>
 80007bc:	0003      	movs	r3, r0
 80007be:	001a      	movs	r2, r3
 80007c0:	197b      	adds	r3, r7, r5
 80007c2:	551a      	strb	r2, [r3, r4]
    CB_Put(mTransmitFifo, txPacket);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <RSP_Send+0x74>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	197a      	adds	r2, r7, r5
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fa0f 	bl	8000bf0 <CB_Put>
  }
  else
  {
    // TBD error
  }
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b006      	add	sp, #24
 80007d8:	bdb0      	pop	{r4, r5, r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	2000008c 	.word	0x2000008c

080007e0 <RSP_TransmitFromFifo>:


// function to be called periodically from the scheduler (i.e every 5ms)
void RSP_TransmitFromFifo(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  if(mTxBusy == true)  // if transmitter is busy return
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <RSP_TransmitFromFifo+0x34>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d110      	bne.n	800080e <RSP_TransmitFromFifo+0x2e>
  {
    return;
  }

  if(0 == CB_Get(mTransmitFifo, mTxData))  // if some packet is found in Tx fifo
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <RSP_TransmitFromFifo+0x38>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <RSP_TransmitFromFifo+0x3c>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 f9be 	bl	8000b76 <CB_Get>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d108      	bne.n	8000810 <RSP_TransmitFromFifo+0x30>
  {
    StartTransmiter(mTxData[2] + 4); // size = num of databytes + 2 header bytes + length byte + checksum
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <RSP_TransmitFromFifo+0x3c>)
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	3304      	adds	r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f88a 	bl	8000920 <StartTransmiter>
 800080c:	e000      	b.n	8000810 <RSP_TransmitFromFifo+0x30>
    return;
 800080e:	46c0      	nop			; (mov r8, r8)
  }
}
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000a0 	.word	0x200000a0
 8000818:	2000008c 	.word	0x2000008c
 800081c:	200000b4 	.word	0x200000b4

08000820 <RSP_GetMessage>:


bool RSP_GetMessage(uint8_t* data, uint8_t* length)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint8_t rxPacket[RSP_PACKET_SIZE];
  if (0 == CB_Get(mReceiveFifo, rxPacket))
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <RSP_GetMessage+0x48>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2408      	movs	r4, #8
 8000830:	193a      	adds	r2, r7, r4
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f99e 	bl	8000b76 <CB_Get>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d10e      	bne.n	800085c <RSP_GetMessage+0x3c>
  {
    *length = rxPacket[0];
 800083e:	193b      	adds	r3, r7, r4
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	701a      	strb	r2, [r3, #0]
    memcpy(data ,&(rxPacket[1]),rxPacket[0]);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001a      	movs	r2, r3
 800084c:	193b      	adds	r3, r7, r4
 800084e:	1c59      	adds	r1, r3, #1
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	0018      	movs	r0, r3
 8000854:	f002 fba8 	bl	8002fa8 <memcpy>
    return true;
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <RSP_GetMessage+0x3e>
  }
  else
  {
    return false;
 800085c:	2300      	movs	r3, #0
  }
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b007      	add	sp, #28
 8000864:	bd90      	pop	{r4, r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000090 	.word	0x20000090

0800086c <InitUartPeripheral>:



void InitUartPeripheral(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
 // mRspUart->Instance = USART2;
  mRspUart->Init.BaudRate = RSP_BAUD_RATE;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <InitUartPeripheral+0x68>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	22e1      	movs	r2, #225	; 0xe1
 8000876:	0252      	lsls	r2, r2, #9
 8000878:	605a      	str	r2, [r3, #4]
  mRspUart->Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <InitUartPeripheral+0x68>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  mRspUart->Init.StopBits = UART_STOPBITS_1;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <InitUartPeripheral+0x68>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  mRspUart->Init.Parity = UART_PARITY_NONE;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <InitUartPeripheral+0x68>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  mRspUart->Init.Mode = UART_MODE_TX_RX;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <InitUartPeripheral+0x68>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  mRspUart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <InitUartPeripheral+0x68>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  mRspUart->Init.OverSampling = UART_OVERSAMPLING_16;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <InitUartPeripheral+0x68>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  mRspUart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <InitUartPeripheral+0x68>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  mRspUart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <InitUartPeripheral+0x68>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(mRspUart) != HAL_OK)
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <InitUartPeripheral+0x68>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fee0 	bl	8002684 <HAL_UART_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <InitUartPeripheral+0x60>
  {
    Error_Handler();
 80008c8:	f000 fb08 	bl	8000edc <Error_Handler>
  }
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000094 	.word	0x20000094

080008d8 <StartReciever>:


void StartReciever(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  mRxDma->CNDTR = RSP_PACKET_SIZE;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <StartReciever+0x3c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	220e      	movs	r2, #14
 80008e2:	605a      	str	r2, [r3, #4]
  mRxDma->CCR |= DMA_CCR_EN;  // enable DMA channel
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <StartReciever+0x3c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <StartReciever+0x3c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2101      	movs	r1, #1
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
  mRspUart->Instance->CR1 |= USART_CR1_IDLEIE | USART_CR1_RE | USART_CR1_UE;  // Idle interrupt enabled
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <StartReciever+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <StartReciever+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2115      	movs	r1, #21
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
  mRxBusy = true;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <StartReciever+0x44>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000009c 	.word	0x2000009c
 8000918:	20000094 	.word	0x20000094
 800091c:	200000a1 	.word	0x200000a1

08000920 <StartTransmiter>:

void StartTransmiter(uint8_t size)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	701a      	strb	r2, [r3, #0]
  if (size <= RSP_PACKET_SIZE)
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b0e      	cmp	r3, #14
 8000932:	d826      	bhi.n	8000982 <StartTransmiter+0x62>
  {
    mTxBusy = true;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <StartTransmiter+0x6c>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
    mTxDma->CCR &= ~DMA_CCR_EN;  // disable dma
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <StartTransmiter+0x70>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <StartTransmiter+0x70>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2101      	movs	r1, #1
 8000946:	438a      	bics	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
    mTxDma->CNDTR = size;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <StartTransmiter+0x70>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1dfa      	adds	r2, r7, #7
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	605a      	str	r2, [r3, #4]
    mRspUart->Instance->ICR = USART_ICR_TCCF;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <StartTransmiter+0x74>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	621a      	str	r2, [r3, #32]
    mTxDma->CCR |= DMA_CCR_EN;  // enable DMA channel
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <StartTransmiter+0x70>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <StartTransmiter+0x70>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]
    mRspUart->Instance->CR1 |= USART_CR1_TCIE | USART_CR1_TE | USART_CR1_UE;  // TCinterrupt enabled
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <StartTransmiter+0x74>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <StartTransmiter+0x74>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2149      	movs	r1, #73	; 0x49
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
  }
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	200000a0 	.word	0x200000a0
 8000990:	20000098 	.word	0x20000098
 8000994:	20000094 	.word	0x20000094

08000998 <Checksum>:


uint8_t Checksum(uint8_t* data, uint8_t length)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	000a      	movs	r2, r1
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	701a      	strb	r2, [r3, #0]
  uint8_t i,chsum;
  chsum = 0;
 80009a6:	230e      	movs	r3, #14
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  for(i = 0;i < length; i++)
 80009ae:	230f      	movs	r3, #15
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e010      	b.n	80009da <Checksum+0x42>
  {
    chsum += data[i];
 80009b8:	200f      	movs	r0, #15
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	220e      	movs	r2, #14
 80009c6:	18bb      	adds	r3, r7, r2
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	188a      	adds	r2, r1, r2
 80009ce:	701a      	strb	r2, [r3, #0]
  for(i = 0;i < length; i++)
 80009d0:	183b      	adds	r3, r7, r0
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	3201      	adds	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	230f      	movs	r3, #15
 80009dc:	18fa      	adds	r2, r7, r3
 80009de:	1cfb      	adds	r3, r7, #3
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d3e7      	bcc.n	80009b8 <Checksum+0x20>
  }
  return chsum;
 80009e8:	230e      	movs	r3, #14
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	781b      	ldrb	r3, [r3, #0]
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USART2_IRQHandler>:


/* Hard-coded IRQ handlers of DMA channels and UART*/

void USART2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  if (mRspUart->Instance->ISR & USART_ISR_IDLE)   // Rx Idle interrupt
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <USART2_IRQHandler+0x94>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	2210      	movs	r2, #16
 8000a08:	4013      	ands	r3, r2
 8000a0a:	d02c      	beq.n	8000a66 <USART2_IRQHandler+0x6e>
  {
    uint8_t rxSize = RSP_PACKET_SIZE - mRxDma->CNDTR;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <USART2_IRQHandler+0x98>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	210e      	movs	r1, #14
 8000a18:	1a8a      	subs	r2, r1, r2
 8000a1a:	701a      	strb	r2, [r3, #0]
    mRxDma->CCR &= ~DMA_CCR_EN; // disable the DMA channel even when it is not completed transfer
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <USART2_IRQHandler+0x98>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <USART2_IRQHandler+0x98>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2101      	movs	r1, #1
 8000a28:	438a      	bics	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
    mRspUart->Instance->ICR = USART_ICR_IDLECF;  // clear the IDLE flag
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <USART2_IRQHandler+0x94>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2210      	movs	r2, #16
 8000a34:	621a      	str	r2, [r3, #32]
    if(mRxData[0] == RSP_MSG_START_B1  && mRxData[1] == RSP_MSG_START_B2)
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <USART2_IRQHandler+0x9c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3c:	d111      	bne.n	8000a62 <USART2_IRQHandler+0x6a>
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <USART2_IRQHandler+0x9c>)
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	2baa      	cmp	r3, #170	; 0xaa
 8000a44:	d10d      	bne.n	8000a62 <USART2_IRQHandler+0x6a>
    {
      if (rxSize == mRxData[2] + 4)   // if full packet was received
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <USART2_IRQHandler+0x9c>)
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d106      	bne.n	8000a62 <USART2_IRQHandler+0x6a>
      {
        // check checksum
       // if(mRxData[rxSize - 1] == Checksum(mRxData, rxSize-1))
       // {
          CB_Put(mReceiveFifo, &(mRxData[2]));
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <USART2_IRQHandler+0xa0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <USART2_IRQHandler+0xa4>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 f8c7 	bl	8000bf0 <CB_Put>
      //  }
      }
    }

    // reenable the receiver for next packet reception
    StartReciever();
 8000a62:	f7ff ff39 	bl	80008d8 <StartReciever>
  }

  if (mRspUart->Instance->ISR & USART_ISR_TC)   // Transfer Complete
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <USART2_IRQHandler+0x94>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	2240      	movs	r2, #64	; 0x40
 8000a70:	4013      	ands	r3, r2
 8000a72:	d007      	beq.n	8000a84 <USART2_IRQHandler+0x8c>
  {
    mRspUart->Instance->ICR = USART_ICR_TCCF; // clear the TC flag
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <USART2_IRQHandler+0x94>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	621a      	str	r2, [r3, #32]
    mTxBusy = false;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <USART2_IRQHandler+0xa8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
  }
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000094 	.word	0x20000094
 8000a90:	2000009c 	.word	0x2000009c
 8000a94:	200000a4 	.word	0x200000a4
 8000a98:	20000090 	.word	0x20000090
 8000a9c:	200000a6 	.word	0x200000a6
 8000aa0:	200000a0 	.word	0x200000a0

08000aa4 <DMA1_Channel4_5_IRQHandler>:

/* TX DMA*/
//void DMA1_Channel4_IRQHandler(void)
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  mTxDma->CCR &= ~DMA_CCR_EN;  // disable the interrupt
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <DMA1_Channel4_5_IRQHandler+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <DMA1_Channel4_5_IRQHandler+0x30>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	438a      	bics	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
  DMA1->IFCR |= DMA_IFCR_CGIF4;  // clear all DMA flags
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <DMA1_Channel4_5_IRQHandler+0x34>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <DMA1_Channel4_5_IRQHandler+0x34>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	0149      	lsls	r1, r1, #5
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	605a      	str	r2, [r3, #4]
  mTxBusy = false;
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <DMA1_Channel4_5_IRQHandler+0x38>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	200000a0 	.word	0x200000a0

08000ae0 <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	1c0a      	adds	r2, r1, #0
 8000af0:	801a      	strh	r2, [r3, #0]
	CB_handle cb = malloc(sizeof(s_CB)); 
 8000af2:	2010      	movs	r0, #16
 8000af4:	f002 fa4e 	bl	8002f94 <malloc>
 8000af8:	0003      	movs	r3, r0
 8000afa:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	4353      	muls	r3, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 fa44 	bl	8002f94 <malloc>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	001a      	movs	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	601a      	str	r2, [r3, #0]
	cb->length = length;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1d3a      	adds	r2, r7, #4
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2200      	movs	r2, #0
 8000b26:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1dfa      	adds	r2, r7, #7
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00e      	beq.n	8000b6c <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7b1b      	ldrb	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d107      	bne.n	8000b66 <CB_IsEmpty+0x26>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	891a      	ldrh	r2, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	895b      	ldrh	r3, [r3, #10]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d101      	bne.n	8000b66 <CB_IsEmpty+0x26>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <CB_IsEmpty+0x28>
 8000b66:	2300      	movs	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	e000      	b.n	8000b6e <CB_IsEmpty+0x2e>
	}
	return 1; 
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <CB_Get>:

}


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d02f      	beq.n	8000be6 <CB_Get+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b86:	b672      	cpsid	i
}
 8000b88:	46c0      	nop			; (mov r8, r8)
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ffd7 	bl	8000b40 <CB_IsEmpty>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d123      	bne.n	8000bde <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	8952      	ldrh	r2, [r2, #10]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	7912      	ldrb	r2, [r2, #4]
 8000ba4:	434a      	muls	r2, r1
 8000ba6:	1899      	adds	r1, r3, r2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	001a      	movs	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 f9f9 	bl	8002fa8 <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	895b      	ldrh	r3, [r3, #10]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	88db      	ldrh	r3, [r3, #6]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	f7ff fc10 	bl	80003e8 <__aeabi_idivmod>
 8000bc8:	000b      	movs	r3, r1
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd6:	b662      	cpsie	i
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
				__enable_irq();
				return 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e004      	b.n	8000be8 <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bde:	b662      	cpsie	i
}
 8000be0:	46c0      	nop			; (mov r8, r8)

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 8000be6:	2301      	movs	r3, #1

}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d03a      	beq.n	8000c76 <CB_Put+0x86>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	8912      	ldrh	r2, [r2, #8]
 8000c08:	0011      	movs	r1, r2
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	7912      	ldrb	r2, [r2, #4]
 8000c0e:	434a      	muls	r2, r1
 8000c10:	1898      	adds	r0, r3, r2
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	791b      	ldrb	r3, [r3, #4]
 8000c16:	001a      	movs	r2, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f002 f9c4 	bl	8002fa8 <memcpy>
		if(cb->full)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7b1b      	ldrb	r3, [r3, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00c      	beq.n	8000c42 <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	895b      	ldrh	r3, [r3, #10]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	88db      	ldrh	r3, [r3, #6]
 8000c32:	0019      	movs	r1, r3
 8000c34:	0010      	movs	r0, r2
 8000c36:	f7ff fbd7 	bl	80003e8 <__aeabi_idivmod>
 8000c3a:	000b      	movs	r3, r1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	891b      	ldrh	r3, [r3, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	88db      	ldrh	r3, [r3, #6]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0010      	movs	r0, r2
 8000c50:	f7ff fbca 	bl	80003e8 <__aeabi_idivmod>
 8000c54:	000b      	movs	r3, r1
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	891a      	ldrh	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	895b      	ldrh	r3, [r3, #10]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	425a      	negs	r2, r3
 8000c68:	4153      	adcs	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	731a      	strb	r2, [r3, #12]

		return 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <CB_Put+0x88>
	}
	else
	{
		return 1;
 8000c76:	2301      	movs	r3, #1
	}
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_DMA_Init+0x38>)
 8000c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_DMA_Init+0x38>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	631a      	str	r2, [r3, #48]	; 0x30
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_DMA_Init+0x38>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	200b      	movs	r0, #11
 8000ca4:	f000 fbe0 	bl	8001468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f000 fbf2 	bl	8001492 <HAL_NVIC_EnableIRQ>

}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	240c      	movs	r4, #12
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	2314      	movs	r3, #20
 8000cca:	001a      	movs	r2, r3
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f002 f974 	bl	8002fba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000cd8:	2104      	movs	r1, #4
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000d08:	2102      	movs	r1, #2
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_GPIO_Init+0x98>)
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	2202      	movs	r2, #2
 8000d14:	4013      	ands	r3, r2
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_GPIO_Init+0x9c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2108      	movs	r1, #8
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fdb1 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2201      	movs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <MX_GPIO_Init+0x9c>)
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f000 fc38 	bl	80015bc <HAL_GPIO_Init>

}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b009      	add	sp, #36	; 0x24
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	50000400 	.word	0x50000400

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f000 fa41 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f847 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f7ff ffa7 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6e:	f7ff ff87 	bl	8000c80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d72:	f000 f91b 	bl	8000fac <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  RSP_Init(&huart2, hdma_usart2_tx.Instance, hdma_usart2_rx.Instance);
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <main+0x88>)
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <main+0x8c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <main+0x90>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fc7b 	bl	800067c <RSP_Init>

  uint8_t payload[] = {0xAB, 0xCD, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 8000d86:	2318      	movs	r3, #24
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <main+0x94>)
 8000d8c:	ca03      	ldmia	r2!, {r0, r1}
 8000d8e:	c303      	stmia	r3!, {r0, r1}
 8000d90:	8812      	ldrh	r2, [r2, #0]
 8000d92:	801a      	strh	r2, [r3, #0]

  uint8_t  rxData[20];
  uint8_t reclen;
  uint32_t txPeriod_ms = 1000;
 8000d94:	23fa      	movs	r3, #250	; 0xfa
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24

  while (1)
  {
    HAL_Delay(txPeriod_ms);
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fa93 	bl	80012c8 <HAL_Delay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <main+0x98>)
 8000da4:	2108      	movs	r1, #8
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fd8b 	bl	80018c2 <HAL_GPIO_TogglePin>

    RSP_Send(payload, 10);
 8000dac:	2318      	movs	r3, #24
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	210a      	movs	r1, #10
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff fcd8 	bl	8000768 <RSP_Send>


    // TBD move to scheduler
    RSP_TransmitFromFifo();
 8000db8:	f7ff fd12 	bl	80007e0 <RSP_TransmitFromFifo>

    if(true == RSP_GetMessage(rxData, &reclen))
 8000dbc:	1cfa      	adds	r2, r7, #3
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff fd2c 	bl	8000820 <RSP_GetMessage>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d0e6      	beq.n	8000d9a <main+0x3e>
    {
      if(reclen > 2)
 8000dcc:	1cfb      	adds	r3, r7, #3
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d9e2      	bls.n	8000d9a <main+0x3e>
      {
        txPeriod_ms = rxData[0] * 5;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_Delay(txPeriod_ms);
 8000de2:	e7da      	b.n	8000d9a <main+0x3e>
 8000de4:	20000194 	.word	0x20000194
 8000de8:	2000014c 	.word	0x2000014c
 8000dec:	200000c8 	.word	0x200000c8
 8000df0:	0800315c 	.word	0x0800315c
 8000df4:	50000400 	.word	0x50000400

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b099      	sub	sp, #100	; 0x64
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	242c      	movs	r4, #44	; 0x2c
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	0018      	movs	r0, r3
 8000e04:	2334      	movs	r3, #52	; 0x34
 8000e06:	001a      	movs	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f002 f8d6 	bl	8002fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0e:	2318      	movs	r3, #24
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	0018      	movs	r0, r3
 8000e14:	2314      	movs	r3, #20
 8000e16:	001a      	movs	r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f002 f8ce 	bl	8002fba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1e:	003b      	movs	r3, r7
 8000e20:	0018      	movs	r0, r3
 8000e22:	2318      	movs	r3, #24
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f002 f8c7 	bl	8002fba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <SystemClock_Config+0xdc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <SystemClock_Config+0xe0>)
 8000e32:	401a      	ands	r2, r3
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SystemClock_Config+0xdc>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	0109      	lsls	r1, r1, #4
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3e:	0021      	movs	r1, r4
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2202      	movs	r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2210      	movs	r2, #16
 8000e50:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2202      	movs	r2, #2
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	02d2      	lsls	r2, r2, #11
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	03d2      	lsls	r2, r2, #15
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 fd41 	bl	80018f8 <HAL_RCC_OscConfig>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000e7a:	f000 f82f 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	2118      	movs	r1, #24
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	220f      	movs	r2, #15
 8000e84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 f8a4 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000eac:	f000 f816 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 faba 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ec8:	f000 f808 	bl	8000edc <Error_Handler>
  }
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b019      	add	sp, #100	; 0x64
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	ffffe7ff 	.word	0xffffe7ff

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_MspInit+0x24>)
 8000eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x24>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_MspInit+0x24>)
 8000efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_MspInit+0x24>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0549      	lsls	r1, r1, #21
 8000f02:	430a      	orrs	r2, r1
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f9ac 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f001 ffe6 	bl	8002f40 <__errno>
 8000f74:	0003      	movs	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	18d2      	adds	r2, r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000800 	.word	0x20000800
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200000c4 	.word	0x200000c4
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_USART2_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb8:	22e1      	movs	r2, #225	; 0xe1
 8000fba:	0252      	lsls	r2, r2, #9
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f001 fb47 	bl	8002684 <HAL_UART_Init>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f7ff ff6f 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000c8 	.word	0x200000c8
 8001008:	40004400 	.word	0x40004400

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	240c      	movs	r4, #12
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f001 ffcb 	bl	8002fba <memset>
  if(uartHandle->Instance==USART2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_UART_MspInit+0x134>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d000      	beq.n	8001030 <HAL_UART_MspInit+0x24>
 800102e:	e083      	b.n	8001138 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001030:	4b44      	ldr	r3, [pc, #272]	; (8001144 <HAL_UART_MspInit+0x138>)
 8001032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_UART_MspInit+0x138>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0289      	lsls	r1, r1, #10
 800103a:	430a      	orrs	r2, r1
 800103c:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_UART_MspInit+0x138>)
 8001040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_UART_MspInit+0x138>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <HAL_UART_MspInit+0x138>)
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001056:	0021      	movs	r1, r4
 8001058:	187b      	adds	r3, r7, r1
 800105a:	4a3b      	ldr	r2, [pc, #236]	; (8001148 <HAL_UART_MspInit+0x13c>)
 800105c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2202      	movs	r2, #2
 8001062:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2203      	movs	r2, #3
 800106e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2204      	movs	r2, #4
 8001074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	187a      	adds	r2, r7, r1
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fa9c 	bl	80015bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_UART_MspInit+0x140>)
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <HAL_UART_MspInit+0x144>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_UART_MspInit+0x140>)
 800108c:	2204      	movs	r2, #4
 800108e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_UART_MspInit+0x140>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_UART_MspInit+0x140>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_UART_MspInit+0x140>)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_UART_MspInit+0x140>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <HAL_UART_MspInit+0x140>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_UART_MspInit+0x140>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_UART_MspInit+0x140>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_UART_MspInit+0x140>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 fa05 	bl	80014cc <HAL_DMA_Init>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80010c6:	f7ff ff09 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_UART_MspInit+0x140>)
 80010ce:	671a      	str	r2, [r3, #112]	; 0x70
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_UART_MspInit+0x140>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010d8:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_UART_MspInit+0x14c>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010de:	2204      	movs	r2, #4
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010e4:	2210      	movs	r2, #16
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_UART_MspInit+0x148>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0x148>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_UART_MspInit+0x148>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0x148>)
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f9dc 	bl	80014cc <HAL_DMA_Init>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001118:	f7ff fee0 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_UART_MspInit+0x148>)
 8001120:	66da      	str	r2, [r3, #108]	; 0x6c
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_UART_MspInit+0x148>)
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	201c      	movs	r0, #28
 800112e:	f000 f99b 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001132:	201c      	movs	r0, #28
 8001134:	f000 f9ad 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b009      	add	sp, #36	; 0x24
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	40004400 	.word	0x40004400
 8001144:	40021000 	.word	0x40021000
 8001148:	00008004 	.word	0x00008004
 800114c:	2000014c 	.word	0x2000014c
 8001150:	40020058 	.word	0x40020058
 8001154:	20000194 	.word	0x20000194
 8001158:	40020044 	.word	0x40020044

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001162:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001164:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <LoopForever+0xa>)
    CMP R1, R2
 8001168:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800116a:	d105      	bne.n	8001178 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800116e:	4913      	ldr	r1, [pc, #76]	; (80011bc <LoopForever+0x12>)
    STR R1, [R0]
 8001170:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001174:	4913      	ldr	r1, [pc, #76]	; (80011c4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001176:	6001      	str	r1, [r0, #0]

08001178 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800117a:	4914      	ldr	r1, [pc, #80]	; (80011cc <LoopForever+0x22>)
  ldr r2, =_sidata
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <LoopForever+0x26>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001190:	4c11      	ldr	r4, [pc, #68]	; (80011d8 <LoopForever+0x2e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800119e:	f000 f81e 	bl	80011de <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f001 fed3 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fdd9 	bl	8000d5c <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
   ldr   r0, =_estack
 80011ac:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80011b0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80011b4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80011b8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80011bc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80011c0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011c4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d0:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 80011d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d8:	200001f0 	.word	0x200001f0

080011dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_COMP_IRQHandler>

080011de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x3c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Init+0x3c>)
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f811 	bl	8001228 <HAL_InitTick>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d003      	beq.n	8001212 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e001      	b.n	8001216 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001212:	f7ff fe69 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_InitTick+0x5c>)
 8001232:	681c      	ldr	r4, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	23fa      	movs	r3, #250	; 0xfa
 800123c:	0098      	lsls	r0, r3, #2
 800123e:	f7fe ff63 	bl	8000108 <__udivsi3>
 8001242:	0003      	movs	r3, r0
 8001244:	0019      	movs	r1, r3
 8001246:	0020      	movs	r0, r4
 8001248:	f7fe ff5e 	bl	8000108 <__udivsi3>
 800124c:	0003      	movs	r3, r0
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f92f 	bl	80014b2 <HAL_SYSTICK_Config>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e00f      	b.n	800127c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d80b      	bhi.n	800127a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2301      	movs	r3, #1
 8001266:	425b      	negs	r3, r3
 8001268:	2200      	movs	r2, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f8fc 	bl	8001468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_InitTick+0x64>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b003      	add	sp, #12
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	001a      	movs	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	18d2      	adds	r2, r2, r3
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_IncTick+0x20>)
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200001dc 	.word	0x200001dc

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	200001dc 	.word	0x200001dc

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	001a      	movs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	f7ff ffe0 	bl	80012b4 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000008 	.word	0x20000008

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	0002      	movs	r2, r0
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b7f      	cmp	r3, #127	; 0x7f
 8001322:	d809      	bhi.n	8001338 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	231f      	movs	r3, #31
 800132c:	401a      	ands	r2, r3
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_EnableIRQ+0x30>)
 8001330:	2101      	movs	r1, #1
 8001332:	4091      	lsls	r1, r2
 8001334:	000a      	movs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
  }
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	0002      	movs	r2, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b7f      	cmp	r3, #127	; 0x7f
 8001358:	d828      	bhi.n	80013ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <__NVIC_SetPriority+0xd4>)
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	33c0      	adds	r3, #192	; 0xc0
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	589b      	ldr	r3, [r3, r2]
 800136a:	1dfa      	adds	r2, r7, #7
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	0011      	movs	r1, r2
 8001370:	2203      	movs	r2, #3
 8001372:	400a      	ands	r2, r1
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	21ff      	movs	r1, #255	; 0xff
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	43d2      	mvns	r2, r2
 800137e:	401a      	ands	r2, r3
 8001380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	401a      	ands	r2, r3
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	0018      	movs	r0, r3
 8001390:	2303      	movs	r3, #3
 8001392:	4003      	ands	r3, r0
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001398:	481f      	ldr	r0, [pc, #124]	; (8001418 <__NVIC_SetPriority+0xd4>)
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013aa:	e031      	b.n	8001410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <__NVIC_SetPriority+0xd8>)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0019      	movs	r1, r3
 80013b4:	230f      	movs	r3, #15
 80013b6:	400b      	ands	r3, r1
 80013b8:	3b08      	subs	r3, #8
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3306      	adds	r3, #6
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	3304      	adds	r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1dfa      	adds	r2, r7, #7
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	0011      	movs	r1, r2
 80013cc:	2203      	movs	r2, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	401a      	ands	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	4003      	ands	r3, r0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <__NVIC_SetPriority+0xd8>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	001c      	movs	r4, r3
 80013fc:	230f      	movs	r3, #15
 80013fe:	4023      	ands	r3, r4
 8001400:	3b08      	subs	r3, #8
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	430a      	orrs	r2, r1
 8001406:	3306      	adds	r3, #6
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	18c3      	adds	r3, r0, r3
 800140c:	3304      	adds	r3, #4
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b003      	add	sp, #12
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	1e5a      	subs	r2, r3, #1
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	045b      	lsls	r3, r3, #17
 8001430:	429a      	cmp	r2, r3
 8001432:	d301      	bcc.n	8001438 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001434:	2301      	movs	r3, #1
 8001436:	e010      	b.n	800145a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <SysTick_Config+0x44>)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	3a01      	subs	r2, #1
 800143e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001440:	2301      	movs	r3, #1
 8001442:	425b      	negs	r3, r3
 8001444:	2103      	movs	r1, #3
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff ff7c 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x44>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x44>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	210f      	movs	r1, #15
 8001474:	187b      	adds	r3, r7, r1
 8001476:	1c02      	adds	r2, r0, #0
 8001478:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	187b      	adds	r3, r7, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	0002      	movs	r2, r0
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff33 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ffaf 	bl	8001420 <SysTick_Config>
 80014c2:	0003      	movs	r3, r0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e061      	b.n	80015a2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_DMA_Init+0xe0>)
 80014e4:	4694      	mov	ip, r2
 80014e6:	4463      	add	r3, ip
 80014e8:	2114      	movs	r1, #20
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe fe0c 	bl	8000108 <__udivsi3>
 80014f0:	0003      	movs	r3, r0
 80014f2:	009a      	lsls	r2, r3, #2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <HAL_DMA_Init+0xe4>)
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2225      	movs	r2, #37	; 0x25
 8001502:	2102      	movs	r1, #2
 8001504:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_DMA_Init+0xe8>)
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	01db      	lsls	r3, r3, #7
 8001554:	429a      	cmp	r2, r3
 8001556:	d018      	beq.n	800158a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_DMA_Init+0xec>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	211c      	movs	r1, #28
 8001562:	400b      	ands	r3, r1
 8001564:	210f      	movs	r1, #15
 8001566:	4099      	lsls	r1, r3
 8001568:	000b      	movs	r3, r1
 800156a:	43d9      	mvns	r1, r3
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_DMA_Init+0xec>)
 800156e:	400a      	ands	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_DMA_Init+0xec>)
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	201c      	movs	r0, #28
 8001580:	4003      	ands	r3, r0
 8001582:	409a      	lsls	r2, r3
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_DMA_Init+0xec>)
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2225      	movs	r2, #37	; 0x25
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2224      	movs	r2, #36	; 0x24
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	bffdfff8 	.word	0xbffdfff8
 80015b0:	40020000 	.word	0x40020000
 80015b4:	ffff800f 	.word	0xffff800f
 80015b8:	400200a8 	.word	0x400200a8

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015d2:	e143      	b.n	800185c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d100      	bne.n	80015ec <HAL_GPIO_Init+0x30>
 80015ea:	e134      	b.n	8001856 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	43da      	mvns	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	2201      	movs	r2, #1
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	4013      	ands	r3, r2
 800166e:	2b03      	cmp	r3, #3
 8001670:	d017      	beq.n	80016a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d123      	bne.n	80016f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	58d3      	ldr	r3, [r2, r3]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2107      	movs	r1, #7
 80016da:	400b      	ands	r3, r1
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	6939      	ldr	r1, [r7, #16]
 80016f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	43da      	mvns	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	401a      	ands	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	23c0      	movs	r3, #192	; 0xc0
 8001730:	029b      	lsls	r3, r3, #10
 8001732:	4013      	ands	r3, r2
 8001734:	d100      	bne.n	8001738 <HAL_GPIO_Init+0x17c>
 8001736:	e08e      	b.n	8001856 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	589b      	ldr	r3, [r3, r2]
 8001750:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d00d      	beq.n	800178e <HAL_GPIO_Init+0x1d2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <HAL_GPIO_Init+0x2c0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <HAL_GPIO_Init+0x1ce>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_GPIO_Init+0x1ca>
 8001782:	2302      	movs	r3, #2
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x1d4>
 8001786:	2306      	movs	r3, #6
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x1d4>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x1d4>
 800178e:	2300      	movs	r3, #0
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	2103      	movs	r1, #3
 8001794:	400a      	ands	r2, r1
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4013      	ands	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	035b      	lsls	r3, r3, #13
 800181a:	4013      	ands	r3, r2
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	039b      	lsls	r3, r3, #14
 8001844:	4013      	ands	r3, r2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	40da      	lsrs	r2, r3
 8001864:	1e13      	subs	r3, r2, #0
 8001866:	d000      	beq.n	800186a <HAL_GPIO_Init+0x2ae>
 8001868:	e6b4      	b.n	80015d4 <HAL_GPIO_Init+0x18>
  }
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b006      	add	sp, #24
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	50000400 	.word	0x50000400
 8001880:	50000800 	.word	0x50000800
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	0008      	movs	r0, r1
 8001892:	0011      	movs	r1, r2
 8001894:	1cbb      	adds	r3, r7, #2
 8001896:	1c02      	adds	r2, r0, #0
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	1c7b      	adds	r3, r7, #1
 800189c:	1c0a      	adds	r2, r1, #0
 800189e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	1c7b      	adds	r3, r7, #1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	881a      	ldrh	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018b2:	1cbb      	adds	r3, r7, #2
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	000a      	movs	r2, r1
 80018cc:	1cbb      	adds	r3, r7, #2
 80018ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d6:	1cbb      	adds	r3, r7, #2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	041a      	lsls	r2, r3, #16
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	1cb9      	adds	r1, r7, #2
 80018e6:	8809      	ldrh	r1, [r1, #0]
 80018e8:	400b      	ands	r3, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b004      	add	sp, #16
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f000 fb6c 	bl	8001fe4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190c:	4bc8      	ldr	r3, [pc, #800]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	220c      	movs	r2, #12
 8001912:	4013      	ands	r3, r2
 8001914:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001916:	4bc6      	ldr	r3, [pc, #792]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x36>
 800192c:	e07d      	b.n	8001a2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d007      	beq.n	8001944 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x68>
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	429a      	cmp	r2, r3
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	4bba      	ldr	r3, [pc, #744]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <HAL_RCC_OscConfig+0x5a>
 8001950:	e06a      	b.n	8001a28 <HAL_RCC_OscConfig+0x130>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d166      	bne.n	8001a28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	f000 fb42 	bl	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x84>
 800196c:	4bb0      	ldr	r3, [pc, #704]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4baf      	ldr	r3, [pc, #700]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e027      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	23a0      	movs	r3, #160	; 0xa0
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	429a      	cmp	r2, r3
 8001986:	d10e      	bne.n	80019a6 <HAL_RCC_OscConfig+0xae>
 8001988:	4ba9      	ldr	r3, [pc, #676]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4ba8      	ldr	r3, [pc, #672]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	02c9      	lsls	r1, r1, #11
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4ba6      	ldr	r3, [pc, #664]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba5      	ldr	r3, [pc, #660]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0249      	lsls	r1, r1, #9
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e012      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 80019a6:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4ba1      	ldr	r3, [pc, #644]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019ac:	49a1      	ldr	r1, [pc, #644]	; (8001c34 <HAL_RCC_OscConfig+0x33c>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4b9f      	ldr	r3, [pc, #636]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4b9b      	ldr	r3, [pc, #620]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b9a      	ldr	r3, [pc, #616]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019c6:	499c      	ldr	r1, [pc, #624]	; (8001c38 <HAL_RCC_OscConfig+0x340>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc6e 	bl	80012b4 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019de:	f7ff fc69 	bl	80012b4 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e2f9      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0xe6>
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fc59 	bl	80012b4 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fc54 	bl	80012b4 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e2e4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x110>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x13e>
 8001a34:	e099      	b.n	8001b6a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	2220      	movs	r2, #32
 8001a40:	4013      	ands	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a44:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2220      	movs	r2, #32
 8001a54:	4393      	bics	r3, r2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d13e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1ea>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d13b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a6a:	4b71      	ldr	r3, [pc, #452]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_RCC_OscConfig+0x186>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e2b2      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x344>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a94:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2209      	movs	r2, #9
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 fbeb 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8001aaa:	0001      	movs	r1, r0
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	4a62      	ldr	r2, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x348>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	000a      	movs	r2, r1
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <HAL_RCC_OscConfig+0x34c>)
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_OscConfig+0x350>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2513      	movs	r5, #19
 8001ac8:	197c      	adds	r4, r7, r5
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff fbac 	bl	8001228 <HAL_InitTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ad4:	197b      	adds	r3, r7, r5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d046      	beq.n	8001b6a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	e280      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d027      	beq.n	8001b38 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2209      	movs	r2, #9
 8001aee:	4393      	bics	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fbdb 	bl	80012b4 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fbd6 	bl	80012b4 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e266      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f1      	beq.n	8001b04 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <HAL_RCC_OscConfig+0x344>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	021a      	lsls	r2, r3, #8
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	e018      	b.n	8001b6a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	438a      	bics	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fbb6 	bl	80012b4 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fbb1 	bl	80012b4 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e241      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f1      	bne.n	8001b4e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	4013      	ands	r3, r2
 8001b72:	d100      	bne.n	8001b76 <HAL_RCC_OscConfig+0x27e>
 8001b74:	e0a1      	b.n	8001cba <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d140      	bne.n	8001bfe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x29c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e227      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <HAL_RCC_OscConfig+0x354>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	0a19      	lsrs	r1, r3, #8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	0b5b      	lsrs	r3, r3, #13
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	491a      	ldr	r1, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x348>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x34c>)
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_OscConfig+0x350>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2513      	movs	r5, #19
 8001be4:	197c      	adds	r4, r7, r5
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fb1e 	bl	8001228 <HAL_InitTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bf0:	197b      	adds	r3, r7, r5
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d060      	beq.n	8001cba <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001bf8:	197b      	adds	r3, r7, r5
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	e1f2      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03f      	beq.n	8001c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0049      	lsls	r1, r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb4e 	bl	80012b4 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c1c:	e018      	b.n	8001c50 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fb49 	bl	80012b4 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d911      	bls.n	8001c50 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1d9      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	fffbffff 	.word	0xfffbffff
 8001c3c:	ffffe0ff 	.word	0xffffe0ff
 8001c40:	08003168 	.word	0x08003168
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c50:	4bc9      	ldr	r3, [pc, #804]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0e0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5c:	4bc6      	ldr	r3, [pc, #792]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4ac6      	ldr	r2, [pc, #792]	; (8001f7c <HAL_RCC_OscConfig+0x684>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4bc3      	ldr	r3, [pc, #780]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c70:	4bc1      	ldr	r3, [pc, #772]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	0a19      	lsrs	r1, r3, #8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	061a      	lsls	r2, r3, #24
 8001c7e:	4bbe      	ldr	r3, [pc, #760]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	e019      	b.n	8001cba <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c86:	4bbc      	ldr	r3, [pc, #752]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4bbb      	ldr	r3, [pc, #748]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001c8c:	49bc      	ldr	r1, [pc, #752]	; (8001f80 <HAL_RCC_OscConfig+0x688>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fb0f 	bl	80012b4 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fb0a 	bl	80012b4 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e19a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cae:	4bb2      	ldr	r3, [pc, #712]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ccc:	4baa      	ldr	r3, [pc, #680]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd0:	4ba9      	ldr	r3, [pc, #676]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff faec 	bl	80012b4 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fae7 	bl	80012b4 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e177      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf4:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f1      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3ea>
 8001cfe:	e018      	b.n	8001d32 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	4b9c      	ldr	r3, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fad2 	bl	80012b4 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff facd 	bl	80012b4 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e15d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d28:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f1      	bne.n	8001d16 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <HAL_RCC_OscConfig+0x446>
 8001d3c:	e0ae      	b.n	8001e9c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2023      	movs	r0, #35	; 0x23
 8001d40:	183b      	adds	r3, r7, r0
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	055b      	lsls	r3, r3, #21
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0549      	lsls	r1, r1, #21
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b87      	ldr	r3, [pc, #540]	; (8001f84 <HAL_RCC_OscConfig+0x68c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d11a      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b84      	ldr	r3, [pc, #528]	; (8001f84 <HAL_RCC_OscConfig+0x68c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b83      	ldr	r3, [pc, #524]	; (8001f84 <HAL_RCC_OscConfig+0x68c>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0049      	lsls	r1, r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fa98 	bl	80012b4 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7ff fa93 	bl	80012b4 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e123      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <HAL_RCC_OscConfig+0x68c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4cc>
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db8:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0049      	lsls	r1, r1, #1
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc2:	e031      	b.n	8001e28 <HAL_RCC_OscConfig+0x530>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4ee>
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd0:	4b69      	ldr	r3, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	496b      	ldr	r1, [pc, #428]	; (8001f80 <HAL_RCC_OscConfig+0x688>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001dde:	496a      	ldr	r1, [pc, #424]	; (8001f88 <HAL_RCC_OscConfig+0x690>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	651a      	str	r2, [r3, #80]	; 0x50
 8001de4:	e020      	b.n	8001e28 <HAL_RCC_OscConfig+0x530>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	23a0      	movs	r3, #160	; 0xa0
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0x518>
 8001df2:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	00c9      	lsls	r1, r1, #3
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	651a      	str	r2, [r3, #80]	; 0x50
 8001e00:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e04:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	0049      	lsls	r1, r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x530>
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e16:	495a      	ldr	r1, [pc, #360]	; (8001f80 <HAL_RCC_OscConfig+0x688>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e20:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e22:	4959      	ldr	r1, [pc, #356]	; (8001f88 <HAL_RCC_OscConfig+0x690>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fa40 	bl	80012b4 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fa3b 	bl	80012b4 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_RCC_OscConfig+0x694>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0ca      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d0ef      	beq.n	8001e3a <HAL_RCC_OscConfig+0x542>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fa2a 	bl	80012b4 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e64:	e009      	b.n	8001e7a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fa25 	bl	80012b4 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x694>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0b4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e86:	2323      	movs	r3, #35	; 0x23
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001e96:	493e      	ldr	r1, [pc, #248]	; (8001f90 <HAL_RCC_OscConfig+0x698>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5ae>
 8001ea4:	e09d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0x5b6>
 8001eac:	e076      	b.n	8001f9c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d145      	bne.n	8001f42 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_RCC_OscConfig+0x69c>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f9f7 	bl	80012b4 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f9f2 	bl	80012b4 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e082      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0x6a0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	431a      	orrs	r2, r3
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0449      	lsls	r1, r1, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff f9cc 	bl	80012b4 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff f9c7 	bl	80012b4 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e057      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	049b      	lsls	r3, r3, #18
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62a>
 8001f40:	e04f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f48:	4912      	ldr	r1, [pc, #72]	; (8001f94 <HAL_RCC_OscConfig+0x69c>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f9b1 	bl	80012b4 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f9ac 	bl	80012b4 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e03c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x680>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	049b      	lsls	r3, r3, #18
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x660>
 8001f76:	e034      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6ea>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	ffff1fff 	.word	0xffff1fff
 8001f80:	fffffeff 	.word	0xfffffeff
 8001f84:	40007000 	.word	0x40007000
 8001f88:	fffffbff 	.word	0xfffffbff
 8001f8c:	00001388 	.word	0x00001388
 8001f90:	efffffff 	.word	0xefffffff
 8001f94:	feffffff 	.word	0xfeffffff
 8001f98:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e01d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x6f4>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d10f      	bne.n	8001fde <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	23f0      	movs	r3, #240	; 0xf0
 8001fc2:	039b      	lsls	r3, r3, #14
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	23c0      	movs	r3, #192	; 0xc0
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b00a      	add	sp, #40	; 0x28
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e128      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b96      	ldr	r3, [pc, #600]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d91e      	bls.n	8002050 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b93      	ldr	r3, [pc, #588]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b90      	ldr	r3, [pc, #576]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002024:	f7ff f946 	bl	80012b4 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	e009      	b.n	8002042 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff f941 	bl	80012b4 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e109      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b87      	ldr	r3, [pc, #540]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	22f0      	movs	r2, #240	; 0xf0
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_ClockConfig+0x8a>
 8002078:	e089      	b.n	800218e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002082:	4b79      	ldr	r3, [pc, #484]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	4013      	ands	r3, r2
 800208c:	d120      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e1      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	049b      	lsls	r3, r3, #18
 80020a2:	4013      	ands	r3, r2
 80020a4:	d114      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0d5      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ca      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0c2      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d0:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff f8e6 	bl	80012b4 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d111      	bne.n	8002118 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f4:	e009      	b.n	800210a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f7ff f8dd 	bl	80012b4 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0a5      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800210a:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	220c      	movs	r2, #12
 8002110:	4013      	ands	r3, r2
 8002112:	2b08      	cmp	r3, #8
 8002114:	d1ef      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x106>
 8002116:	e03a      	b.n	800218e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d111      	bne.n	8002144 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002120:	e009      	b.n	8002136 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7ff f8c7 	bl	80012b4 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e08f      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	220c      	movs	r2, #12
 800213c:	4013      	ands	r3, r2
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d1ef      	bne.n	8002122 <HAL_RCC_ClockConfig+0x132>
 8002142:	e024      	b.n	800218e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d11b      	bne.n	8002184 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800214c:	e009      	b.n	8002162 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7ff f8b1 	bl	80012b4 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e079      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	220c      	movs	r2, #12
 8002168:	4013      	ands	r3, r2
 800216a:	2b04      	cmp	r3, #4
 800216c:	d1ef      	bne.n	800214e <HAL_RCC_ClockConfig+0x15e>
 800216e:	e00e      	b.n	800218e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7ff f8a0 	bl	80012b4 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e068      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002184:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d21e      	bcs.n	80021da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021ae:	f7ff f881 	bl	80012b4 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	e009      	b.n	80021cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f87c 	bl	80012b4 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_RCC_ClockConfig+0x274>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e044      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2204      	movs	r2, #4
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x27c>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2208      	movs	r2, #8
 80021fe:	4013      	ands	r3, r2
 8002200:	d00a      	beq.n	8002218 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_RCC_ClockConfig+0x280>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	00da      	lsls	r2, r3, #3
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002218:	f000 f832 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800221c:	0001      	movs	r1, r0
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_ClockConfig+0x278>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	220f      	movs	r2, #15
 8002226:	4013      	ands	r3, r2
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x284>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	000a      	movs	r2, r1
 800222e:	40da      	lsrs	r2, r3
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_ClockConfig+0x288>)
 8002232:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x28c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	250b      	movs	r5, #11
 800223a:	197c      	adds	r4, r7, r5
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe fff3 	bl	8001228 <HAL_InitTick>
 8002242:	0003      	movs	r3, r0
 8002244:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002246:	197b      	adds	r3, r7, r5
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800224e:	197b      	adds	r3, r7, r5
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	e000      	b.n	8002256 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bdb0      	pop	{r4, r5, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40022000 	.word	0x40022000
 8002264:	00001388 	.word	0x00001388
 8002268:	40021000 	.word	0x40021000
 800226c:	fffff8ff 	.word	0xfffff8ff
 8002270:	ffffc7ff 	.word	0xffffc7ff
 8002274:	08003168 	.word	0x08003168
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228e:	230c      	movs	r3, #12
 8002290:	4013      	ands	r3, r2
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d014      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 8002296:	d900      	bls.n	800229a <HAL_RCC_GetSysClockFreq+0x1a>
 8002298:	e07b      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x112>
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x24>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x3a>
 80022a2:	e076      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022a4:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022b2:	e07c      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022b8:	e079      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022be:	e076      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	0c9a      	lsrs	r2, r3, #18
 80022c4:	230f      	movs	r3, #15
 80022c6:	401a      	ands	r2, r3
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	0d9a      	lsrs	r2, r3, #22
 80022d2:	2303      	movs	r3, #3
 80022d4:	4013      	ands	r3, r2
 80022d6:	3301      	adds	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	4013      	ands	r3, r2
 80022e4:	d01a      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80022f0:	2300      	movs	r3, #0
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	69f9      	ldr	r1, [r7, #28]
 80022f6:	f7fe f89d 	bl	8000434 <__aeabi_lmul>
 80022fa:	0002      	movs	r2, r0
 80022fc:	000b      	movs	r3, r1
 80022fe:	0010      	movs	r0, r2
 8002300:	0019      	movs	r1, r3
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f7fe f871 	bl	80003f4 <__aeabi_uldivmod>
 8002312:	0002      	movs	r2, r0
 8002314:	000b      	movs	r3, r1
 8002316:	0013      	movs	r3, r2
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
 800231a:	e037      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d01a      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002330:	2300      	movs	r3, #0
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	f7fe f87d 	bl	8000434 <__aeabi_lmul>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	0010      	movs	r0, r2
 8002340:	0019      	movs	r1, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f7fe f851 	bl	80003f4 <__aeabi_uldivmod>
 8002352:	0002      	movs	r2, r0
 8002354:	000b      	movs	r3, r1
 8002356:	0013      	movs	r3, r2
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
 800235a:	e017      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	0018      	movs	r0, r3
 8002360:	2300      	movs	r3, #0
 8002362:	0019      	movs	r1, r3
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002366:	2300      	movs	r3, #0
 8002368:	f7fe f864 	bl	8000434 <__aeabi_lmul>
 800236c:	0002      	movs	r2, r0
 800236e:	000b      	movs	r3, r1
 8002370:	0010      	movs	r0, r2
 8002372:	0019      	movs	r1, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	001c      	movs	r4, r3
 8002378:	2300      	movs	r3, #0
 800237a:	001d      	movs	r5, r3
 800237c:	0022      	movs	r2, r4
 800237e:	002b      	movs	r3, r5
 8002380:	f7fe f838 	bl	80003f4 <__aeabi_uldivmod>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0013      	movs	r3, r2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002390:	e00d      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0b5b      	lsrs	r3, r3, #13
 8002398:	2207      	movs	r2, #7
 800239a:	4013      	ands	r3, r2
 800239c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	3301      	adds	r3, #1
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0212      	lsls	r2, r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b00e      	add	sp, #56	; 0x38
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	003d0900 	.word	0x003d0900
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	08003180 	.word	0x08003180

080023cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_RCC_GetHCLKFreq+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff2 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 80023e8:	0001      	movs	r1, r0
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	2207      	movs	r2, #7
 80023f2:	4013      	ands	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	40d9      	lsrs	r1, r3
 80023fa:	000b      	movs	r3, r1
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000
 8002408:	08003178 	.word	0x08003178

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002410:	f7ff ffdc 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002414:	0001      	movs	r1, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	40d9      	lsrs	r1, r3
 8002426:	000b      	movs	r3, r1
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	08003178 	.word	0x08003178

08002438 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002440:	2017      	movs	r0, #23
 8002442:	183b      	adds	r3, r7, r0
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2220      	movs	r2, #32
 800244e:	4013      	ands	r3, r2
 8002450:	d100      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002452:	e0c2      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	4013      	ands	r3, r2
 800245e:	d109      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0549      	lsls	r1, r1, #21
 800246a:	430a      	orrs	r2, r1
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800246e:	183b      	adds	r3, r7, r0
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d11a      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002480:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0049      	lsls	r1, r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe ff11 	bl	80012b4 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	e008      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe ff0c 	bl	80012b4 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0d4      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	039b      	lsls	r3, r3, #14
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	039b      	lsls	r3, r3, #14
 80024ca:	4013      	ands	r3, r2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d013      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	401a      	ands	r2, r3
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10a      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024e4:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	401a      	ands	r2, r3
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0ac      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03b      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	23c0      	movs	r3, #192	; 0xc0
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d033      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2220      	movs	r2, #32
 8002522:	4013      	ands	r3, r2
 8002524:	d02e      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002526:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002534:	4b49      	ldr	r3, [pc, #292]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	0309      	lsls	r1, r1, #12
 800253a:	430a      	orrs	r2, r1
 800253c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002544:	4948      	ldr	r1, [pc, #288]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002546:	400a      	ands	r2, r1
 8002548:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4013      	ands	r3, r2
 8002558:	d014      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe feab 	bl	80012b4 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002562:	e009      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fea6 	bl	80012b4 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	4a3f      	ldr	r2, [pc, #252]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e06d      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002578:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800257a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0ef      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	23c0      	movs	r3, #192	; 0xc0
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	401a      	ands	r2, r3
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	429a      	cmp	r2, r3
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a35      	ldr	r2, [pc, #212]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	039b      	lsls	r3, r3, #14
 80025a8:	401a      	ands	r2, r3
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	23c0      	movs	r3, #192	; 0xc0
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	401a      	ands	r2, r3
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025c4:	2317      	movs	r3, #23
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025d4:	4927      	ldr	r1, [pc, #156]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2202      	movs	r2, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	220c      	movs	r2, #12
 80025ea:	4393      	bics	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2204      	movs	r2, #4
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002612:	430a      	orrs	r2, r1
 8002614:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2208      	movs	r2, #8
 800261c:	4013      	ands	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002630:	430a      	orrs	r2, r1
 8002632:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800264e:	430a      	orrs	r2, r1
 8002650:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b006      	add	sp, #24
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	fffcffff 	.word	0xfffcffff
 8002668:	fff7ffff 	.word	0xfff7ffff
 800266c:	00001388 	.word	0x00001388
 8002670:	ffcfffff 	.word	0xffcfffff
 8002674:	efffffff 	.word	0xefffffff
 8002678:	fffff3ff 	.word	0xfffff3ff
 800267c:	ffffcfff 	.word	0xffffcfff
 8002680:	fff3ffff 	.word	0xfff3ffff

08002684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e044      	b.n	8002720 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2274      	movs	r2, #116	; 0x74
 80026a2:	2100      	movs	r1, #0
 80026a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7fe fcaf 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2224      	movs	r2, #36	; 0x24
 80026b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	438a      	bics	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f830 	bl	800272c <UART_SetConfig>
 80026cc:	0003      	movs	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e024      	b.n	8002720 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fa6d 	bl	8002bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	490d      	ldr	r1, [pc, #52]	; (8002728 <HAL_UART_Init+0xa4>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	212a      	movs	r1, #42	; 0x2a
 8002702:	438a      	bics	r2, r1
 8002704:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fb05 	bl	8002d28 <UART_CheckIdleState>
 800271e:	0003      	movs	r3, r0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}
 8002728:	ffffb7ff 	.word	0xffffb7ff

0800272c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b08e      	sub	sp, #56	; 0x38
 8002730:	af00      	add	r7, sp, #0
 8002732:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002734:	231a      	movs	r3, #26
 8002736:	2218      	movs	r2, #24
 8002738:	189b      	adds	r3, r3, r2
 800273a:	19db      	adds	r3, r3, r7
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4313      	orrs	r3, r2
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4ab4      	ldr	r2, [pc, #720]	; (8002a30 <UART_SetConfig+0x304>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4aaf      	ldr	r2, [pc, #700]	; (8002a34 <UART_SetConfig+0x308>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4aa9      	ldr	r2, [pc, #676]	; (8002a38 <UART_SetConfig+0x30c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	4313      	orrs	r3, r2
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4aa5      	ldr	r2, [pc, #660]	; (8002a3c <UART_SetConfig+0x310>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4aa1      	ldr	r2, [pc, #644]	; (8002a40 <UART_SetConfig+0x314>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d131      	bne.n	8002824 <UART_SetConfig+0xf8>
 80027c0:	4ba0      	ldr	r3, [pc, #640]	; (8002a44 <UART_SetConfig+0x318>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	220c      	movs	r2, #12
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d01d      	beq.n	8002808 <UART_SetConfig+0xdc>
 80027cc:	d823      	bhi.n	8002816 <UART_SetConfig+0xea>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d00c      	beq.n	80027ec <UART_SetConfig+0xc0>
 80027d2:	d820      	bhi.n	8002816 <UART_SetConfig+0xea>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <UART_SetConfig+0xb2>
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00e      	beq.n	80027fa <UART_SetConfig+0xce>
 80027dc:	e01b      	b.n	8002816 <UART_SetConfig+0xea>
 80027de:	231b      	movs	r3, #27
 80027e0:	2218      	movs	r2, #24
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	19db      	adds	r3, r3, r7
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e065      	b.n	80028b8 <UART_SetConfig+0x18c>
 80027ec:	231b      	movs	r3, #27
 80027ee:	2218      	movs	r2, #24
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	19db      	adds	r3, r3, r7
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e05e      	b.n	80028b8 <UART_SetConfig+0x18c>
 80027fa:	231b      	movs	r3, #27
 80027fc:	2218      	movs	r2, #24
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2204      	movs	r2, #4
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e057      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002808:	231b      	movs	r3, #27
 800280a:	2218      	movs	r2, #24
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2208      	movs	r2, #8
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e050      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002816:	231b      	movs	r3, #27
 8002818:	2218      	movs	r2, #24
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2210      	movs	r2, #16
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e049      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <UART_SetConfig+0x30c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d13e      	bne.n	80028ac <UART_SetConfig+0x180>
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <UART_SetConfig+0x318>)
 8002830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4013      	ands	r3, r2
 8002838:	22c0      	movs	r2, #192	; 0xc0
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	4293      	cmp	r3, r2
 800283e:	d027      	beq.n	8002890 <UART_SetConfig+0x164>
 8002840:	22c0      	movs	r2, #192	; 0xc0
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	4293      	cmp	r3, r2
 8002846:	d82a      	bhi.n	800289e <UART_SetConfig+0x172>
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	4293      	cmp	r3, r2
 800284e:	d011      	beq.n	8002874 <UART_SetConfig+0x148>
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	4293      	cmp	r3, r2
 8002856:	d822      	bhi.n	800289e <UART_SetConfig+0x172>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <UART_SetConfig+0x13a>
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	00d2      	lsls	r2, r2, #3
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <UART_SetConfig+0x156>
 8002864:	e01b      	b.n	800289e <UART_SetConfig+0x172>
 8002866:	231b      	movs	r3, #27
 8002868:	2218      	movs	r2, #24
 800286a:	189b      	adds	r3, r3, r2
 800286c:	19db      	adds	r3, r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e021      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002874:	231b      	movs	r3, #27
 8002876:	2218      	movs	r2, #24
 8002878:	189b      	adds	r3, r3, r2
 800287a:	19db      	adds	r3, r3, r7
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e01a      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002882:	231b      	movs	r3, #27
 8002884:	2218      	movs	r2, #24
 8002886:	189b      	adds	r3, r3, r2
 8002888:	19db      	adds	r3, r3, r7
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e013      	b.n	80028b8 <UART_SetConfig+0x18c>
 8002890:	231b      	movs	r3, #27
 8002892:	2218      	movs	r2, #24
 8002894:	189b      	adds	r3, r3, r2
 8002896:	19db      	adds	r3, r3, r7
 8002898:	2208      	movs	r2, #8
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e00c      	b.n	80028b8 <UART_SetConfig+0x18c>
 800289e:	231b      	movs	r3, #27
 80028a0:	2218      	movs	r2, #24
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	19db      	adds	r3, r3, r7
 80028a6:	2210      	movs	r2, #16
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e005      	b.n	80028b8 <UART_SetConfig+0x18c>
 80028ac:	231b      	movs	r3, #27
 80028ae:	2218      	movs	r2, #24
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2210      	movs	r2, #16
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <UART_SetConfig+0x30c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d000      	beq.n	80028c4 <UART_SetConfig+0x198>
 80028c2:	e084      	b.n	80029ce <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028c4:	231b      	movs	r3, #27
 80028c6:	2218      	movs	r2, #24
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	19db      	adds	r3, r3, r7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d01d      	beq.n	800290e <UART_SetConfig+0x1e2>
 80028d2:	dc20      	bgt.n	8002916 <UART_SetConfig+0x1ea>
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d015      	beq.n	8002904 <UART_SetConfig+0x1d8>
 80028d8:	dc1d      	bgt.n	8002916 <UART_SetConfig+0x1ea>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <UART_SetConfig+0x1b8>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d005      	beq.n	80028ee <UART_SetConfig+0x1c2>
 80028e2:	e018      	b.n	8002916 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fd7c 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 80028e8:	0003      	movs	r3, r0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ec:	e01c      	b.n	8002928 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <UART_SetConfig+0x318>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	4013      	ands	r3, r2
 80028f6:	d002      	beq.n	80028fe <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <UART_SetConfig+0x31c>)
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028fc:	e014      	b.n	8002928 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <UART_SetConfig+0x320>)
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002902:	e011      	b.n	8002928 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002904:	f7ff fcbc 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002908:	0003      	movs	r3, r0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800290c:	e00c      	b.n	8002928 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002914:	e008      	b.n	8002928 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800291a:	231a      	movs	r3, #26
 800291c:	2218      	movs	r2, #24
 800291e:	189b      	adds	r3, r3, r2
 8002920:	19db      	adds	r3, r3, r7
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
        break;
 8002926:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d100      	bne.n	8002930 <UART_SetConfig+0x204>
 800292e:	e130      	b.n	8002b92 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	0013      	movs	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	189b      	adds	r3, r3, r2
 800293a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293c:	429a      	cmp	r2, r3
 800293e:	d305      	bcc.n	800294c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d906      	bls.n	800295a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800294c:	231a      	movs	r3, #26
 800294e:	2218      	movs	r2, #24
 8002950:	189b      	adds	r3, r3, r2
 8002952:	19db      	adds	r3, r3, r7
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e11b      	b.n	8002b92 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	6939      	ldr	r1, [r7, #16]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	000b      	movs	r3, r1
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	0010      	movs	r0, r2
 800296c:	0205      	lsls	r5, r0, #8
 800296e:	431d      	orrs	r5, r3
 8002970:	000b      	movs	r3, r1
 8002972:	021c      	lsls	r4, r3, #8
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68b8      	ldr	r0, [r7, #8]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	1900      	adds	r0, r0, r4
 8002986:	4169      	adcs	r1, r5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f7fd fd2d 	bl	80003f4 <__aeabi_uldivmod>
 800299a:	0002      	movs	r2, r0
 800299c:	000b      	movs	r3, r1
 800299e:	0013      	movs	r3, r2
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a4:	23c0      	movs	r3, #192	; 0xc0
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d309      	bcc.n	80029c0 <UART_SetConfig+0x294>
 80029ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	035b      	lsls	r3, r3, #13
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d204      	bcs.n	80029c0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e0e8      	b.n	8002b92 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 80029c0:	231a      	movs	r3, #26
 80029c2:	2218      	movs	r2, #24
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e0e1      	b.n	8002b92 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d000      	beq.n	80029dc <UART_SetConfig+0x2b0>
 80029da:	e083      	b.n	8002ae4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80029dc:	231b      	movs	r3, #27
 80029de:	2218      	movs	r2, #24
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	19db      	adds	r3, r3, r7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d834      	bhi.n	8002a54 <UART_SetConfig+0x328>
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <UART_SetConfig+0x324>)
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029f4:	f7ff fcf4 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 80029f8:	0003      	movs	r3, r0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029fc:	e033      	b.n	8002a66 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029fe:	f7ff fd05 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8002a02:	0003      	movs	r3, r0
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a06:	e02e      	b.n	8002a66 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <UART_SetConfig+0x318>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d002      	beq.n	8002a18 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <UART_SetConfig+0x31c>)
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a16:	e026      	b.n	8002a66 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <UART_SetConfig+0x320>)
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a1c:	e023      	b.n	8002a66 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1e:	f7ff fc2f 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002a22:	0003      	movs	r3, r0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a26:	e01e      	b.n	8002a66 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a2e:	e01a      	b.n	8002a66 <UART_SetConfig+0x33a>
 8002a30:	efff69f3 	.word	0xefff69f3
 8002a34:	ffffcfff 	.word	0xffffcfff
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	fffff4ff 	.word	0xfffff4ff
 8002a40:	40004400 	.word	0x40004400
 8002a44:	40021000 	.word	0x40021000
 8002a48:	003d0900 	.word	0x003d0900
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	0800318c 	.word	0x0800318c
      default:
        pclk = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a58:	231a      	movs	r3, #26
 8002a5a:	2218      	movs	r2, #24
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	19db      	adds	r3, r3, r7
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
        break;
 8002a64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d100      	bne.n	8002a6e <UART_SetConfig+0x342>
 8002a6c:	e091      	b.n	8002b92 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	18d2      	adds	r2, r2, r3
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f7fd fb41 	bl	8000108 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	d921      	bls.n	8002ad6 <UART_SetConfig+0x3aa>
 8002a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d21c      	bcs.n	8002ad6 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	200e      	movs	r0, #14
 8002aa2:	2418      	movs	r4, #24
 8002aa4:	1903      	adds	r3, r0, r4
 8002aa6:	19db      	adds	r3, r3, r7
 8002aa8:	210f      	movs	r1, #15
 8002aaa:	438a      	bics	r2, r1
 8002aac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	1903      	adds	r3, r0, r4
 8002abc:	19db      	adds	r3, r3, r7
 8002abe:	1902      	adds	r2, r0, r4
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1902      	adds	r2, r0, r4
 8002ace:	19d2      	adds	r2, r2, r7
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	e05d      	b.n	8002b92 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002ad6:	231a      	movs	r3, #26
 8002ad8:	2218      	movs	r2, #24
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e056      	b.n	8002b92 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ae4:	231b      	movs	r3, #27
 8002ae6:	2218      	movs	r2, #24
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d822      	bhi.n	8002b38 <UART_SetConfig+0x40c>
 8002af2:	009a      	lsls	r2, r3, #2
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <UART_SetConfig+0x484>)
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002afc:	f7ff fc70 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8002b00:	0003      	movs	r3, r0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b04:	e021      	b.n	8002b4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b06:	f7ff fc81 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0e:	e01c      	b.n	8002b4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <UART_SetConfig+0x488>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	4013      	ands	r3, r2
 8002b18:	d002      	beq.n	8002b20 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <UART_SetConfig+0x48c>)
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b1e:	e014      	b.n	8002b4a <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <UART_SetConfig+0x490>)
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b24:	e011      	b.n	8002b4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b26:	f7ff fbab 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b2e:	e00c      	b.n	8002b4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b36:	e008      	b.n	8002b4a <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b3c:	231a      	movs	r3, #26
 8002b3e:	2218      	movs	r2, #24
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	19db      	adds	r3, r3, r7
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
        break;
 8002b48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	085a      	lsrs	r2, r3, #1
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d909      	bls.n	8002b86 <UART_SetConfig+0x45a>
 8002b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	025b      	lsls	r3, r3, #9
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d204      	bcs.n	8002b86 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e005      	b.n	8002b92 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002b86:	231a      	movs	r3, #26
 8002b88:	2218      	movs	r2, #24
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2200      	movs	r2, #0
 8002b96:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b9e:	231a      	movs	r3, #26
 8002ba0:	2218      	movs	r2, #24
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b00e      	add	sp, #56	; 0x38
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb0:	080031b0 	.word	0x080031b0
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	003d0900 	.word	0x003d0900
 8002bbc:	00f42400 	.word	0x00f42400

08002bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <UART_AdvFeatureConfig+0x144>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <UART_AdvFeatureConfig+0x148>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <UART_AdvFeatureConfig+0x14c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2208      	movs	r2, #8
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a34      	ldr	r2, [pc, #208]	; (8002d10 <UART_AdvFeatureConfig+0x150>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2210      	movs	r2, #16
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <UART_AdvFeatureConfig+0x154>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2220      	movs	r2, #32
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <UART_AdvFeatureConfig+0x158>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <UART_AdvFeatureConfig+0x15c>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	035b      	lsls	r3, r3, #13
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d10b      	bne.n	8002cda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <UART_AdvFeatureConfig+0x160>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <UART_AdvFeatureConfig+0x164>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	fffdffff 	.word	0xfffdffff
 8002d08:	fffeffff 	.word	0xfffeffff
 8002d0c:	fffbffff 	.word	0xfffbffff
 8002d10:	ffff7fff 	.word	0xffff7fff
 8002d14:	ffffefff 	.word	0xffffefff
 8002d18:	ffffdfff 	.word	0xffffdfff
 8002d1c:	ffefffff 	.word	0xffefffff
 8002d20:	ff9fffff 	.word	0xff9fffff
 8002d24:	fff7ffff 	.word	0xfff7ffff

08002d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	2100      	movs	r1, #0
 8002d36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d38:	f7fe fabc 	bl	80012b4 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2208      	movs	r2, #8
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d10c      	bne.n	8002d68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	0391      	lsls	r1, r2, #14
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <UART_CheckIdleState+0x8c>)
 8002d58:	9200      	str	r2, [sp, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f000 f82c 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e021      	b.n	8002dac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d10c      	bne.n	8002d90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	03d1      	lsls	r1, r2, #15
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <UART_CheckIdleState+0x8c>)
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f000 f818 	bl	8002db8 <UART_WaitOnFlagUntilTimeout>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e00d      	b.n	8002dac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2274      	movs	r2, #116	; 0x74
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	01ffffff 	.word	0x01ffffff

08002db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b094      	sub	sp, #80	; 0x50
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc8:	e0a3      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	3301      	adds	r3, #1
 8002dce:	d100      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002dd0:	e09f      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fe fa6f 	bl	80012b4 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13d      	bne.n	8002e64 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
 8002df2:	2301      	movs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	494c      	ldr	r1, [pc, #304]	; (8002f3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
 8002e24:	2301      	movs	r3, #1
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	f383 8810 	msr	PRIMASK, r3
}
 8002e4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2274      	movs	r2, #116	; 0x74
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e067      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d050      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d146      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	613b      	str	r3, [r7, #16]
  return(result);
 8002e94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	2301      	movs	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4923      	ldr	r1, [pc, #140]	; (8002f3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eca:	2301      	movs	r3, #1
 8002ecc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	438a      	bics	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f383 8810 	msr	PRIMASK, r3
}
 8002ef0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	2120      	movs	r1, #32
 8002f04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2274      	movs	r2, #116	; 0x74
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e010      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	425a      	negs	r2, r3
 8002f22:	4153      	adcs	r3, r2
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	001a      	movs	r2, r3
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d100      	bne.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002f30:	e74b      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b014      	add	sp, #80	; 0x50
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	fffffe5f 	.word	0xfffffe5f

08002f40 <__errno>:
 8002f40:	4b01      	ldr	r3, [pc, #4]	; (8002f48 <__errno+0x8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	4770      	bx	lr
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	2600      	movs	r6, #0
 8002f50:	4d0c      	ldr	r5, [pc, #48]	; (8002f84 <__libc_init_array+0x38>)
 8002f52:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	2600      	movs	r6, #0
 8002f5e:	f000 f8f1 	bl	8003144 <_init>
 8002f62:	4d0a      	ldr	r5, [pc, #40]	; (8002f8c <__libc_init_array+0x40>)
 8002f64:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <__libc_init_array+0x44>)
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	00b3      	lsls	r3, r6, #2
 8002f72:	58eb      	ldr	r3, [r5, r3]
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	00b3      	lsls	r3, r6, #2
 8002f7c:	58eb      	ldr	r3, [r5, r3]
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	080031dc 	.word	0x080031dc
 8002f88:	080031dc 	.word	0x080031dc
 8002f8c:	080031dc 	.word	0x080031dc
 8002f90:	080031e0 	.word	0x080031e0

08002f94 <malloc>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <malloc+0x10>)
 8002f98:	0001      	movs	r1, r0
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	f000 f838 	bl	8003010 <_malloc_r>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <memcpy>:
 8002fa8:	2300      	movs	r3, #0
 8002faa:	b510      	push	{r4, lr}
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d100      	bne.n	8002fb2 <memcpy+0xa>
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	5ccc      	ldrb	r4, [r1, r3]
 8002fb4:	54c4      	strb	r4, [r0, r3]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	e7f8      	b.n	8002fac <memcpy+0x4>

08002fba <memset>:
 8002fba:	0003      	movs	r3, r0
 8002fbc:	1882      	adds	r2, r0, r2
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <memset+0xa>
 8002fc2:	4770      	bx	lr
 8002fc4:	7019      	strb	r1, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	e7f9      	b.n	8002fbe <memset+0x4>
	...

08002fcc <sbrk_aligned>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4e0f      	ldr	r6, [pc, #60]	; (800300c <sbrk_aligned+0x40>)
 8002fd0:	000d      	movs	r5, r1
 8002fd2:	6831      	ldr	r1, [r6, #0]
 8002fd4:	0004      	movs	r4, r0
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	d102      	bne.n	8002fe0 <sbrk_aligned+0x14>
 8002fda:	f000 f88f 	bl	80030fc <_sbrk_r>
 8002fde:	6030      	str	r0, [r6, #0]
 8002fe0:	0029      	movs	r1, r5
 8002fe2:	0020      	movs	r0, r4
 8002fe4:	f000 f88a 	bl	80030fc <_sbrk_r>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d00a      	beq.n	8003002 <sbrk_aligned+0x36>
 8002fec:	2303      	movs	r3, #3
 8002fee:	1cc5      	adds	r5, r0, #3
 8002ff0:	439d      	bics	r5, r3
 8002ff2:	42a8      	cmp	r0, r5
 8002ff4:	d007      	beq.n	8003006 <sbrk_aligned+0x3a>
 8002ff6:	1a29      	subs	r1, r5, r0
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f000 f87f 	bl	80030fc <_sbrk_r>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d101      	bne.n	8003006 <sbrk_aligned+0x3a>
 8003002:	2501      	movs	r5, #1
 8003004:	426d      	negs	r5, r5
 8003006:	0028      	movs	r0, r5
 8003008:	bd70      	pop	{r4, r5, r6, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	200001e4 	.word	0x200001e4

08003010 <_malloc_r>:
 8003010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003012:	2203      	movs	r2, #3
 8003014:	1ccb      	adds	r3, r1, #3
 8003016:	4393      	bics	r3, r2
 8003018:	3308      	adds	r3, #8
 800301a:	0006      	movs	r6, r0
 800301c:	001f      	movs	r7, r3
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d232      	bcs.n	8003088 <_malloc_r+0x78>
 8003022:	270c      	movs	r7, #12
 8003024:	42b9      	cmp	r1, r7
 8003026:	d831      	bhi.n	800308c <_malloc_r+0x7c>
 8003028:	0030      	movs	r0, r6
 800302a:	f000 f879 	bl	8003120 <__malloc_lock>
 800302e:	4d32      	ldr	r5, [pc, #200]	; (80030f8 <_malloc_r+0xe8>)
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	001c      	movs	r4, r3
 8003034:	2c00      	cmp	r4, #0
 8003036:	d12e      	bne.n	8003096 <_malloc_r+0x86>
 8003038:	0039      	movs	r1, r7
 800303a:	0030      	movs	r0, r6
 800303c:	f7ff ffc6 	bl	8002fcc <sbrk_aligned>
 8003040:	0004      	movs	r4, r0
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	d11e      	bne.n	8003084 <_malloc_r+0x74>
 8003046:	682c      	ldr	r4, [r5, #0]
 8003048:	0025      	movs	r5, r4
 800304a:	2d00      	cmp	r5, #0
 800304c:	d14a      	bne.n	80030e4 <_malloc_r+0xd4>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	0029      	movs	r1, r5
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	0030      	movs	r0, r6
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	f000 f850 	bl	80030fc <_sbrk_r>
 800305c:	9b01      	ldr	r3, [sp, #4]
 800305e:	4283      	cmp	r3, r0
 8003060:	d143      	bne.n	80030ea <_malloc_r+0xda>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	3703      	adds	r7, #3
 8003066:	1aff      	subs	r7, r7, r3
 8003068:	2303      	movs	r3, #3
 800306a:	439f      	bics	r7, r3
 800306c:	3708      	adds	r7, #8
 800306e:	2f0c      	cmp	r7, #12
 8003070:	d200      	bcs.n	8003074 <_malloc_r+0x64>
 8003072:	270c      	movs	r7, #12
 8003074:	0039      	movs	r1, r7
 8003076:	0030      	movs	r0, r6
 8003078:	f7ff ffa8 	bl	8002fcc <sbrk_aligned>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d034      	beq.n	80030ea <_malloc_r+0xda>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	19df      	adds	r7, r3, r7
 8003084:	6027      	str	r7, [r4, #0]
 8003086:	e013      	b.n	80030b0 <_malloc_r+0xa0>
 8003088:	2b00      	cmp	r3, #0
 800308a:	dacb      	bge.n	8003024 <_malloc_r+0x14>
 800308c:	230c      	movs	r3, #12
 800308e:	2500      	movs	r5, #0
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	0028      	movs	r0, r5
 8003094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	1bd1      	subs	r1, r2, r7
 800309a:	d420      	bmi.n	80030de <_malloc_r+0xce>
 800309c:	290b      	cmp	r1, #11
 800309e:	d917      	bls.n	80030d0 <_malloc_r+0xc0>
 80030a0:	19e2      	adds	r2, r4, r7
 80030a2:	6027      	str	r7, [r4, #0]
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d111      	bne.n	80030cc <_malloc_r+0xbc>
 80030a8:	602a      	str	r2, [r5, #0]
 80030aa:	6863      	ldr	r3, [r4, #4]
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	6053      	str	r3, [r2, #4]
 80030b0:	0030      	movs	r0, r6
 80030b2:	0025      	movs	r5, r4
 80030b4:	f000 f83c 	bl	8003130 <__malloc_unlock>
 80030b8:	2207      	movs	r2, #7
 80030ba:	350b      	adds	r5, #11
 80030bc:	1d23      	adds	r3, r4, #4
 80030be:	4395      	bics	r5, r2
 80030c0:	1aea      	subs	r2, r5, r3
 80030c2:	429d      	cmp	r5, r3
 80030c4:	d0e5      	beq.n	8003092 <_malloc_r+0x82>
 80030c6:	1b5b      	subs	r3, r3, r5
 80030c8:	50a3      	str	r3, [r4, r2]
 80030ca:	e7e2      	b.n	8003092 <_malloc_r+0x82>
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e7ec      	b.n	80030aa <_malloc_r+0x9a>
 80030d0:	6862      	ldr	r2, [r4, #4]
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	d101      	bne.n	80030da <_malloc_r+0xca>
 80030d6:	602a      	str	r2, [r5, #0]
 80030d8:	e7ea      	b.n	80030b0 <_malloc_r+0xa0>
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e7e8      	b.n	80030b0 <_malloc_r+0xa0>
 80030de:	0023      	movs	r3, r4
 80030e0:	6864      	ldr	r4, [r4, #4]
 80030e2:	e7a7      	b.n	8003034 <_malloc_r+0x24>
 80030e4:	002c      	movs	r4, r5
 80030e6:	686d      	ldr	r5, [r5, #4]
 80030e8:	e7af      	b.n	800304a <_malloc_r+0x3a>
 80030ea:	230c      	movs	r3, #12
 80030ec:	0030      	movs	r0, r6
 80030ee:	6033      	str	r3, [r6, #0]
 80030f0:	f000 f81e 	bl	8003130 <__malloc_unlock>
 80030f4:	e7cd      	b.n	8003092 <_malloc_r+0x82>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	200001e0 	.word	0x200001e0

080030fc <_sbrk_r>:
 80030fc:	2300      	movs	r3, #0
 80030fe:	b570      	push	{r4, r5, r6, lr}
 8003100:	4d06      	ldr	r5, [pc, #24]	; (800311c <_sbrk_r+0x20>)
 8003102:	0004      	movs	r4, r0
 8003104:	0008      	movs	r0, r1
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	f7fd ff1a 	bl	8000f40 <_sbrk>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d103      	bne.n	8003118 <_sbrk_r+0x1c>
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d000      	beq.n	8003118 <_sbrk_r+0x1c>
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	200001e8 	.word	0x200001e8

08003120 <__malloc_lock>:
 8003120:	b510      	push	{r4, lr}
 8003122:	4802      	ldr	r0, [pc, #8]	; (800312c <__malloc_lock+0xc>)
 8003124:	f000 f80c 	bl	8003140 <__retarget_lock_acquire_recursive>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	200001ec 	.word	0x200001ec

08003130 <__malloc_unlock>:
 8003130:	b510      	push	{r4, lr}
 8003132:	4802      	ldr	r0, [pc, #8]	; (800313c <__malloc_unlock+0xc>)
 8003134:	f000 f805 	bl	8003142 <__retarget_lock_release_recursive>
 8003138:	bd10      	pop	{r4, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	200001ec 	.word	0x200001ec

08003140 <__retarget_lock_acquire_recursive>:
 8003140:	4770      	bx	lr

08003142 <__retarget_lock_release_recursive>:
 8003142:	4770      	bx	lr

08003144 <_init>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr

08003150 <_fini>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr
